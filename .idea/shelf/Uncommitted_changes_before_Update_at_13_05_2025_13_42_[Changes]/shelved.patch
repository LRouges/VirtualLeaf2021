Index: src/GUI/mesh.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  This file is part of the Virtual Leaf.\n *\n *  VirtualLeaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  VirtualLeaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <sstream>\n#include <cstdlib>\n//#include <cerrno>\n#include <cstring>\n#include <numeric>\n#include <functional>\n#include <fstream>\n#include <QPair>\n#include \"mesh.h\"\n#include \"tiny.h\"\n#include \"parameter.h\"\n#include \"random.h\"\n#include \"pi.h\"\n#include \"parse.h\"\n#include \"matrix.h\"\n#include \"sqr.h\"\n#include \"nodeset.h\"\n#include \"nodeitem.h\"\n#include \"simplugin.h\"\n#include \"forwardeuler.h\"\n\n#include <QDebug>\n#include <set>\n#include <iostream>\n#include <iterator>\n#include <QTextStream>\n\nstatic const std::string _module_id(\"$Id$\");\n\nextern Parameter par;\n\nvoid Mesh::AddNodeToCellAtIndex(Cell *c, Node *n, Node *nb1, Node *nb2, list<Node *>::iterator ins_pos) {\n  c->nodes.insert(ins_pos, n);        \n  n->owners.push_back( Neighbor(c, nb1, nb2 ) );\n}\n\n\nvoid Mesh::AddNodeToCell(Cell *c, Node *n, Node *nb1, Node *nb2) {\n\n  c->nodes.push_back( n );\n  n->owners.push_back( Neighbor(c, nb1, nb2 ) );\n}\n\nvoid Mesh::PerturbChem(int chemnum, double range) {\n\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    (*i)->chem[chemnum] += range*(RANDOM()-0.5);\n    if ((*i)->chem[chemnum]<0.) (*i)->chem[chemnum]=0.;\n  }\n}\n\nvoid Mesh::CellFiles(const Vector ll, const Vector ur) {\n\n  Cell *cell = RectangularCell(ll,ur,0.001); \n\n  for (int c=0;c<Cell::NChem();c++) {\n    cell->SetChemical(c,par.initval[c]);\n  }\n\n  cell->SetTargetArea(cell->CalcArea());\n\n  Vector axis(1,0,0);\n\n  // divide rectangle a number of times\n  for (int i=0;i<6;i++) {\n    IncreaseCellCapacityIfNecessary();\n\n    vector <Cell *> current_cells = cells;\n    for (vector<Cell *>::iterator j=current_cells.begin(); j!=current_cells.end();j++) {\n      (*j)->DivideOverAxis(axis);\n    }\n    axis=axis.Perp2D();\n\n  }\n\n  IncreaseCellCapacityIfNecessary();\n\n  axis=axis.Perp2D();\n\n  vector <Cell *> current_cells = cells;\n  for (vector<Cell *>::iterator j=current_cells.begin(); j!=current_cells.end();j++) {\n    (*j)->DivideOverAxis(axis);\n  }\n\n\n  double sum_l=0; int n_l=0;\n  for (list<Node *>::const_iterator i=cell->nodes.begin(); i!=cell->nodes.end(); i++) {\n    list<Node *>::const_iterator nb=i; nb++; \n    if (nb==cell->nodes.end()) \n      nb=cell->nodes.begin();\n\n    double l = (**nb-**i).Norm();\n\n    sum_l += l;\n    n_l++;\n\n  }\n\n\n  Node::target_length = sum_l/(double)n_l;\n  // a bit more tension\n  Node::target_length/=4.;\n\n  SetBaseArea();\n}\n\nCell *Mesh::RectangularCell(const Vector ll, const Vector ur, double rotation) {\n\n  Cell *cell=AddCell(new Cell());\n  cell->m=this;\n\n  Matrix rotmat;\n  rotmat.Rot2D(rotation); // rotation over 0,0\n\n  Node *n1=AddNode(new Node(rotmat * ll));\n  Node *n2=AddNode(new Node(rotmat * Vector(ll.x, ur.y,0)));\n  Node *n3=AddNode(new Node(rotmat * ur));\n  Node *n4=AddNode(new Node(rotmat * Vector(ur.x, ll.y,0)));\n\n  n1->boundary=true;\n  n2->boundary=true;\n  n3->boundary=true;\n  n4->boundary=true;\n\n  //n1.fixed=n2.fixed=n3.fixed=n4.fixed=true;\n\n  AddNodeToCell(cell, n4, \n\t\tn1,\n\t\tn3);\n\n  AddNodeToCell(cell, n3, \n\t\tn4,\n\t\tn2);\n\n  AddNodeToCell(cell, n2, \n\t\tn3,\n\t\tn1);\n\n  AddNodeToCell(cell, n1, \n\t\tn2,\n\t\tn4);\n\n\n  AddNodeToCell(boundary_polygon, n4, \n\t\tn1,\n\t\tn3);\n  AddNodeToCell(boundary_polygon, n3, \n\t\tn4,\n\t\tn2);\n  AddNodeToCell(boundary_polygon, n2, \n\t\tn3,\n\t\tn1);\n  AddNodeToCell(boundary_polygon, n1, \n\t\tn2,\n\t\tn4);\n\n  cell->setCellVec(Vector(0,1,0));\n\n  boundary_polygon->m = this;\n  boundary_polygon->area = 0;\n\n  cell->area = cell->CalcArea();\n  // target length is the length of the elements\n\n  Node::target_length = ur.y-ll.y;\n  // a bit more tension\n  Node::target_length/=2;\n\n  cell->SetIntegrals(); \n  cell->ConstructNeighborList();\n\n  return cell;\n}\n\nCell &Mesh::EllipticCell(double xc, double yc, double ra, double rb,  int nnodes, double rotation) {\n\n  int first_node=Node::nnodes;\n  //  nodes.reserve(nodes.size()+nnodes);\n\n\n  //cells.push_back(Cell(xc,yc));\n  Cell *c=AddCell(new Cell(xc,yc));\n  c->m=this;\n\n  for (int i=0;i<nnodes;i++) {\n\n    double angle=2*Pi*(i/(double)nnodes);\n    double x=xc+ra*cos(angle)*cos(rotation) - rb*sin(angle)*sin(rotation);\n    double y=yc+ra*cos(angle)*sin(rotation) + rb*sin(angle)*cos(rotation);\n\n\n    Node *n=AddNode(new Node(x,y,0));\n    n->boundary = true;\n\n  } \n\n  for (int i=0;i<nnodes;i++) {\n\n    AddNodeToCell(c,\n\t\t  nodes[first_node + i],\n\t\t  nodes[first_node+ (nnodes+i-1)%nnodes],\n\t\t  nodes[first_node+ (i + 1)%nnodes]);\n    AddNodeToCell(boundary_polygon,\n\t\t  nodes[first_node + i],\n\t\t  nodes[first_node+ (nnodes+i-1)%nnodes],\n\t\t  nodes[first_node+ (i + 1)%nnodes]);\n  }\n\n  boundary_polygon->m = this;\n  boundary_polygon->area = 0;\n\n  c->area = c->CalcArea();\n  // target length is the length of the elements\n\n  Node::target_length = (2 * ((ra +rb)/2.) * sin (Pi/nnodes));\n  // a bit more tension\n  Node::target_length/=2;\n\n  c->SetIntegrals(); \n  c->at_boundary=true;\n\n  return *c;\n}\n\nCell &Mesh::LeafPrimordium(int nnodes, double pet_length) {\n\n  // first leaf cell\n\n  int first_node=Node::nnodes;\n\n  Cell *circle=AddCell(new Cell(0,0));\n  circle->m=this;\n  const double ra=10, rb=10;\n  const double xc=0,yc=0;\n  const double rotation=0;\n  for (int i=0;i<nnodes;i++) {\n\n    double angle=2*Pi*(i/(double)nnodes);\n    double x=xc+ra*cos(angle)*cos(rotation) - rb*sin(angle)*sin(rotation);\n    double y=yc+ra*cos(angle)*sin(rotation) + rb*sin(angle)*cos(rotation);\n\n\n    Node *n=AddNode(new Node(x,y,0));\n\n    /* if (angle > 1.25*Pi && angle < 1.75*Pi ) {\n       n.sam = true;\n       }*/\n\n    AddNodeToCell(circle,\n\t\t  n,\n\t\t  nodes[first_node+ (nnodes+i-1)%nnodes],\n\t\t  nodes[first_node+ (i + 1)%nnodes]);\n\n  }\n\n  boundary_polygon->m = this;\n  boundary_polygon->area = 0;\n\n  circle->area = circle->CalcArea();\n  // target length is the length of the elements\n\n  Node::target_length = (2 * ((ra +rb)/2.) * sin (Pi/nnodes));\n  // a bit more tension\n  Node::target_length/=2;\n\n  circle->SetIntegrals(); \n\n  //return c;\n\n  circle->SetTargetArea(2*circle->Area());\n\n  // Petiole: starts at both sides of the circular cell\n  // get position of the (n/4)'th and (3*(n/4))'th node.\n\n  list<Node *>::reverse_iterator it_n1=circle->nodes.rbegin();\n  for (int i=0; i<nnodes/2; i++) \n    it_n1++;\n  it_n1--;\n\n  list<Node *>::reverse_iterator it_n2=--circle->nodes.rend();\n\n  Cell *petiole=AddCell(new Cell());\n\n  Node *n1 = *it_n1;\n  Node *n2 = *it_n2;\n\n  Node *n3=AddNode( new Node ( *n2 + Vector( 0, pet_length, 0) ) );\n  Node *n4=AddNode( new Node ( *n1 + Vector( 0, pet_length, 0) ) );\n\n  n3->boundary=true;\n  n4->boundary=true;\n\n  AddNodeToCell(petiole, *it_n1, \n\t\tn4,\n\t\tnodes[(*it_n2)->Index() \n\t\t      + (( (*it_n1)->Index() - (*it_n2)->Index() )-1+nnodes)%nnodes]);\n\n\n\n  list<Node *>::reverse_iterator i=it_n1; i++;\n  for (; i!=it_n2; ++i) {\n    AddNodeToCell(petiole, *i,\n\t\t  nodes[(*it_n2)->Index() + (((*i)->Index()-(*it_n2)->Index()) + 1)%nnodes],\n\t\t  nodes[(*it_n2)->Index() + (((*i)->Index()-(*it_n2)->Index())-1+nnodes)%nnodes]);\n  }\n\n  AddNodeToCell(petiole, *it_n2, *it_n2 + 1, n3);\n\n  (*it_n2)->boundary=true;\n\n  AddNodeToCell(petiole, n3, n2, n4);\n  AddNodeToCell(petiole, n4, n3, n1);\n\n\n#ifdef QDEBUG  \n  qDebug() << circle << endl;\n  qDebug() << petiole << endl;\n#endif\n\n  AddNodeToCell(boundary_polygon, *it_n1, n4, *it_n2 + ((*it_n1-*it_n2)+1)%nnodes); // is this gonna work?\n\n  (*it_n1)->boundary=true;\n\n  for (int i=0;i<nnodes;i++) {\n\n    if (nodes[(first_node + i)]->owners.size()==1) {\n      AddNodeToCell(boundary_polygon,\n\t\t    nodes[first_node +i],\n\t\t    nodes[first_node+ (nnodes+i-1)%nnodes],\n\t\t    nodes[first_node+ (i + 1)%nnodes]);\n\n      nodes[first_node+i]->boundary=true;\n    }\n  }\n\n  AddNodeToCell(boundary_polygon, *it_n2, nodes[(nnodes+(*it_n2)->Index() - 1)%nnodes], n3);\n  AddNodeToCell(boundary_polygon, n3, n2, n4);\n  AddNodeToCell(boundary_polygon, n4, n3, n1);\n\n  // make petiole solid\n  for (list<Node *>::iterator i=petiole->nodes.begin(); i!=petiole->nodes.end(); i++) {\n    (*i)->Fix();\n  }\n  petiole->Fix();\n\n  petiole->area=petiole->CalcArea();\n  petiole->target_area=petiole->area;  \n  petiole->ConstructNeighborList();\n  circle->ConstructNeighborList();\n  boundary_polygon->ConstructConnections();\n  boundary_polygon->ConstructNeighborList();\n\n  circle->setCellVec(Vector(0,1,0));\n\n  return *circle;\n}\n\n/*Cell &Mesh::Box() {\n  }*/\n\n\n// return bounding box of mesh\nvoid Mesh::BoundingBox(Vector &LowerLeft, Vector &UpperRight) {\n\n  LowerLeft = **nodes.begin();\n  UpperRight = **nodes.begin();\n  for (vector<Node *>::iterator c=nodes.begin(); c!=nodes.end(); c++) {\n    if ((*c)->x < LowerLeft.x)\n      LowerLeft.x = (*c)->x;\n    if ((*c)->y < LowerLeft.y)\n      LowerLeft.y = (*c)->y;\n    if ((*c)->z < LowerLeft.z)\n      LowerLeft.z = (*c)->z;\n    if ((*c)->x > UpperRight.x) \n      UpperRight.x = (*c)->x;\n    if ((*c)->y > UpperRight.y) \n      UpperRight.y = (*c)->y;\n    if ((*c)->z > UpperRight.z)\n      UpperRight.z = (*c)->z;\n  }\n}\n\n\ndouble Mesh::Area(void) {\n\n  double area=0;\n  vector<Cell *>::iterator i=cells.begin();\n  while (i != cells.end()) {\n    area += (*(i++))->Area();\n  }\n  return area;\n}\n\nvoid Mesh::SetBaseArea(void) {\n\n  // Set base area to mean area. \n  // This method is typically called during initiation, after\n  // defining the first cell\n  Cell::BaseArea() = Area()/cells.size();\n}\n\n// for optimization, we moved Displace to Mesh\n\nclass DeltaIntgrl {\n\npublic:\n  double area;\n  double ix, iy;\n  double ixx,ixy,iyy;\n  DeltaIntgrl(double sarea,double six,double siy,double sixx,double sixy,double siyy) {\n    area=sarea;\n    ix=six;\n    iy=siy;\n    ixx=sixx;\n    ixy=sixy;\n    iyy=siyy;\n  }\n};\n\nvoid Mesh::Clear(void) {\n\n  // clear nodes\n  for (vector<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    delete *i;\n  }\n\n  nodes.clear();\n  Node::nnodes=0;\n\n  node_insertion_queue.clear();\n  // Clear NodeSets\n  for (vector<NodeSet *>::iterator i=node_sets.begin(); i!=node_sets.end(); i++) {\n    delete *i;\n  }\n\n  node_sets.clear();\n  time = 0;\n\n  // clear cells\n\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    delete *i;\n  }\n\n  cells.clear();\n  Cell::NCells() = 0;\n\n  if (boundary_polygon) {\n    delete boundary_polygon;\n    boundary_polygon=0;\n  }\n\n  // Clear walls\n  for (list<Wall *>::iterator i=walls.begin(); i!=walls.end(); i++) {\n    delete *i;\n  }\n\n  walls.clear();\n  WallBase::nwalls = 0;\n  //tmp_walls->clear();\n\n  shuffled_cells.clear();\n  shuffled_nodes.clear();\n \n#ifdef QDEBUG\n  qDebug() << \"cells.size() = \" << cells.size() << endl;\n  qDebug() << \"walls.size() = \" << walls.size() << endl;\n  qDebug() << \"nodes.size() = \" << nodes.size() << endl;\n#endif\n}\n\ndouble Mesh::CellSpecificStiffnessOneSide(Node *nb,set<int> &nodeown) {\n    // determines the list of cells belonging to the node and its neighbors\n    set<int> nb1own;\n    vector<int> intersection_no_nb1;\n    for (list<Neighbor>::iterator c=nb->owners.begin(); c!=nb->owners.end(); c++) {\n      nb1own.insert(c->cell->Index());\n    }\n    set_intersection(nodeown.begin(), nodeown.end(), nb1own.begin(), nb1own.end(), back_inserter(intersection_no_nb1));\n\n\tdouble cell_w=0.;\n    // uses the cell specific stiffness values to calculate length_dh as introduced in Lebovka et al\n    for (list<Neighbor>::iterator c=nb->owners.begin(); c!=nb->owners.end(); c++) {\n      if (std::find(intersection_no_nb1.begin(), intersection_no_nb1.end(), c->cell->Index()) != intersection_no_nb1.end()) {\n    \t  cell_w += (c->cell->Index() !=-1?c->cell->GetWallStiffness():par.rel_perimeter_stiffness);\n      }\n      if (std::isnan(cell_w)) {\n    \t  break;\n      }\n    }\n    return cell_w;\n}\nvoid Mesh::updateAreasOfCells(list<DeltaIntgrl> * delta_intgrl_list,Node * node) {\n\n\t// update areas of cells\n\tlist<DeltaIntgrl>::const_iterator  di_it = delta_intgrl_list->begin();\n\tfor (list<Neighbor>::iterator cit=node->owners.begin(); cit!=node->owners.end(); ( cit++) ) {\n\t  if (!cit->cell->BoundaryPolP()) {\n\t    cit->cell->area -= di_it->area;\n\t    if (par.lambda_celllength) {\n\t\tcit->cell->intgrl_x -= di_it->ix;\n\t\tcit->cell->intgrl_y -= di_it->iy;\n\t\tcit->cell->intgrl_xx -= di_it->ixx;\n\t\tcit->cell->intgrl_xy -= di_it->ixy;\n\t\tcit->cell->intgrl_yy -= di_it->iyy;\n\t    }\n\t    di_it++;\n\t  }\n\t}\n}\n\nCellBase * Mesh::getOtherCell(CellBase* c,Node* node1,Node * node2) {\n    for (list<Neighbor>::iterator nb1=node1->owners.begin(); nb1!=node1->owners.end(); nb1++) {\n    \tif (nb1->getCell() != c) {\n    \t\tfor (list<Neighbor>::iterator nb2=node2->owners.begin(); nb2!=node2->owners.end(); nb2++) {\n        \t\tif (nb1->getCell() == nb2->getCell()){\n        \t\t\treturn nb1->getCell();\n        \t\t}\n        \t}\n    \t}\n    }\n    return NULL;\n}\n\nint debugNode = -1;\n\ndouble cross(const Vector & v1, const Vector & v2)\n{\n    return (v1.x*v2.y) - (v1.y*v2.x);\n}\n\n\ndouble b_cocient(const Vector& AC, const Vector& AB,const Vector& ACperp, const Vector& ABperp) {\n\tdouble b=((AC.x-AB.x)/ABperp.x + ((AB.y-AC.y)/ACperp.y)*(ACperp.x/ABperp.x))*((ACperp.y*ABperp.x)/(ACperp.y*ABperp.x-ABperp.y*ACperp.x));\n\treturn b;\n}\n\n//http://dx.doi.org/10.1016/j.cis.2014.01.018\n// radius of circle with center on line B-C and connecting at norm of the lines (A-B ode A-C)\n// and sharing one point with the other line. This we define the kissing circle\ndouble osculating_circle_radius(const Vector& B, const Vector& A, const Vector& C) {\n\tVector AC = (C-A).Normalised();\n\tVector AB = (B-A).Normalised();\n\n\tVector ACpoint = A+AC;\n\tVector ABpoint = A+AB;\n\tVector ACperp = AC.Perp2D();\n\tVector ABperp = AB.Perp2D();\n//\tdouble b_new = b_cocient(ACpoint,ABpoint,ACperp,ABperp);\n\tdouble a_new = b_cocient(ABpoint,ACpoint,ABperp,ACperp);\n\n\tVector AM1=ACpoint+ACperp*a_new;\n//\tVector AM2=ABpoint+ABperp*b_new;\n\n\tdouble r1 = (ACpoint-AM1).Norm();\n//\tdouble r2 = (ABpoint-AM1).Norm();\n// commented lines as check if r1==r2\n\treturn r1;\n\n}\n\nbool Mesh::findOtherSide(CellBase * c,Node * z1,Node * z2,Node ** w0,Node ** w1,Node ** w2,Node ** w3) {\n\tlist <Node *>::iterator i=c->nodes.begin();\n\t* w0=*i;\n\t* w1=*(++i);\n\t* w2=*(++i);\n\t* w3=*(++i);\n\tNode * o0=*w0;\n\tNode * o1=*w1;\n\tNode * o2=*w2;\n\twhile (i!=c->nodes.end()) {\n\t\tif ((*w1==z1 && *w2==z2)||(*w2==z1 && *w1==z2)) {\n\t\t\treturn true;\n\t\t}\n\t    *w0=*w1;\n\t    *w1=*w2;\n\t    *w2=*w3;\n\t    *w3=*(++i);\n\t}\n\t*w3=o0;\n\tif((*w1==z1 && *w2==z2)||(*w2==z1 && *w1==z2)) {\n\t\treturn true;\n\t}\n\t*w0=*w1;\n\t*w1=*w2;\n\t*w2=*w3;\n\t*w3=o1;\n\tif((*w1==z1 && *w2==z2)||(*w2==z1 && *w1==z2)) {\n\t\treturn true;\n\t}\n\t*w0=*w1;\n\t*w1=*w2;\n\t*w2=*w3;\n\t*w3=o2;\n\tif((*w1==z1 && *w2==z2)||(*w2==z1 && *w1==z2)) {\n\t\treturn true;\n\t}\n\t*w0=NULL;\n\t*w1=NULL;\n\t*w2=NULL;\n\t*w3=NULL;\n\treturn false;\n}\ndouble lambda_for_shift=0.1;\n\ndouble getBaseLength(CellBase* c,NodeBase* n1, NodeBase * n2,double elastic_limit) {\n\tWallElement* wallElement = n1->getWallElement(c);\n\tif (wallElement == NULL) {\n\t\treturn ((*n1)-(*n2)).Norm()/elastic_limit;\n\t}else {\n\t\tdouble base_length = wallElement->getBaseLength();\n\t\tif (std::isnan(base_length)) {\n\t\t\treturn ((*n1)-(*n2)).Norm()/elastic_limit;\n\t\t}\n\t\treturn base_length;\n\t}\n}\n\ndouble getStiffness(CellBase* c,NodeBase* n1) {\n\tWallElement* wallElement = n1->getWallElement(c);\n\tif (wallElement == NULL) {\n\t\treturn c->GetWallStiffness();\n\t}else {\n\t\tdouble stiffness = wallElement->getStiffness();\n\t\tif (std::isnan(stiffness)) {\n\t\t\treturn c->GetWallStiffness();\n\t\t}\n\t\treturn stiffness;\n\t}\n}\n\nvoid Mesh::RemodelWallElement(vector<CellWallCurve> & curves,CellBase* c,Node* w0,Node* w1,Node* w2,Node* w3,Node* w4) {\n\n\tNode * o0;\n\tNode * o1;\n\tNode * o2;\n\tNode * o3;\n\tdouble angle = (*w1-*w2).SignedAngle((*w3-*w2));\n\tif ((angle>0&&c->BoundaryPolP())||(angle<0&&!c->BoundaryPolP())) {\n\t\t//we would bend inward and intersect cells\n\t\treturn;\n\t}\n\n\tCellBase* c2 = getOtherCell(c,w1,w2);\n    if (c2 != NULL && !(c2->GetCellVeto()) && findOtherSide(c2,w2,w1,&o0,&o1,&o2,&o3)){\n\n\n//now check how profitable the move of wall element w1-w2 to w1-w3\n//this changes also cell c2 where wall element o1->o2 will be replaced\n//by wall elements o1->w3 and w3->o2 all other surrounding cells will remain\n//unchanged.\n\t\tdouble bending_dh = 0.;\n\t\tif (abs(par.bend_lambda) > 0.01)\t  {\n\t// angles that are before w0-w1-w2/w1-w2-w3/w2-w3-w4 and o0-o1-o2/o1-o2-o3\n\t// angles after move w0-w1-w3/w1-w3-w4 and o0-o1-w3/o1-w3-o2/w3-o2-o3\n\t\t\tdouble r1 = osculating_circle_radius(*w0,*w1,*w2);\n\t\t\tdouble r2 = osculating_circle_radius(*w1,*w2,*w3);\n\t\t\tdouble r3 = osculating_circle_radius(*w2,*w3,*w4);\n\t\t\tdouble r4 = osculating_circle_radius(*w0,*w1,*w3);\n\t\t\tdouble r5 = osculating_circle_radius(*w1,*w3,*w4);\n\t\t\tdouble energy_before =\n\t\t\t\t\t1./(r1)+\n\t\t\t\t\t1./(r2)+\n\t\t\t\t\t1./(r3)+\n\t\t\t\t\t1./((osculating_circle_radius(*o0,*o1,*o2)))+\n\t\t\t\t\t1./((osculating_circle_radius(*o1,*o2,*o3)));\n\t\t\tdouble energy_after =\n\t\t\t\t\t1./(r4)+\n\t\t\t\t\t1./((osculating_circle_radius(*o1,*w3,*o2)))+\n\t\t\t\t\t1./(r5)+\n\t\t\t\t\t1./((osculating_circle_radius(*o0,*o1,*w3)))+\n\t\t\t\t\t1./((osculating_circle_radius(*w3,*o2,*o3)));\n\t\t\tbending_dh = par.bend_lambda*(energy_after-energy_before*1.5+12.);\n\t\t}\n\t\t// the length contraint just needs to be calculated for the wall elements that change length\n\t\tdouble wl1=((*w1)-(*w2)).Norm();\n\t\tdouble wl2=((*w3)-(*w2)).Norm();\n\t\tdouble wl3=((*w1)-(*w3)).Norm();\n\t\tdouble s_bef = wl1;\n\t\tdouble s_aft = wl3+wl2;\n\n\t\tdouble r_bef = wl1+wl2;\n\t\tdouble r_aft = wl3;\n\n\t\tdouble length_before = wl1+wl2+wl1;\n\n\t\tdouble stiffness = (\n\t\t\t\tgetStiffness(c, w1)*wl1+\n\t\t\t\tgetStiffness(c, w2)*wl2+\n\t\t\t\tgetStiffness(c2, o2)*wl1\n\t\t\t\t) / length_before;\n\n\t\tdouble s_base = getBaseLength(c2, w1, w2,this->elastic_limit);\n\t\tdouble r_base = getBaseLength(c, w1, w2,this->elastic_limit) + getBaseLength(c2, w2, w3,this->elastic_limit);\n\n\t\tdouble length_dh = (\n    \t\telastic_modulus * stiffness * c->GetWallStiffness() *\n\t\t\t(\n\t\t\t(s_base) *(\n\t\t\t\t\t DSQR(s_aft/s_base - 1)\n\t\t\t\t\t-DSQR(s_bef/s_base - 1)\n\t\t\t) -\n\t\t\t(r_base)*(\n\t\t\t\t\t DSQR(r_aft/r_base - 1)\n\t\t\t\t\t-DSQR(r_bef/r_base - 1)\n            )));\n\n        double dh = length_dh + bending_dh;\n        double threshold;\n        if (dh < 0 || RANDOM() < (threshold=exp((-dh)/par.T)))\t\t{\n\n\t\t\tCellWallCurve curve;\n\t\t\tcurve.setCell(c);\n\t\t\tcurve.setOtherCell(c2);\n\t\t\tcurve.shift(w1);\n\t\t\tcurve.shift(w2);\n\t\t\tcurve.shift(w3);\n\t\t\tcurve.involved_nodes(w0,w4,o0,o1,o2,o3);\n            curve.setThreshold(threshold);\n\n\t\t\tcurves.push_back(curve);\n\t\t}\n\t\tif (debugNode>-1){\n\t\t\tcout << \"move  \" << w1->Index()<<\"-\"<<w2->Index()<<\" to \"<<w1->Index()<<\"-\"<<w3->Index()<<\" en:\"<< length_dh <<\"\\n\";\n\t\t}\n\t}\n}\n\nvoid extractData(WallElement *we,double & base_length,double &stiffness) {\n\tif (we != NULL) {\n\t\tbase_length += we->getBaseLength();\n\t\tif (std::isnan(we->getStiffness()) ) {\n\t\t\tstiffness+=we->getCell()->GetWallStiffness();\n\t\t} else {\n\t\t\tstiffness+=we->getStiffness();\n\t\t}\n\t}else {\n\t\tbase_length=std::nan(\"1\");\n\t\tstiffness=std::nan(\"1\");\n\t}\n}\n\nvoid Mesh::RemodelCellWallElements(vector<CellWallCurve> & curves,CellBase *c) {\n\t//The algorithm needs at least 5 nodes along the wall\n\tif (c->nodes.size()<5) {\n\t\treturn;\n\t}\n\tlist <Node *>::iterator i = c->nodes.begin();\n\tNode * w0=*i;\n\tNode * w1=*(++i);\n\tNode * w2=*(++i);\n\tNode * w3=*(++i);\n\tNode * w4=*(++i);\n\tNode * o0=w0;\n\tNode * o1=w1;\n\tNode * o2=w2;\n\tNode * o3=w3;\n\twhile (i!=c->nodes.end()) {\n\t\tRemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;\n\t\tw0=w1;\n\t\tw1=w2;\n\t\tw2=w3;\n\t\tw3=w4;\n\t\tw4=*(++i);\n\t}\n\tw4=o0;\n\tRemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;\n\tw0=w1;\n\tw1=w2;\n\tw2=w3;\n\tw3=w4;\n\tw4=o1;\n\tRemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;\n\tw0=w1;\n\tw1=w2;\n\tw2=w3;\n\tw3=w4;\n\tw4=o2;\n\tRemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;\n\tw0=w1;\n\tw1=w2;\n\tw2=w3;\n\tw3=w4;\n\tw4=o3;\n\tRemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;\n}\n\ndouble Mesh::RemodelWallElements(vector<CellWallCurve> & curves) {\n\tfor (vector<Cell *>::iterator ii=cells.begin(); ii!=cells.end(); ii++) {\n\t\tCell *c = *ii;\n\t\tc->resetCellWallCurve();\n\t\tif (!(c->GetCellVeto())) {\n\t\t\tRemodelCellWallElements(curves,c);\n\t\t}\n\t}\n\tRemodelCellWallElements(curves,boundary_polygon);\n\treturn 0.0;\n}\n\ndouble Mesh::DisplaceNodes(void) {\n\n  MyUrand r(shuffled_nodes.size());\n  vl_shuffle(shuffled_nodes.begin(),shuffled_nodes.end(),r);\n\n  double sum_dh=0;\n\n  list<DeltaIntgrl> delta_intgrl_list;\n\n  for_each( node_sets.begin(), node_sets.end(), mem_fn( &NodeSet::ResetDone ) );\n\n  for (vector<Node *>::const_iterator i=shuffled_nodes.begin(); i!=shuffled_nodes.end(); i++) {\n\n    //int n=shuffled_nodes[*i];\n    Node &node(**i);\n\n    // Do not allow displacement if fixed\n    if (node.fixed) continue;\n\n    if (node.DeadP()) continue;\n\n    // Attempt to move this cell in a random direction\n    double rx=par.mc_stepsize*(RANDOM()-0.5); // was 100.\n    double ry=par.mc_stepsize*(RANDOM()-0.5);\n\n    // Uniform with a circle of radius par.mc_stepsize\n    /* double r = RANDOM() * par.mc_stepsize;\n       double th = RANDOM()*2*Pi;\n\n       double rx = r * cos(th);\n       double ry = r * sin(th);\n    */\n    Vector new_p(node.x+rx,node.y+ry,0);\n    Vector old_p(node.x,node.y,0);\n\n    /* if (node.boundary  && boundary_polygon->MoveSelfIntersectsP(n,  new_p )) {\n    // reject if move of boundary results in self intersection\n    continue;\n    }*/\n\n\n    if (node.node_set) {\n      // move each node set only once\n      if (!node.node_set->DoneP()) \n\tnode.node_set->AttemptMove(rx,ry);\n\n    } else {\n\n      // for all cells to which this node belongs:\n      //   calculate energy difference\n\n      double area_dh=0.;\n      double bending_dh=0.;\n      double length_dh=0.;\n      double cell_length_dh=0.;\n      double alignment_dh=0.;\n\n      double old_l1=0.,old_l2=0.,new_l1=0.,new_l2=0.;\n\n      double dh=0.;\n\n      for (list<Neighbor>::const_iterator cit=node.owners.begin(); cit!=node.owners.end(); cit++) {\n\n\t\n\tCell &c=*((Cell *)(cit->cell));\n\n\tif (c.MoveSelfIntersectsP(&node,  new_p )) {\n\t\t\n\t  // reject if move results in self intersection\n\t  //\n\t  // I know: using goto's is bad practice... except when jumping out\n\t  // of deeply nested loops :-)\n\t  //cerr << \"Rejecting due to self-intersection\\n\";\n\t  goto next_node;\n\t}\n\n\t// area - (area after displacement): see notes for derivation\n\t\n\tVector i_min_1 = *(cit->nb1);\n\t//Vector i_plus_1 = m->getNode(cit->nb2);\n    Vector i_plus_1 = *(cit->nb2);\n\n\t//if (cit->cell>=0) {\n\tif (!cit->cell->BoundaryPolP()) {\n\t  double delta_A = 0.5 * ( ( new_p.x - old_p.x ) * (i_min_1.y - i_plus_1.y) +\n\t\t\t\t   ( new_p.y - old_p.y ) * ( i_plus_1.x - i_min_1.x ) );\n\n\t  area_dh +=  delta_A * (2 * c.target_area - 2 * c.area + delta_A);\n\n\n\t  // cell length constraint\n\t  // expensive and not always needed\n\t  // so we check the value of lambda_celllength\n\n\t  if (/* par.lambda_celllength */  cit->cell->lambda_celllength) {\n\n\t    double delta_ix = \n\t      (i_min_1.x + new_p.x)\n\t      * (new_p.x * i_min_1.y- i_min_1.x * new_p.y) +\n\t      (new_p.x + i_plus_1.x)\n\t      * (i_plus_1.x * new_p.y- new_p.x * i_plus_1.y) -\n\n\t      (i_min_1.x + old_p.x)\n\t      * (old_p.x * i_min_1.y- i_min_1.x * old_p.y) -\n\t      (old_p.x + i_plus_1.x)\n\t      * (i_plus_1.x * old_p.y - old_p.x * i_plus_1.y);\n\n\n\t    double delta_iy =\n\t      (i_min_1.y + new_p.y)\n\t      * (new_p.x * i_min_1.y- i_min_1.x * new_p.y) +\n\t      (new_p.y + i_plus_1.y)\n\t      * (i_plus_1.x * new_p.y- new_p.x * i_plus_1.y) -\n\n\t      (i_min_1.y + old_p.y)\n\t      * (old_p.x * i_min_1.y- i_min_1.x * old_p.y) -\n\t      (old_p.y + i_plus_1.y)\n\t      * (i_plus_1.x * old_p.y - old_p.x * i_plus_1.y);\n\n\n\t    double delta_ixx = \n\t      (new_p.x*new_p.x+\n\t       i_min_1.x*new_p.x+\n\t       i_min_1.x*i_min_1.x ) *\n\t      (new_p.x*i_min_1.y - i_min_1.x*new_p.y) +\n\n\t      (i_plus_1.x*i_plus_1.x+\n\t       new_p.x*i_plus_1.x+\n\t       new_p.x*new_p.x ) *\n\t      (i_plus_1.x*new_p.y - new_p.x*i_plus_1.y) -\n\n\t      (old_p.x*old_p.x+\n\t       i_min_1.x*old_p.x+\n\t       i_min_1.x*i_min_1.x ) *\n\t      (old_p.x*i_min_1.y - i_min_1.x*old_p.y) -\n\n\t      (i_plus_1.x*i_plus_1.x+\n\t       old_p.x*i_plus_1.x+\n\t       old_p.x*old_p.x ) *\n\t      (i_plus_1.x*old_p.y - old_p.x*i_plus_1.y);\n\n\n\t    double delta_ixy =\n\t      (i_min_1.x*new_p.y-\n\t       new_p.x*i_min_1.y)*\n\t      (new_p.x*(2*new_p.y+i_min_1.y)+\n\t       i_min_1.x*(new_p.y+2*i_min_1.y)) +\n\n\t      (new_p.x*i_plus_1.y-\n\t       i_plus_1.x*new_p.y)*\n\t      (i_plus_1.x*(2*i_plus_1.y+new_p.y)+\n\t       new_p.x*(i_plus_1.y+2*new_p.y)) -\n\n\t      (i_min_1.x*old_p.y-\n\t       old_p.x*i_min_1.y)*\n\t      (old_p.x*(2*old_p.y+i_min_1.y)+\n\t       i_min_1.x*(old_p.y+2*i_min_1.y)) -\n\n\t      (old_p.x*i_plus_1.y-\n\t       i_plus_1.x*old_p.y)*\n\t      (i_plus_1.x*(2*i_plus_1.y+old_p.y)+\n\t       old_p.x*(i_plus_1.y+2*old_p.y));\n\n\n\t    double delta_iyy = \n\t      (new_p.x*i_min_1.y-\n\t       i_min_1.x*new_p.y)*\n\t      (new_p.y*new_p.y+\n\t       i_min_1.y*new_p.y+\n\t       i_min_1.y*i_min_1.y ) + \n\n\t      (i_plus_1.x*new_p.y-\n\t       new_p.x*i_plus_1.y)*\n\t      (i_plus_1.y*i_plus_1.y+\n\t       new_p.y*i_plus_1.y+\n\t       new_p.y*new_p.y ) -\n\n\t      (old_p.x*i_min_1.y-\n\t       i_min_1.x*old_p.y)*\n\t      (old_p.y*old_p.y+\n\t       i_min_1.y*old_p.y+\n\t       i_min_1.y*i_min_1.y ) -\n\n\t      (i_plus_1.x*old_p.y-\n\t       old_p.x*i_plus_1.y)*\n\t      (i_plus_1.y*i_plus_1.y+\n\t       old_p.y*i_plus_1.y+\n\t       old_p.y*old_p.y );\n\n\t    delta_intgrl_list.push_back(DeltaIntgrl(delta_A,delta_ix,delta_iy,delta_ixx,delta_ixy,delta_iyy));\n\n\t    Vector old_axis;\n\t    double old_celllength = c.Length(&old_axis);\n\t    old_axis=old_axis.Normalised().Perp2D();\n\n\t    // calculate length after proposed update\n\t    double intrx=(c.intgrl_x-delta_ix)/6.;\n\t    double intry=(c.intgrl_y-delta_iy)/6.;\n\t    double ixx=((c.intgrl_xx-delta_ixx)/12.)-(intrx*intrx)/(c.area-delta_A);\n\t    double ixy=((c.intgrl_xy-delta_ixy)/24.)+(intrx*intry)/(c.area-delta_A);\n\t    double iyy=((c.intgrl_yy-delta_iyy)/12.)-(intry*intry)/(c.area-delta_A);\n\n\t    double rhs1=(ixx+iyy)/2., rhs2=sqrt( (ixx-iyy)*(ixx-iyy)+4*ixy*ixy )/2.;\n\n\t    double lambda_b=rhs1+rhs2;\n\n\n\t    double new_celllength=4*sqrt(lambda_b/(c.area-delta_A));\n\t    //cerr << \"new_celllength = \"  << new_celllength << endl;\n\t    //cerr << \"target_length = \"  << c.target_length << endl;\n\n\t    cell_length_dh += c.lambda_celllength * ( DSQR(c.target_length - new_celllength) - DSQR(c.target_length-old_celllength) );\n\n\t    Vector norm_long_axis(lambda_b - ixx, ixy, 0);\n\t    norm_long_axis.Normalise();\n\n\t    double alignment_before = InnerProduct(old_axis, c.cellvec);\n\t    double alignment_after = InnerProduct(norm_long_axis, c.cellvec);\n\n\t    /* cerr << \"Delta alignment = \" << alignment_before - alignment_after << endl;\n\t       cerr << \"Old alignment is \" << alignment_before << \", new alignment is \" << alignment_after << endl;\n\t       cerr << \"Old axis is \" << old_axis << \", new axis is \" << norm_long_axis << endl; \n\t    */\n\t    alignment_dh += alignment_before - alignment_after;\n\n\t    /* cerr << \"alignment_dh  = \" << alignment_dh << endl;\n\t       cerr << \"cellvec = \" << c.cellvec << endl;*/\n\n\t  } else {\n\t    // if we have no length constraint, still need to update area\n\t    delta_intgrl_list.push_back(DeltaIntgrl(delta_A,0,0,0,0,0));\n\n\t  }\n\n\t  old_l1=(old_p-i_min_1).Norm();\n\t  old_l2=(old_p-i_plus_1).Norm();\n\t  new_l1=(new_p-i_min_1).Norm();\n\t  new_l2=(new_p-i_plus_1).Norm();\n\n\t  static int count=0;\n\t  // Insertion of nodes (cell wall yielding)\n\t  if (!node.fixed) {\n\t    if (old_l1 > par.yielding_threshold*Node::target_length && !cit->nb1->fixed) {\n\t      node_insertion_queue.push( Edge(cit->nb1, &node) );\n\t    }\n\t    if (old_l2 > par.yielding_threshold*Node::target_length && !cit->nb2->fixed) {\n\t      node_insertion_queue.push( Edge(&node, cit->nb2 ) );\n\t    }\n\t    count++;\n\n\t  }\n\n\n    // We must double the weights for the perimeter (otherwise they start bulging...)\n    double w1, w2;\n#ifdef FLEMING\n  \tif (node.boundary && cit->nb1->boundary)\n  \t  w1 = par.rel_perimeter_stiffness;\n  \telse\n  \t  w1 = 1;\n  \tif (node.boundary && cit->nb2->boundary)\n  \t  w2 = par.rel_perimeter_stiffness;\n  \telse\n  \t  w2 = 1;\n\n#else\n  \tif (node.boundary && cit->nb1->boundary)\n  \t\tw1=2;\n  \telse\n  \t\tw1 = 1;\n  \tif (node.boundary && cit->nb2->boundary)\n  \t\tw2 = 2;\n  \telse\n  \t\tw2 = 1;\n#endif\n\n\n    // Cell specific wall stiffness\n    double cell_w = c.GetWallStiffness();\n    w1 = w1*cell_w;\n    w2 = w2*cell_w;\n\n\n    double w_w1 = 1;\n    double w_w2 = 1;\n    double bl_minus_1 = 0.0;\n    double bl_plus_1 = 0.0;\n\n    if (activateWallStiffnessHamiltonian()) {\n    \tcalculateWallStiffness(&c, *i, &w_w1, &w_w2, &bl_minus_1, &bl_plus_1);\n    }\n    if (bl_minus_1>0 && bl_plus_1>0) {\n        w1 = cell_w * (w_w1);\n        w2 = cell_w * (w_w2);\n        //check if wall elements are defined and pick the appropriate length_dh\n\n            length_dh +=\n        \t\telastic_modulus * w1 *\n        \t\tbl_minus_1 *(DSQR(new_l1/bl_minus_1 - 1)-DSQR(old_l1/bl_minus_1 - 1)) +\n                elastic_modulus * w2 *\n\t\t\t\tbl_plus_1 *(DSQR(new_l2/bl_plus_1 - 1)-DSQR(old_l2/bl_plus_1 - 1));\n    }\n    else {\n    \tlength_dh +=2*Node::target_length * (\n    \t\t\tw1*(old_l1 - new_l1) +\n    \t\t\tw2*(old_l2 - new_l2) ) +\n        \t\tw1*(DSQR(new_l1) - DSQR(old_l1)) +\n\t\t\t\tw2*(DSQR(new_l2) - DSQR(old_l2));\n\t}\n//    cout << node << \"\\t\" << bl_minus_1 <<  \"\\t\" << bl_plus_1 <<  \"\\t\" << w_w1 <<  \"\\t\" << w_w2 << \"\\n\";\n\t}\n\n\t// bending energy also holds for outer boundary\n\t// first implementation. Can probably be done more efficiently\n\t// calculate osculating circle radius (gives local curvature)\n\t// the ideal bending state is flat... (K=0)\n\tif (abs(par.bend_lambda) > 0.01)\t  {\n\t  // strong bending energy to resist \"cleaving\" by division planes\n\t  double r1, r2;\n\n\t  Vector before_a(i_min_1.x,i_min_1.y,0);\n\t  Vector before_b(old_p.x, old_p.y,0);\n\t  Vector before_c(i_plus_1.x, i_plus_1.y,0);\n\t  r1 = osculating_circle_radius(before_a, before_b, before_c);\n\n\t  Vector after_a(i_min_1.x, i_min_1.y,0);\n\t  Vector after_b(new_p.x, new_p.y,0);\n\t  Vector after_c(i_plus_1.x, i_plus_1.y,0);\n\t  r2 = osculating_circle_radius(after_a, after_b, after_c);\n\n\t  if (r1<0 || r2<0) {\n\t    MyWarning::warning(\"r1 = %f, r2 = %f\",r1,r2);\n\t  }\n\t  bending_dh += DSQR(1/r2 - 1/r1);\n\t}\n      }\n      dh = \tarea_dh + cell_length_dh +\n      par.lambda_length * length_dh + par.bend_lambda * bending_dh + par.alignment_lambda * alignment_dh;\n\n         //(length_constraint_after - length_constraint_before);\n\n      if (dh < 0 || RANDOM()<exp((-dh)/par.T)) {\n\t\tupdateAreasOfCells(&delta_intgrl_list, &node) ;\n\n\t\tnode.x = new_p.x;\n\t\tnode.y = new_p.y;\n\n\t\tsum_dh += dh;\n      }\n    } \n  next_node:\n    delta_intgrl_list.clear();//dA_list.clear();\n\n  }\n\n  return sum_dh;\n}\n\nvoid Mesh::WallRelaxation(void) {\n\n\t// as we relax every wall element independently no re-scuffling is necessary.\n\tfor (vector<Cell *>::const_iterator i=cells.begin(); i!=cells.end(); i++) {\n\t\tCell &cell(**i);\n\n\t\t// check lengths of wall elements and apply plastic deformation\n\t\tcell.LoopWallElements([this](auto wallElementInfo){\n\t\t\tif(wallElementInfo->hasWallElement()){\n\t\t\t\tif(wallElementInfo->plasticStretch(this->elastic_limit)){\n\t\t\t\t\twallElementInfo->updateBaseLength(this->elastic_limit);\n                } else if(std::isnan(wallElementInfo->getBaseLength())){\n                    wallElementInfo->getWallElement()->setBaseLength(wallElementInfo->getLength()/this->elastic_limit);\n                }\n\t\t\t}\n\t\t});\n\t}\n}\n\nvoid extractWallData(WallElementInfo* wallElementInfo,double *w,double* bl){\n\tdouble stiffness=.0;\n\tdouble base_length=.0;\n\tif (wallElementInfo->hasWallElement()) {\n\t\tstiffness = wallElementInfo->getWallElement()->getStiffness();\n\t\tbase_length = wallElementInfo->getBaseLength();\n\t} else {\n\t\tstiffness = wallElementInfo->getCell()->GetWallStiffness();\n\t}\n\tif (!std::isnan(stiffness)){\n\t\t(*w) += stiffness;\n\t\t(*bl) += base_length;\n\t}\n}\n\nvoid Mesh::calculateWallStiffness(CellBase* c, Node* node, double *w_p1,double *w_p2, double* bl_minus_1, double* bl_plus_1) {\n\tc->LoopWallElements([node,w_p1,w_p2,bl_minus_1,bl_plus_1](auto wallElementInfo){\n\t\tint points = 0;\n\t\tif (wallElementInfo->isTo(node)) {\n            extractWallData(wallElementInfo,w_p1,bl_minus_1);\n            points++;\n\t\t} else\tif (wallElementInfo->isFrom(node)) {\n            extractWallData(wallElementInfo,w_p2,bl_plus_1);\n            points++;\n        }\n\t\tif (points == 2) {\n            //stop the loop, as we do not need to go further.\n        \twallElementInfo->stopLoop();\n\t\t}\n\t});\n}\n\n\n\n\n\nvoid Mesh::InsertNode(Edge &e) {\n\n\n  // Construct a new node in the middle of the edge\n  Node *new_node = AddNode( new Node ( ( *e.first + *e.second )/2 ) );\n\n  // if new node is inserted into the boundary\n  // it will be part of the boundary, fixed, and source, too\n\n  // The new node is part of the boundary only if both its neighbors are boundary nodes and the boundray proceeds from first to second.\n  new_node->boundary = (e.first->BoundaryP() && e.first->BoundaryP()) && ((findNextBoundaryNode(e.first))->Index() == e.second->Index());\n  new_node->fixed = e.first->fixed && e.second->fixed;\n  new_node->sam = new_node->boundary && (e.first->sam || e.second->sam);\n\n  // insert it into the boundary polygon;\n  /* if (new_node->boundary) {\n\n  // find the position of the first node in the boundary\n  list<Node *>::iterator ins_pos = find\n  (boundary_polygon->nodes.begin(),\n  boundary_polygon->nodes.end(),\n  e.first);\n  // ... second node comes before or after it ...\n  if (*(++ins_pos!=boundary_polygon->nodes.end()?\n  ins_pos:boundary_polygon->nodes.begin())!=e.second) {\n\n  boundary_polygon->nodes.insert(((ins_pos--)!=boundary_polygon->nodes.begin()?ins_pos:(--boundary_polygon->nodes.end())), new_node);\n\n  // .. set the neighbors of the new node ...\n  // in this case e.second and e.first are inverted\n  new_node->owners.push_back( Neighbor(boundary_polygon, e.second, e.first ) );\n  //cerr << \"pushing back \" << Neighbor(boundary_polygon->index, e.second, e.first ) << endl;\n  } else {\n  // insert before second node, so leave ins_pos as it is,\n  // that is incremented\n  boundary_polygon->nodes.insert(ins_pos, new_node);\n\n  // .. set the neighbors of the new node ...\n  new_node->owners.push_back( Neighbor(boundary_polygon, e.first, e.second ) );\n  // cerr << \"pushing back \" << Neighbor(boundary_polygon->index, e.second, e.first ) << endl;\n  }\n\n  }*/\n\n\n  list<Neighbor> owners;\n\n  // push all cells owning the two nodes of the divided edges\n  // onto a list\n  copy(e.first->owners.begin(),\n       e.first->owners.end(),\n       back_inserter(owners));\n  copy(e.second->owners.begin(),\n       e.second->owners.end(),\n       back_inserter(owners));\n\n  //copy(owners.begin(), owners.end(), ostream_iterator<Neighbor>(cerr, \" \"));\n  //cerr << endl;\n\n  // sort the nodes\n  owners.sort( mem_fn( &Neighbor::Cmp ) );\n\n  //  extern ofstream debug_stream;\n\n  //  debug_stream << \"Nodes \" << e.first << \" and \" << e.second << endl;\n  //  copy(owners.begin(), owners.end(), ostream_iterator<Neighbor>(debug_stream, \" \"));\n  //  debug_stream << endl;\n\n  // the duplicates in this list indicate cells owning this edge  \n  list<Neighbor>::iterator c=owners.begin();\n  while (c!=owners.end()) {\n    c=adjacent_find(c,owners.end(),  neighbor_cell_eq);\n\n\n    if (c!=owners.end()) { // else break;\n\n      //      debug_stream << \"Cell \" << c->cell << \" owns Edge \" << e << endl;\n\n \n      // find the position of the edge's first node in cell c...\n      list<Node *>::iterator ins_pos = find\n\t(c->cell->nodes.begin(),\n\t c->cell->nodes.end(),\n\t e.first);\n      // ... second node comes before or after it ...\n\n      // XXXX probably this test is always false XXXX: No, works okay.\n      if (*(++ins_pos!=c->cell->nodes.end()?\n\t    ins_pos:c->cell->nodes.begin())!=e.second) {\n\tc->cell->nodes.insert(((ins_pos--)!=c->cell->nodes.begin()?ins_pos:(--c->cell->nodes.end())), new_node);\n\t//cells[c->cell].nodes.insert(--ins_pos, new_node->index);\n\t// .. set the neighbors of the new node ...\n\t// in this case e.second and e.first are inverted\n\t//  cerr << \"Inverted\\n\";\n\tnew_node->owners.push_back( Neighbor(c->cell, e.second, e.first ) );\n      } else {\n\t// insert before second node, so leave ins_pos as it is,\n\t// that is incremented\n\tc->cell->nodes.insert(ins_pos, new_node);\t\n\t// .. set the neighbors of the new node ...\n\t// cerr << \"Not inverted\\n\";\n\tnew_node->owners.push_back( Neighbor(c->cell, e.first, e.second ) );\n      }\n\n      // redo the neighbors:\n      //}\n\n\n      // - find cell c among owners of Node e.first\n      list<Neighbor>::iterator cpos=\n\tfind_if( e.first->owners.begin(),\n\t\t e.first->owners.end(),\n\t\t [c](auto neighbor){return neighbor.CellEquals(c->cell->Index());});\n\n      // - correct the record\n      if (cpos->nb1 == e.second) {\n\tcpos->nb1 = new_node;\n      } else \n\tif (cpos->nb2 == e.second) {\n\t  cpos->nb2 = new_node;\n\t}\n\n      // - same for Node e.second\n      cpos=\n\tfind_if( e.second->owners.begin(),\n\t\t e.second->owners.end(),\n\t\t [c](auto neighbor){return neighbor.CellEquals(c->cell->Index());});\n\n      // - correct the record\n      if (cpos->nb1 == e.first) {\n\tcpos->nb1 = new_node;\n      } else \n\tif (cpos->nb2 == e.first) {\n\t  cpos->nb2 = new_node;\n\t}\n\n\n    } else break;\n    c++; \n  }\n\n  // Repair neighborhood lists in a second loop, to make sure all\n  // `administration' is up to date\n  while (c!=owners.end()) {\n    c=adjacent_find(c,owners.end(),  neighbor_cell_eq);\n    // repair neighborhood lists of cell and Wall lists\n\n    if (!c->cell->BoundaryPolP()) {\n      c->cell->ConstructNeighborList();\n    \n    }\n    c++;\n  }\n\n  new_node->splittWallElementsBetween(e.first, e.second);\n}\n\n//\n\n// return the total amount of chemical \"ch\" in the leaf\ndouble Mesh::SumChemical(int ch) {\n\n  double sum=0.;\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    sum+=(*i)->chem[ch];\n  }\n  return sum;\n}\n\n\n\nvoid Mesh::CleanUpCellNodeLists(void) {\n\n  typedef vector <vector<Cell *>::iterator> CellItVect;\n\n  CellItVect cellstoberemoved;\n  vector<int> cellind;\n\n  // Start of by removing all stale walls.\n  //DeleteLooseWalls();\n  // collect all dead cells that need to be removed from the simulation\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    if ((*i)->DeadP()) {\n      // collect the iterators\n      cellstoberemoved.push_back(i);\n\n      // collect the indices\n      cellind.push_back((*i)->index);\n    } else {\n      // Remove pointers to dead Walls\n      for (list<Wall *>::iterator w=(*i)->walls.begin(); w!=(*i)->walls.end(); w++) {\n\tif ((*w)->DeadP()) {\n\t  (*w)=0;\n\t}\n      }\n      (*i)->walls.remove(0);\n    }\n  }\n\n  // Remove pointers to dead Walls from BoundaryPolygon\n  for (list<Wall *>::iterator w=boundary_polygon->walls.begin(); w!=boundary_polygon->walls.end(); w++) {\n    if ((*w)->DeadP()) {\n      (*w)=0;\n    }\n  }\n  boundary_polygon->walls.remove(0);\n\n\n  // Renumber cells; this is most efficient if the list of dead cell indices is sorted\n  sort(cellind.begin(),cellind.end());\n\n\n  // Reindexing of Cells\n  for (vector<int>::reverse_iterator j=cellind.rbegin(); j!=cellind.rend(); j++) {\n    for (vector<Cell *>::reverse_iterator i=cells.rbegin(); i!=cells.rend(); i++) {\n      if (*j < (*i)->index) (*i)->index--;\n    }\n  }\n\n\n  // Actual deleting of Cells\n  // We must delete in reverse order, otherwise the iterators become redefined\n  for ( CellItVect::reverse_iterator i=cellstoberemoved.rbegin(); i!=cellstoberemoved.rend(); i++) {\n    Cell::NCells()--;\n    cells.erase(*i);\n  }\n\n\n  // same for nodes\n  typedef vector <vector<Node *>::iterator> NodeItVect;\n\n  NodeItVect nodestoberemoved;\n  vector<int> nodeindlist;\n\n  // collect iterators and indices of dead nodes\n  for (vector<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    if ((*i)->DeadP()) {\n      nodestoberemoved.push_back( i );\n      nodeindlist.push_back((*i)->index);\n    }\n  }\n\n  // sort the list of dead nodes for renumbering\n  sort(nodeindlist.begin(),nodeindlist.end());\n\n\n  // Reindicing of Nodes\n  for (vector<int>::reverse_iterator j=nodeindlist.rbegin(); j!=nodeindlist.rend(); j++) {\n    for (vector<Node *>::reverse_iterator i=nodes.rbegin(); i!=nodes.rend(); i++) {\n      if (*j < (*i)->index) { \n\t(*i)->index--;\n      } \n    }\n  }\n\n  // Actual deleting of nodes\n  // We must delete in reverse order, otherwise the iterators become redefined\n  for ( NodeItVect::reverse_iterator i=nodestoberemoved.rbegin(); i!=nodestoberemoved.rend(); i++) {\n    Node::nnodes--;\n    nodes.erase(*i);\n  }\n\n\n\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    if ((*w)->DeadP()) {\n      Wall::nwalls--;\n      delete *w;\n      *w = 0;\n    }\n  }\n\n  walls.remove( 0 );\n\n\n\n  // Clean up all intercellular connections and redo everything\n  for (vector<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    (*i)->owners.clear();\n  }\n\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    (*i)->ConstructConnections();\n  }\n\n  boundary_polygon->ConstructConnections();\n\n  // remake shuffled_nodes and shuffled cells\n  shuffled_nodes.clear();\n  shuffled_nodes = nodes;\n\n  shuffled_cells.clear();\n  shuffled_cells = cells;\n}\n\nvoid Mesh::CutAwayBelowLine( Vector startpoint, Vector endpoint) {\n\n  // Kills all cells below the line startpoint -> endpoint\n\n  Vector perp = (endpoint-startpoint).Perp2D().Normalised();\n\n#ifdef QDEBUG\n  qDebug() << \"Before Apoptose\" << endl;\n#endif\n\n  TestIllegalWalls();\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n\n    // do some vector geometry to check whether the cell is below the cutting line\n    Vector cellvec = ((*i)->Centroid()-startpoint);\n\n    if ( InnerProduct(perp, cellvec) < 0 ) {\n      // remove those cells\n      (*i)->Apoptose();\n    }\n  }\n\n#ifdef QDEBUG\n  qDebug() << \"Before CleanUpCellNodeLists\" << endl;\n#endif\n  TestIllegalWalls();\n\n  CleanUpCellNodeLists();\n}\n\nvoid Mesh::CutAwaySAM(void) {\n\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    if( (*i)->Boundary() == Cell::SAM ) {\n      (*i)->Apoptose();\n    }\n  }\n  TestIllegalWalls();\n  CleanUpCellNodeLists();\n}\n\nvoid Mesh::TestIllegalWalls(void) {\n\n  for (list<Wall *>::iterator w = walls.begin(); w!=walls.end(); w++) {\n    if ((*w)->IllegalP() ) {\n#ifdef QDEBUG\n      cerr << \"Wall \" << **w << \" is illegal.\" << endl;\n#endif\n    }\n  }\n}\n\n\n\nclass node_owners_eq : public unary_function<Node, bool> {\n  int no;\npublic:\n\n  explicit node_owners_eq(int nn) { no=nn; }\n\n  bool operator() (const Node &n) const {\n    if (n.CellsSize()==1) \n      return true;\n    else \n      return false;\n  }\n};\n\n\nvoid Mesh::RepairBoundaryPolygon(void) {\n\n  // After serious manipulations (e.g. after cutting part off the\n  // leaf) repair the boundary polygon. It assumes the cut line has\n  // already been marked \"boundary\" and the original boundary marks\n  // were not removed. \n  //\n  // So, this function just puts boundary nodes into the boundary\n  // polygon in the right order; it cannot detect boundaries from\n  // scratch.\n\n  Node *boundary_node=0, *next_boundary_node=0, *internal_node;\n  set<int> original_boundary_nodes, repaired_boundary_nodes;\n  vector<int> difference; // set difference result\n\n  // Step 0: print out current boundary polygon\n#ifdef QDEBUG\n  qDebug() << endl << \"Original Boundary Polygon node indices: \";\n  foreach (Node* node, boundary_polygon->nodes) {\n    qDebug() << node->Index() << \" \" ;\n  }    \n  qDebug() << endl << endl;\n#endif\n\n  // Step 1a: Create a set containing the current boundary polygon nodes' Indices.\n  for (Node * node : boundary_polygon->nodes) {\n    original_boundary_nodes.insert(node->Index());\n  }\n\n  // Step 1b: remove all nodes from boundary polygon\n  boundary_polygon->nodes.clear();\n\n  // Step 2: Remove all references to the boundary polygon from the Mesh's current list of nodes\n  for (Node* node : nodes) {\n    node->Unmark(); // remove marks, we need them to determine if we have closed the circle\n    list<Neighbor>::iterator boundary_ref_pos;\n    if ((boundary_ref_pos = find_if (node->owners.begin(), node->owners.end(), \n\t\t\t\t     [](auto neighbor){return neighbor.CellEquals(-1);})) != node->owners.end()) {\n      // i.e. if one of the node's owners is the boundary polygon \n      node->owners.erase(boundary_ref_pos); // remove the reference\n    }\n  }\n\n  // Step 3: Search for the first boundary node.  We reconstruct the\n  // boundary polygon by moving along the boundary nodes until we've\n  // encircled the polygon. Since manually adding nodes may have\n  // turned nodes previously along the boundary into internal nodes,\n  // we search through all the node until we find first boundary node\n  // and proceed from there. If findNextBoundaryNode() returns a node\n  // other than the one passed to it, the original node is the first\n  // boundary node.\n  for (Node* node : nodes) {\n\t\tNode *nextNode = findNextBoundaryNode(node);\n\t\tif (nextNode && (nextNode)->index != node->index) {\n      next_boundary_node = node;\n      break;\n    }\n  }\n\n  // We have a problem if we arrive here without having found a boundary node.\n  if (!next_boundary_node) throw(\"Cannot find a boundary node!.\");\n\n  // Reconstruct the list of boundary polygon nodes.\n  do {\n    boundary_node = next_boundary_node;\n    boundary_node->Mark();\n    boundary_polygon->nodes.push_back(boundary_node);\n    next_boundary_node = findNextBoundaryNode(boundary_node);\n    if (next_boundary_node == NULL) {\n    \tcout << \"boundary null\\n\";\n    \tbreak;\n    }\n  } while ( !next_boundary_node->Marked() );\n\n\n  // Create a set containing the reconstructed boundary polygon nodes' Indices.\n  for (list<Node *>::iterator it = boundary_polygon->nodes.begin(); it!=boundary_polygon->nodes.end(); ++it) {\n    repaired_boundary_nodes.insert((*it)->Index());\n  }\n\n  // Calculate the difference between the original and repaired sets of boundary nodes\n  // yielding the set of nodes that are no longer part of the boundary polygon.\n  set_difference(original_boundary_nodes.begin(), original_boundary_nodes.end(),\n                 repaired_boundary_nodes.begin(), repaired_boundary_nodes.end(), back_inserter(difference));\n\n  // Tell each node in the difference that it's no longer part of the boundary polygon\n  vector<Node *>::iterator internal_node_it;\n  for (int i : difference){\n    internal_node_it = find_if (nodes.begin(), nodes.end(), [i](auto node){return node->IndexEquals(i);});\n    internal_node = *internal_node_it; // dereference the itterator to get to the node pointer\n    if (!internal_node) throw(\"Found a null Node pointer.\");\n    internal_node->UnsetBoundary();\n  }\n\n  boundary_polygon->ConstructConnections();\n  for (list<Wall *>::iterator w=boundary_polygon->walls.begin(); w!=boundary_polygon->walls.end(); w++) {\n    if ((*w)->DeadP()) {\n      (*w)=0;\n    }\n  }\n  boundary_polygon->walls.remove(0);\n  boundary_polygon->ConstructNeighborList();\n\n#ifdef QDEBUG\n  qDebug() << \"Repaired Boundary Polygon node indices: \";\n  foreach (Node* node, boundary_polygon->nodes){\n    qDebug() << node->Index() << \" \" ;\n  }\n  qDebug() << endl ;\n\n#ifdef _undefined_\n  qDebug() << \"NODES:\" << endl;\n  foreach(Node* node, nodes) {\n    qDebug() << *node;\n  }\n  qDebug() << endl;\n\n  qDebug() << \"WALLS:\" << endl;\n  foreach(Wall* wall, walls) {\n    qDebug() << *wall;\n  }\n  qDebug() << endl;\n\n  qDebug() << \"CELLS:\" << endl;\n  foreach(Cell* cell, cells) {\n    qDebug() << *cell;\n  }\n  qDebug() << endl;\n#endif\n#endif\n}\n\n\nNode* Mesh::findNextBoundaryNode(Node* boundary_node) {\n  //bool found_next_boundary_node = false;\n  Node *next_boundary_node = 0;\n  set<int> boundary_node_owners; // This is a list of the current boundary node's owners' Ids\n  vector<int> neighborIds; // A list of the current boundary node's owners' 2nd neighbor Ids\n  vector<set<int> *>  nodeOwners; // A vector of set pointers where each set contains the owner Ids of the nodes in the neighborIds list.\n  vector<int> intersection; // set intersection result\n\n  // The next boundary node is that which has only one owner in common with the current boundary node\n  for (list<Neighbor>::iterator it=boundary_node->owners.begin(); it!=boundary_node->owners.end(); ++it) {\n    if (it->cell->Index() != -1) boundary_node_owners.insert(it->cell->Index()); // Save each of the current boundary node's owners' Ids - except the boundary polygon \n    set<int> *owners = new set<int>; // create a set to hold a 2nd neighbor's owners' Ids\n    nodeOwners.push_back(owners);\n    neighborIds.push_back(it->nb2->Index());\n    for (Neighbor neighbor : it->nb2->owners){\n      if (neighbor.cell->Index() != -1) owners->insert(neighbor.cell->Index()); // Save second neighbors' owners' Ids - except the boundary polygon \n    }\n  }\n  vector<int>::iterator itt = neighborIds.begin();\n  vector<set<int> *>::iterator it = nodeOwners.begin();\n\n#ifdef QDEBUG  \n  qDebug() << \"Boundary node: \" <<  boundary_node->Index() << \" is owned by the following cells: \";\n  foreach (int i, boundary_node_owners){\n    qDebug() << i << \"  \";\n  }\n  qDebug() << endl;\n#endif\n\n  for (; it < nodeOwners.end(); it++, itt++) {\n    intersection.clear();\n    set_intersection(boundary_node_owners.begin(), boundary_node_owners.end(), (*it)->begin(), (*it)->end(), back_inserter(intersection));\n\n#ifdef QDEBUG  \n    qDebug() << \"The intersection of the boundary node(\" << boundary_node->Index() << \") owners and its 2nd neighbor(\" <<  *itt << \") owners is: \";\n    foreach (int i, intersection){\n      qDebug() << i << \"  \";\n    }\n    qDebug() << endl;\n#endif\n\n    if (intersection.size() == 1){\n      //found_next_boundary_node = true;\n      vector<Node *>::iterator next_boundary_node_it = find_if (nodes.begin(), nodes.end(), [itt](auto node){return node->IndexEquals(*itt);});\n      next_boundary_node = *next_boundary_node_it; // defeference the itterator to get to the node pointer\n\n#ifdef QDEBUG  \n      qDebug() << \"The Current boundary node is: \" << boundary_node->Index()\n\t       << \". The Next boundary node is: \" << *itt << ((next_boundary_node->Marked()) ? \" Marked\" : \" Unmarked\") << endl << endl;\n#endif\n\n      break;\n    }\n  }\n\n#ifdef QDEBUG  \n  if (!found_next_boundary_node) {\n    qDebug() << \"OOPS! Didn't find the next boundrary node!\" << endl;\n  }\n#endif\n\n  return next_boundary_node;\n}\n\n\nvoid Mesh::CleanUpWalls(void) {\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    if ((*w)->DeadP()) {\n      delete *w;\n      (*w)=0;      \n    }\n  }\n  walls.remove(0);\n}\n\nvoid Mesh::Rotate(double angle, Vector center) {\n\n  // Rotate the mesh over the angle \"angle\", relative to center point \"center\".\n\n  Matrix rotmat;\n\n  rotmat.Rot2D(angle);\n\n  for (vector<Node *>::iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    (*n)->setPos ( rotmat * ( *(*n) - center ) + center );  \n  }\n}\n\n\nvoid Mesh::PrintWallList( void ) {\n\n  transform ( walls.begin(), walls.end(), ostream_iterator<Wall>(cerr, \"\\n\"), deref_ptr<Wall> );\n}\n\n#include <QString>\n//#include \"forwardeuler.h\"\n#include \"rungekutta.h\"\n\n//class SolveMesh : public ForwardEuler{\nclass SolveMesh : public RungeKutta{\nprivate:\n  SolveMesh(void);\n\npublic:\n  SolveMesh(Mesh *m_) {\n\n    m = m_;\n\n    kmax=0;\n    kount=0;\n    xp=0; yp=0; dxsav=0;\n\n\n  }\n\nprotected:\n  virtual void derivs(double x, double *y, double *dydx) {\n\n    // set mesh with new values given by ODESolver\n    // (we must do this, because only mesh knows the connections\n    // between the variables)\n\n    m->setValues(x,y);\n    m->Derivatives(dydx);\n\n    //cerr << \"Calculated derivatives at \" << x << \"\\n\";    \n  }\n\nprivate:\n  Mesh *m;\n  int kmax,kount;\n  double *xp,**yp,dxsav;\n  bool monitor_window;\n};\n\n\n\nvoid Mesh::ReactDiffuse(double delta_t) {\n\n  // Set Lengths of Walls\n  for_each ( walls.begin(), walls.end(), \n         mem_fn( &Wall::SetLength ) );\n\n  static SolveMesh *solver = new SolveMesh(this);\n\n  int nok, nbad, nvar;\n  double *ystart = getValues(&nvar);\n\n  solver->odeint(ystart, nvar, getTime(), getTime() + delta_t, \n\t\t par.ode_accuracy, par.dt, 1e-10, &nok, &nbad);\n\n  setTime(getTime()+delta_t);\n  setValues(getTime(),ystart);\n}\n\n\nVector Mesh::FirstConcMoment(int chem) {\n\n  Vector moment;\n  for (vector<Cell *>::const_iterator c=cells.begin(); c!=cells.end(); c++) {\n    moment += (*c)->Chemical(chem) * (*c)->Centroid();\n  }\n  return moment / (double)cells.size();\n}\n\n/*! This member function deletes all walls connected to two dead cells from the mesh.\n  It should be called before the Cells are actually removed.\n  If the cell is connect to one dead cell only, that reference is substituted for a reference \n  to the boundary polygon.\n*/\nvoid Mesh::DeleteLooseWalls(void) {\n\n  list<Wall *>::iterator w=walls.begin();\n\n  while (w!=walls.end()) {\n\n    // if both cells of the wall are dead, remove the wall\n    if ((*w)->C1()->DeadP() || (*w)->C2()->DeadP()) {\n      if ((*w)->C1()->DeadP() && (*w)->C2()->DeadP()) {\n\tdelete *w;\n\tw=walls.erase(w);\n      } else {\n\tif ((*w)->C1()->DeadP())\n\t  (*w)->c1 = boundary_polygon;\n\telse\n\t  (*w)->c2 = boundary_polygon;\n\tw++;\n      }\n    } else {\n      w++;\n    }\n\n  }\n}\n\n/*void Mesh::FitLeafToCanvas(double width, double height) {\n\n  Vector bbll,bbur;\n  BoundingBox(bbll,bbur);\n\n  double scale_x = width/(bbur.x-bbll.x);\n  double scale_y = height/(bbur.y-bbll.y);\n\n  double factor = scale_x<scale_y ? scale_x:scale_y;\n\n  Cell::SetMagnification(factor); // smallest of scale_x and scale_y\n\n  double offset_x = (width/Cell::Magnification()-(bbur.x-bbll.x))/2.;  \n  double offset_y = (height/Cell::Magnification()-(bbur.y-bbll.y))/2.;\n\n  Cell::setOffset(offset_x, offset_y);\n\n  }*/\n\n\n\nvoid Mesh::CleanChemicals(const vector<double> &clean_chem) {\n\n  if (clean_chem.size()!=(unsigned)Cell::NChem()) {\n    throw \"Run time error in Mesh::CleanChemicals: size of clean_chem should be equal to Cell::NChem()\";\n  }\n  for (vector<Cell *>::iterator c=cells.begin(); c!=cells.end(); c++) {\n    for (int i=0;i<Cell::NChem();i++) {\n      (*c)->SetChemical(i,clean_chem[i]);\n    }\n    (*c)->SetNewChemToChem();\n  }\n}\n\n\nvoid Mesh::CleanTransporters(const vector<double> &clean_transporters) {\n\n  if (clean_transporters.size()!=(unsigned)Cell::NChem()) {\n    throw \"Run time error in Mesh::CleanTransporters: size ofclean_transporters should be equal to Cell::NChem()\";\n  }\n\n\n  // clean transporters\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    for (int i=0;i<Cell::NChem();i++) {\n      (*w)->setTransporters1(i,clean_transporters[i]); (*w)->setNewTransporters1(i,clean_transporters[i]);\n      (*w)->setTransporters2(i,clean_transporters[i]); (*w)->setNewTransporters2(i,clean_transporters[i]);\n    }\n  }\n}\n\n\nvoid Mesh::RandomizeChemicals(const vector<double> &max_chem, const vector<double> &max_transporters) {\n\n  if (max_chem.size()!=(unsigned)Cell::NChem() || max_transporters.size()!=(unsigned)Cell::NChem()) {\n    throw \"Run time error in Mesh::CleanChemicals: size of max_chem and max_transporters should be equal to Cell::NChem()\";\n  }\n\n  for (vector<Cell *>::iterator c=cells.begin(); c!=cells.end(); c++) {\n    for (int i=0;i<Cell::NChem();i++) {\n      (*c)->SetChemical(i,max_chem[i]*RANDOM());\n     //(*c)->SetChemical(i,RANDOM()*max_chem[i]*0.1+0.9*max_chem[i]);\n        //(*c)->SetChemical(i,RANDOM()*max_chem[i]*(par -> range)+(1 - par -> range)*max_chem[i]); // must be a number between 0 and 0.99\n    }\n    (*c)->SetNewChemToChem();\n  }\n\n  // randomize transporters\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    for (int i=0;i<Cell::NChem();i++) {\n      (*w)->setTransporters1(i,max_transporters[i] * RANDOM()); (*w)->setNewTransporters1(i, (*w)->Transporters1(i) );\n      (*w)->setTransporters2(i,max_transporters[i] * RANDOM()); (*w)->setNewTransporters2(i, (*w)->Transporters1(i) );\n    }\n  }\n}\n\n//!\\brief Calculates a vector with derivatives of all variables, which\n// we can pass to an ODESolver. \nvoid Mesh::Derivatives(double *derivs) {\n\n  int nwalls = walls.size();\n  int ncells = cells.size();\n  int nchems = Cell::NChem();\n\n  // two eqs per chemical for each walls, and one eq per chemical for each cell\n  // This is for generality. For a specific model you may optimize\n  // this by removing superfluous (empty) equations.\n  int neqs = 2 * nwalls * nchems + ncells * nchems;\n\n  //static double *derivs = 0; \n  // derivs is allocated by RungeKutta class.\n\n  for (int i=0;i<neqs;i++) {\n    derivs[i]=0.;\n  }\n\n  // Layout of derivatives: cells [ chem1 ... chem n]  walls [ [ w1(chem 1) ... w1(chem n) ] [ w2(chem 1) ... w2(chem n) ] ]\n\n  int i=0;\n\n  for (vector<Cell *>::iterator c=cells.begin(); c!=cells.end(); c++) {\n    plugin->CellDynamics(*c, &(derivs[i]));\n    i+=nchems;\n  }\n\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    // (*wr)(*w, &(derivs[i]), &(derivs[i+nchems]));\n    plugin->WallDynamics(*w,  &(derivs[i]), &(derivs[i+nchems]));\n    // Transport function adds to derivatives of cell chemicals\n    double *dchem_c1 = &(derivs[(*w)->c1->Index() * nchems]);\n    double *dchem_c2 = &(derivs[(*w)->c2->Index() * nchems]);\n    //plugin->CelltoCellTransport(*w, &(derivs[(*w)->c1->Index() * nchems]),\n    //\t  &(derivs[(*w)->c2->Index() * nchems]));\n    // quick fix: dummy values to prevent end user from writing into outer space and causing a crash :-)\n    // start here if you want to implement chemical input/output into environment over boundaries\n    double dummy1, dummy2;\n    if ((*w)->c1->Index()<0) { // tests if c1 is the boundary pol\n      dchem_c1 = &dummy1;\n    }\n    if ((*w)->c2->Index()<0) {\n      dchem_c2 = &dummy2;\n    }\n    plugin->CelltoCellTransport(*w, dchem_c1, dchem_c2); \n\n    //(*tf)(*w, &(derivs[(*w)->c1->Index() * nchems]),\n    //&(derivs[(*w)->c2->Index() * nchems] ) );\n    i+=2*nchems;\n  }\n}\n\nvoid Mesh::setValues(double x, double *y) {\n\n  //int nwalls = walls.size();\n  //int ncells = cells.size();\n  int nchems = Cell::NChem();\n\n  // two eqs per chemical for each walls, and one eq per chemical for each cell\n  // This is for generality. For a specific model you may optimize\n  // this by removing superfluous (empty) equations.\n  //int neqs = 2 * nwalls * nchems + ncells * nchems;\n\n  // Layout of derivatives: cells [ chem1 ... chem n]  walls [ [ w1(chem 1) ... w1(chem n) ] [ w2(chem 1) ... w2(chem n) ] ]\n\n  int i=0;\n  static int emit_count=0;\n  const int stride = 100;\n  for (vector<Cell *>::iterator c=cells.begin(); c!=cells.end(); c++) {\n    for (int ch=0;ch<nchems;ch++) {\n      (*c)->SetChemical(ch, y[i+ch]);\n    }\n    if ( !(emit_count%stride)) {\n      (*c)->EmitValues(x);\n    }\n    i+=nchems;\n  }\n\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    for (int ch=0;ch<nchems;ch++) {\n      (*w)->setTransporters1(ch,y[i+ch]);\n    }\n    i+=nchems;\n\n    for (int ch=0;ch<nchems;ch++) {\n      (*w)->setTransporters2(ch,y[i+ch]);\n    }\n    i+=nchems;\n  }\n  emit_count++;\n}\n\ndouble *Mesh::getValues(int *neqs) {\n\n  int nwalls = walls.size();\n  int ncells = cells.size();\n  int nchems = Cell::NChem();\n\n  // two eqs per chemical for each wall, and one eq per chemical for each cell\n  // This is for generality. For a specific model you may optimize\n  // this by removing superfluous (empty) equations.\n  (*neqs) = 2 * nwalls * nchems + ncells * nchems;\n\n  // Layout of derivatives: cells [ chem1 ... chem n]  walls [ [ w1(chem 1) ... w1(chem n) ] [ w2(chem 1) ... w2(chem n) ] ]\n\n  static double *values = 0;\n  if (values!=0) { delete[] values; }\n\n  values = new double[*neqs];\n\n  int i=0;\n  for (vector<Cell *>::iterator c=cells.begin(); c!=cells.end(); c++) {\n    for (int ch=0;ch<nchems;ch++) {\n      values[i+ch]=(*c)->Chemical(ch);\n    }\n    i+=nchems;\n  }\n\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n    for (int ch=0;ch<nchems;ch++) {\n      values[i+ch]=(*w)->Transporters1(ch);\n    }\n    i+=nchems;\n\n    for (int ch=0;ch<nchems;ch++) {\n      values[i+ch]=(*w)->Transporters2(ch);\n    }\n    i+=nchems;\n  }\n  for (int j=0;j<i;j++) {\n  \tif (std::isnan(values[j]) ){\n\t  \tvalues[j]=0.;\n  \t}\n  }\n  return values;\n}\n\nvoid Mesh::DrawNodes(QGraphicsScene *c) const {\n\n  for (vector<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    Node *i=*n;\n\n    NodeItem *item = new NodeItem ( &(*i), c );\n    item->setColor();\n\n    item->setZValue(5);\n    item->show();\n    item ->setPos(((Cell::offset[0]+i->x)*Cell::factor),\n          ((Cell::offset[1]+i->y)*Cell::factor) );\n  }\n}\n\n/*! Returns the sum of protein \"ch\" of a cycling protein in cells and walls */\ndouble Mesh::CalcProtCellsWalls(int ch) const {\n\n\n  double sum_prot=0.;\n\n  // At membranes\n  for (list<Wall *>::const_iterator w=walls.begin(); w!=walls.end(); w++) {\n    sum_prot += (*w)->Transporters1(ch);\n    sum_prot += (*w)->Transporters2(ch);\n  }\n\n  // At cells\n  for (vector<Cell *>::const_iterator c=cells.begin(); c!=cells.end(); c++) {\n    sum_prot += (*c)->Chemical(ch);\n  }\n  return sum_prot;\n}\n\nvoid Mesh::SettoInitVals(void) {\n\n  vector<double> clean_chem(Cell::NChem());\n  vector<double> clean_transporters(Cell::NChem());\n\n  for (int i=0;i<Cell::NChem();i++) {\n    clean_transporters[i]=0.;\n    clean_chem[i]=par.initval[i];\n  }\n\n  CleanChemicals(clean_chem);\n  CleanTransporters(clean_transporters);\n}\n\nstring Mesh::getTimeHours(void) const {\n  int hours = (int)(time / 3600);\n  int mins = (int)((time - hours * 3600)/60);\n  int secs = (int)((time - hours * 3600 - mins * 60));\n  ostringstream tstr;\n  tstr << hours << \" h \" << mins << \" m \" << secs << \" s\";\n  return tstr.str();\n}\n\nQVector<qreal> Mesh::VertexAngles(void) {\n  QVector<qreal> angles;\n  for (vector<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    if ((*n)->Value()>2 && !(*n)->BoundaryP() ) {\n      angles+=(*n)->NeighbourAngles();\n    }\n  }\n  return angles;\n}\n\nQVector< QPair<qreal,int> > Mesh::VertexAnglesValues(void) {\n\n  QVector< QPair<qreal,int> > anglesvalues;\n  for (vector<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    if ((*n)->Value()>2 && !(*n)->BoundaryP() ) {\n      QVector<qreal> angles = (*n)->NeighbourAngles();\n      int value_vertex = angles.size();\n      for (QVector<qreal>::ConstIterator i=angles.begin(); i!=angles.end(); i++) {\n\tanglesvalues += QPair< qreal, int > (*i, value_vertex);\n      }\n    }\n  }\n  return anglesvalues;\n}\n\nvoid Mesh::Clean(void) {\n#ifdef QDEBUG\n  qDebug() << \"Freeing nodes\" << endl;\n#endif\n  for (vector<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    delete *i;\n  }\n  nodes.clear();\n  Node::nnodes=0;\n\n#ifdef QDEBUG\n  qDebug() << \"Freeing node sets\" << endl;\n#endif\n  for (vector<NodeSet *>::iterator i=node_sets.begin(); i!=node_sets.end(); i++) {\n    delete *i;\n  }\n  node_sets.clear();\n\n\n#ifdef QDEBUG\n  qDebug() << \"Freeing cells\" << endl;\n#endif\t\n  //CellsStaticDatamembers *old_static_data_mem = Cell::GetStaticDataMemberPointer();\n  for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {\n    delete *i;\n  }\n  //Cell::static_data_members = old_static_data_mem;\n\n  cells.clear();\n  Cell::NCells()=0;\n\n  if (boundary_polygon) {\n    delete boundary_polygon; // (already deleted during cleaning of cells?)\n    boundary_polygon=0;\n  }\n#ifdef QDEBUG\n  qDebug() << \"Freeing walls\" << endl;\n#endif\n  for (list<Wall *>::iterator i=walls.begin(); i!=walls.end(); i++) {\n    delete *i;\n  }\n  walls.clear();\n  Wall::nwalls=0;\n\n  node_insertion_queue.clear();\n  shuffled_nodes.clear();\n  shuffled_cells.clear();\n  time = 0.0;\n}\n\nvoid Mesh::StandardInit(void) {\n\n  boundary_polygon = new BoundaryPolygon();\n  Cell &circle=CircularCell(0,0,10,10);\n\n  circle.SetTargetArea(circle.CalcArea());\n  circle.SetTargetLength(par.target_length);\n  circle.SetLambdaLength(par.lambda_celllength);\n  SetBaseArea();\n  // clean up chemicals \n  for (int c=0; c<Cell::NChem(); c++) {\n    circle.SetChemical(c, 0.);\n  }\n}\n\n#include \"hull.h\"\n\n\ndouble Mesh::Compactness(double *res_compactness, double *res_area, double *res_cell_area, double *res_circumference) {\n  \n  // Calculate compactness using the convex hull of the cells\n  // We use Andrew's Monotone Chain Algorithm (see hull.cpp)\n\n  // Step 1. Prepare data for 2D hull code - get boundary polygon\n  int pc=0;\n  Point *p=new Point[boundary_polygon->nodes.size()+1];\n  for (list<Node *>::const_iterator i = boundary_polygon->nodes.begin(); \n       i!=boundary_polygon->nodes.end(); i++) {\n    p[pc++]=Point((*i)->x,(*i)->y);\n  }\n  \n  // chainHull algorithm requires sorted points\n  sort( p, p+pc );\n\n \n  // Step 2: call 2D Hull code\n  int np=boundary_polygon->nodes.size();\n  Point *hull=new Point[np+1];\n  int nph=chainHull_2D(p,np,hull);\n  \n  \n  // Step 3: calculate area and circumference of convex hull\n  double hull_area=0.;\n  double hull_circumference=0.;\n\n  for (int i=0;i<nph-1;i++) {\n    hull_area+=hull[i].x * hull[i+1].y - hull[i+1].x * hull[i].y;\n    double s_dx=(hull[i+1].x-hull[i].x);\n    double s_dy=(hull[i+1].y-hull[i].y);\n    double l=sqrt(s_dx*s_dx+s_dy*s_dy);\n    //    f << hull[i].x << \" \" << hull[i].y << \" \" << hull[i+1].x << \" \" << hull[i+1].y << \" \" << l << endl;\n    hull_circumference+=l;\n      \n  }\n  hull_area/=2.;\n\n  // Step 4: get area of bounary polygon\n  double boundary_pol_area = boundary_polygon->CalcArea();\n  \n\n  /*  ofstream datastr(\"hull.dat\");\n  for (int i=0;i<nph<i++) {\n    datastr << hull.x << \" \" << hull.y << endl;\n  }\n  ofstream polstr(\"pol.dat\");\n  for (int i=0;i<np;h*/\n  delete[] p;\n  delete[] hull;\n\n\n  // put intermediate results into optional pointers\n  if (res_compactness) {\n    *res_compactness = boundary_pol_area/hull_area;\n  }\n  if (res_area) {\n    *res_area = hull_area;\n  }\n  if (res_cell_area) {\n    *res_cell_area = boundary_pol_area;\n  }\n  if (res_circumference) {\n    *res_circumference = hull_circumference;\n  }\n  \n  // return compactness\n  return boundary_pol_area/hull_area;\n\n}\n\n// DataExport\nvoid Mesh::CSVExportCellData(QTextStream &csv_stream) const {\n\n  csv_stream << \"\\\"Cell Index\\\",\\\"Center of mass (x)\\\",\\\"Center of mass (y)\\\",\\\"Cell area\\\",\\\"Cell length\\\"\";\n  \n  for (int c=0;c<Cell::NChem(); c++) {\n    csv_stream << \",\\\"Chemical \" << c << \"\\\"\";\n  }\n  csv_stream << Qt::endl;\n  for (vector<Cell *>::const_iterator i=cells.begin();\n       i!=cells.end();\n       i++) {\n    Vector centroid = (*i)->Centroid();\n    csv_stream << (*i)->Index() << \", \"\n\t       << centroid.x << \", \"\n\t       << centroid.y << \", \" \n\t       <<  (*i)->Area() << \", \"\n\t       <<(*i)->Length();\n    for (int c=0;c<Cell::NChem(); c++) {\n      csv_stream << \", \" << (*i)->Chemical(c);\n    }\n    csv_stream << Qt::endl;\n  }\n\n  \n}\n\n\n// DataExport\nvoid Mesh::CSVExportWallData(QTextStream &csv_stream) const {\n\n  csv_stream << \"\\\"Wall Index\\\",\\\"Cell A\\\",\\\"Cell B\\\",\\\"Length\\\"\";\n  \n  for (int c=0;c<Cell::NChem(); c++) {\n    csv_stream << \",\\\"Transporter A:\" << c << \"\\\"\";\n  }\n  for (int c=0;c<Cell::NChem(); c++) {\n    csv_stream << \",\\\"Transporter B:\" << c << \"\\\"\";\n  }\n  csv_stream << Qt::endl;\n  for (list<Wall *>::const_iterator i=walls.begin();\n       i!=walls.end();\n       i++) {\n    csv_stream << (*i)->Index() << \",\"\n\t       << (*i)->C1()->Index() << \",\"\n\t       << (*i)->C2()->Index() << \",\"\n\t       << (*i)->Length();\n\t      \n    for (int c=0;c<Cell::NChem(); c++) {\n      csv_stream << \",\" << (*i)->Transporters1(c);\n    }\n    for (int c=0;c<Cell::NChem(); c++) {\n      csv_stream << \",\" << (*i)->Transporters2(c);\n    }\n\n    csv_stream << Qt::endl;\n  }\n\n  \n}\n\n\nvoid Mesh::CSVExportMeshData(QTextStream &csv_stream) { \n  \n  csv_stream << \"\\\"Morph area\\\",\\\"Number of cells\\\",\\\"Number of nodes\\\",\\\"Compactness\\\",\\\"Hull area\\\",\\\"Morph circumference\\\",\\\"Hull circumference\\\"\" << Qt::endl;\n  \n  double res_compactness, res_area, res_cell_area, hull_circumference;\n  Compactness(&res_compactness, &res_area, &res_cell_area, &hull_circumference);\n  double morph_circumference = boundary_polygon->ExactCircumference();\n  csv_stream << Area() << \", \" << NCells() << \", \" << NNodes() << \", \" << res_compactness << \", \" << res_area << \", \" << morph_circumference << \", \" << hull_circumference << Qt::endl;\n  \n}\n/* finis */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/mesh.cpp b/src/GUI/mesh.cpp
--- a/src/GUI/mesh.cpp	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/GUI/mesh.cpp	(date 1747136022979)
@@ -53,81 +53,96 @@
 
 extern Parameter par;
 
+/*Inserts a node into a cell at a specific position and updates ownership relationships.
+c  - Pointer to the cell where the node will be inserted
+n  - Pointer to the node to insert
+nb1  - Pointer to the first neighbor node
+nb2  - Pointer to the second neighbor node
+ins_pos - Iterator indicating the insertion position in the cell's node list
+This method provides precise control over the node's position in the cell's topology.*/
 void Mesh::AddNodeToCellAtIndex(Cell *c, Node *n, Node *nb1, Node *nb2, list<Node *>::iterator ins_pos) {
-  c->nodes.insert(ins_pos, n);        
+  c->nodes.insert(ins_pos, n);
   n->owners.push_back( Neighbor(c, nb1, nb2 ) );
 }
 
-
+/* Same but insert the node at the end*/
 void Mesh::AddNodeToCell(Cell *c, Node *n, Node *nb1, Node *nb2) {
-
   c->nodes.push_back( n );
   n->owners.push_back( Neighbor(c, nb1, nb2 ) );
 }
 
+/*Adds random perturbation to the specified chemical concentration in all cells.
+chemnum - Index of the chemical to perturb
+range   - Magnitude of the perturbation
+This method iterates through all cells in the mesh and adds a random value
+to the concentration of the specified chemical. The random value is centered
+around zero (by using RANDOM()-0.5) and scaled by the range parameter.
+If the resulting concentration would be negative, it is set to zero instead.*/
 void Mesh::PerturbChem(int chemnum, double range) {
-
   for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {
     (*i)->chem[chemnum] += range*(RANDOM()-0.5);
     if ((*i)->chem[chemnum]<0.) (*i)->chem[chemnum]=0.;
   }
 }
 
+
+
+ /* Creates a structured grid of cells by dividing a rectangular cell multiple times.
+ ll - Vector representing the lower left corner of the initial rectangle
+ ur - Vector representing the upper right corner of the initial rectangle
+ This method creates an initial rectangular cell and initializes its chemical concentrations
+ based on parameters. It then repeatedly divides all cells in a structured manner by
+ alternating between horizontal and vertical division axes. The method performs 7 rounds
+ of division in total - 6 rounds with axis rotation followed by a final round.
+ After cell division, it calculates the average side length of the cells and sets the
+ target length for nodes to a fraction of this average (creating tension in the structure).
+ Finally, it establishes the base area for the mesh using the current cell configuration.*/
 void Mesh::CellFiles(const Vector ll, const Vector ur) {
-
-  Cell *cell = RectangularCell(ll,ur,0.001); 
-
+  Cell *cell = RectangularCell(ll,ur,0.001);
   for (int c=0;c<Cell::NChem();c++) {
     cell->SetChemical(c,par.initval[c]);
   }
 
   cell->SetTargetArea(cell->CalcArea());
-
   Vector axis(1,0,0);
 
   // divide rectangle a number of times
   for (int i=0;i<6;i++) {
     IncreaseCellCapacityIfNecessary();
-
     vector <Cell *> current_cells = cells;
     for (vector<Cell *>::iterator j=current_cells.begin(); j!=current_cells.end();j++) {
       (*j)->DivideOverAxis(axis);
     }
     axis=axis.Perp2D();
-
   }
 
   IncreaseCellCapacityIfNecessary();
-
   axis=axis.Perp2D();
-
   vector <Cell *> current_cells = cells;
   for (vector<Cell *>::iterator j=current_cells.begin(); j!=current_cells.end();j++) {
     (*j)->DivideOverAxis(axis);
   }
 
-
   double sum_l=0; int n_l=0;
   for (list<Node *>::const_iterator i=cell->nodes.begin(); i!=cell->nodes.end(); i++) {
-    list<Node *>::const_iterator nb=i; nb++; 
-    if (nb==cell->nodes.end()) 
+    list<Node *>::const_iterator nb=i; nb++;
+    if (nb==cell->nodes.end())
       nb=cell->nodes.begin();
 
     double l = (**nb-**i).Norm();
-
     sum_l += l;
     n_l++;
 
   }
 
-
   Node::target_length = sum_l/(double)n_l;
   // a bit more tension
   Node::target_length/=4.;
-
   SetBaseArea();
 }
 
+
+
 Cell *Mesh::RectangularCell(const Vector ll, const Vector ur, double rotation) {
 
   Cell *cell=AddCell(new Cell());
@@ -148,33 +163,33 @@
 
   //n1.fixed=n2.fixed=n3.fixed=n4.fixed=true;
 
-  AddNodeToCell(cell, n4, 
+  AddNodeToCell(cell, n4,
 		n1,
 		n3);
 
-  AddNodeToCell(cell, n3, 
+  AddNodeToCell(cell, n3,
 		n4,
 		n2);
 
-  AddNodeToCell(cell, n2, 
+  AddNodeToCell(cell, n2,
 		n3,
 		n1);
 
-  AddNodeToCell(cell, n1, 
+  AddNodeToCell(cell, n1,
 		n2,
 		n4);
 
 
-  AddNodeToCell(boundary_polygon, n4, 
+  AddNodeToCell(boundary_polygon, n4,
 		n1,
 		n3);
-  AddNodeToCell(boundary_polygon, n3, 
+  AddNodeToCell(boundary_polygon, n3,
 		n4,
 		n2);
-  AddNodeToCell(boundary_polygon, n2, 
+  AddNodeToCell(boundary_polygon, n2,
 		n3,
 		n1);
-  AddNodeToCell(boundary_polygon, n1, 
+  AddNodeToCell(boundary_polygon, n1,
 		n2,
 		n4);
 
@@ -190,7 +205,7 @@
   // a bit more tension
   Node::target_length/=2;
 
-  cell->SetIntegrals(); 
+  cell->SetIntegrals();
   cell->ConstructNeighborList();
 
   return cell;
@@ -216,7 +231,7 @@
     Node *n=AddNode(new Node(x,y,0));
     n->boundary = true;
 
-  } 
+  }
 
   for (int i=0;i<nnodes;i++) {
 
@@ -240,7 +255,7 @@
   // a bit more tension
   Node::target_length/=2;
 
-  c->SetIntegrals(); 
+  c->SetIntegrals();
   c->at_boundary=true;
 
   return *c;
@@ -287,7 +302,7 @@
   // a bit more tension
   Node::target_length/=2;
 
-  circle->SetIntegrals(); 
+  circle->SetIntegrals();
 
   //return c;
 
@@ -297,7 +312,7 @@
   // get position of the (n/4)'th and (3*(n/4))'th node.
 
   list<Node *>::reverse_iterator it_n1=circle->nodes.rbegin();
-  for (int i=0; i<nnodes/2; i++) 
+  for (int i=0; i<nnodes/2; i++)
     it_n1++;
   it_n1--;
 
@@ -314,9 +329,9 @@
   n3->boundary=true;
   n4->boundary=true;
 
-  AddNodeToCell(petiole, *it_n1, 
+  AddNodeToCell(petiole, *it_n1,
 		n4,
-		nodes[(*it_n2)->Index() 
+		nodes[(*it_n2)->Index()
 		      + (( (*it_n1)->Index() - (*it_n2)->Index() )-1+nnodes)%nnodes]);
 
 
@@ -336,7 +351,7 @@
   AddNodeToCell(petiole, n4, n3, n1);
 
 
-#ifdef QDEBUG  
+#ifdef QDEBUG
   qDebug() << circle << endl;
   qDebug() << petiole << endl;
 #endif
@@ -368,7 +383,7 @@
   petiole->Fix();
 
   petiole->area=petiole->CalcArea();
-  petiole->target_area=petiole->area;  
+  petiole->target_area=petiole->area;
   petiole->ConstructNeighborList();
   circle->ConstructNeighborList();
   boundary_polygon->ConstructConnections();
@@ -395,9 +410,9 @@
       LowerLeft.y = (*c)->y;
     if ((*c)->z < LowerLeft.z)
       LowerLeft.z = (*c)->z;
-    if ((*c)->x > UpperRight.x) 
+    if ((*c)->x > UpperRight.x)
       UpperRight.x = (*c)->x;
-    if ((*c)->y > UpperRight.y) 
+    if ((*c)->y > UpperRight.y)
       UpperRight.y = (*c)->y;
     if ((*c)->z > UpperRight.z)
       UpperRight.z = (*c)->z;
@@ -417,7 +432,7 @@
 
 void Mesh::SetBaseArea(void) {
 
-  // Set base area to mean area. 
+  // Set base area to mean area.
   // This method is typically called during initiation, after
   // defining the first cell
   Cell::BaseArea() = Area()/cells.size();
@@ -441,8 +456,9 @@
   }
 };
 
+
+
 void Mesh::Clear(void) {
-
   // clear nodes
   for (vector<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {
     delete *i;
@@ -450,8 +466,8 @@
 
   nodes.clear();
   Node::nnodes=0;
-
   node_insertion_queue.clear();
+
   // Clear NodeSets
   for (vector<NodeSet *>::iterator i=node_sets.begin(); i!=node_sets.end(); i++) {
     delete *i;
@@ -461,7 +477,6 @@
   time = 0;
 
   // clear cells
-
   for (vector<Cell *>::iterator i=cells.begin(); i!=cells.end(); i++) {
     delete *i;
   }
@@ -485,7 +500,7 @@
 
   shuffled_cells.clear();
   shuffled_nodes.clear();
- 
+
 #ifdef QDEBUG
   qDebug() << "cells.size() = " << cells.size() << endl;
   qDebug() << "walls.size() = " << walls.size() << endl;
@@ -493,6 +508,23 @@
 #endif
 }
 
+
+
+/* Calculates cell-specific wall stiffness for one side of a node connection.
+Parameters:
+nb - Pointer to a neighbor node
+nodeown - Set of indices of cells that own the current node
+
+This function determines the stiffness contribution from cells that are common
+to both the current node and its neighbor. It first creates a set of cell indices
+that own the neighbor node, then finds the intersection between this set and the
+nodeown set. For each cell in the intersection, it adds its wall stiffness value
+to the total (either from the cell's specific stiffness value or from the global
+parameter if the cell index is invalid).
+The function breaks early if an invalid (NaN) stiffness value is encountered.
+
+Returns:
+The calculated total stiffness value for the shared cells.*/
 double Mesh::CellSpecificStiffnessOneSide(Node *nb,set<int> &nodeown) {
     // determines the list of cells belonging to the node and its neighbors
     set<int> nb1own;
@@ -514,6 +546,9 @@
     }
     return cell_w;
 }
+
+
+
 void Mesh::updateAreasOfCells(list<DeltaIntgrl> * delta_intgrl_list,Node * node) {
 
 	// update areas of cells
@@ -533,6 +568,20 @@
 	}
 }
 
+/* Finds a cell that is common to the specified nodes, different from the given cell.
+
+Parameters:
+c - Pointer to a cell to exclude from the search
+node1 - Pointer to the first node
+node2 - Pointer to the second node
+
+This function iterates through the owners of both nodes to find a cell
+that is connected to both node1 and node2, but is not the cell c.
+It first iterates through node1's owners, then for each owner that is
+not c, it checks if it's also an owner of node2.
+
+Returns:
+A pointer to the common cell found, or NULL if no common cell is found. */
 CellBase * Mesh::getOtherCell(CellBase* c,Node* node1,Node * node2) {
     for (list<Neighbor>::iterator nb1=node1->owners.begin(); nb1!=node1->owners.end(); nb1++) {
     	if (nb1->getCell() != c) {
@@ -559,9 +608,9 @@
 	return b;
 }
 
-//http://dx.doi.org/10.1016/j.cis.2014.01.018
-// radius of circle with center on line B-C and connecting at norm of the lines (A-B ode A-C)
-// and sharing one point with the other line. This we define the kissing circle
+/*http://dx.doi.org/10.1016/j.cis.2014.01.018
+radius of circle with center on line B-C and connecting at norm of the lines (A-B ode A-C)
+and sharing one point with the other line. This we define the kissing circle*/
 double osculating_circle_radius(const Vector& B, const Vector& A, const Vector& C) {
 	Vector AC = (C-A).Normalised();
 	Vector AB = (B-A).Normalised();
@@ -583,6 +632,27 @@
 
 }
 
+
+/* Searches for a sequence of four consecutive nodes in a cell where two specific nodes
+are in the middle positions.
+
+Parameters:
+c - Pointer to the cell to search in
+z1, z2 - Pointers to the two specific nodes to find in middle positions
+w0, w1, w2, w3 - Pointers to node pointers that will be updated with the found sequence
+
+This function looks for a sequence of four consecutive nodes in the cell's node list
+where w1 and w2 are equal to z1 and z2 (in any order). It uses a sliding window approach,
+first checking the regular sequence of nodes, then checking wrap-around cases by considering
+nodes from the beginning of the list. This accounts for the circular nature of cell boundaries.
+
+If a matching sequence is found, the function updates w0, w1, w2, and w3 to point to the
+four consecutive nodes and returns true. If no match is found, it sets all pointers to NULL
+and returns false.
+
+Returns:
+true if a sequence containing z1 and z2 in middle positions was found
+false otherwise */
 bool Mesh::findOtherSide(CellBase * c,Node * z1,Node * z2,Node ** w0,Node ** w1,Node ** w2,Node ** w3) {
 	list <Node *>::iterator i=c->nodes.begin();
 	* w0=*i;
@@ -625,8 +695,25 @@
 	*w3=NULL;
 	return false;
 }
-double lambda_for_shift=0.1;
+
 
+double lambda_for_shift=0.1; // Définie en global mais n'est utilisée nulle part, Rouges 2025
+
+/* Retrieves the base length of a wall element between two nodes in a cell.
+
+Parameters:
+c - Pointer to the cell containing the wall element
+n1 - Pointer to the first node
+n2 - Pointer to the second node
+elastic_limit - Factor used to calculate a default length when needed
+
+This function first tries to get the wall element associated with node n1 in cell c.
+If no wall element exists or if its base length is invalid (NaN), it calculates
+a default length by dividing the distance between the two nodes by the elastic_limit.
+Otherwise, it returns the actual base length stored in the wall element.
+
+Returns:
+The base length of the wall element, or a calculated default value if unavailable */
 double getBaseLength(CellBase* c,NodeBase* n1, NodeBase * n2,double elastic_limit) {
 	WallElement* wallElement = n1->getWallElement(c);
 	if (wallElement == NULL) {
@@ -640,6 +727,20 @@
 	}
 }
 
+
+/* Retrieves the stiffness of a wall element associated with a node in a cell.
+
+Parameters:
+c - Pointer to the cell containing the wall element
+n1 - Pointer to the node whose wall element stiffness is needed
+
+This function first tries to get the wall element associated with node n1 in cell c.
+If no wall element exists or if its stiffness value is invalid (NaN), it returns
+the default wall stiffness from the cell. Otherwise, it returns the actual stiffness
+value stored in the wall element.
+
+Returns:
+The stiffness of the wall element, or the cell's default wall stiffness if unavailable */
 double getStiffness(CellBase* c,NodeBase* n1) {
 	WallElement* wallElement = n1->getWallElement(c);
 	if (wallElement == NULL) {
@@ -653,12 +754,41 @@
 	}
 }
 
+
+/* RemodelWallElement - Evaluates and potentially executes wall remodeling between connected cells
+
+Parameters:
+- curves: Vector of CellWallCurve objects to store modified wall information
+- c: Pointer to the current cell being processed
+- w0, w1, w2, w3, w4: Five consecutive nodes in the current cell
+
+This function evaluates whether inserting a new connection between nodes w1 and w3
+(replacing the w1-w2 connection) would be energetically favorable. The process:
+
+1. First identifies the neighboring cell (c2) that shares nodes w1 and w2
+2. If a valid neighbor cell is found, locates the corresponding sequence of nodes
+   in that cell using findOtherSide (nodes o0-o1-o2-o3)
+3. Calculates the energy of the current configuration using osculating circle radius
+4. Calculates the predicted energy if the remodeling were performed
+5. If the new configuration has lower energy, performs the remodeling by:
+   - Updating node connections in both cells
+   - Updating the geometric properties of affected walls
+   - Recalculating cell areas and neighbor relationships
+
+The function implements a key biological process where cell walls dynamically
+reorganize to minimize mechanical stress and optimize tissue geometry.
+
+Returns: void (modifies the mesh structure directly)
+
+Implemented by Großeholz and al.
+*/
 void Mesh::RemodelWallElement(vector<CellWallCurve> & curves,CellBase* c,Node* w0,Node* w1,Node* w2,Node* w3,Node* w4) {
 
 	Node * o0;
 	Node * o1;
 	Node * o2;
 	Node * o3;
+
 	double angle = (*w1-*w2).SignedAngle((*w3-*w2));
 	if ((angle>0&&c->BoundaryPolP())||(angle<0&&!c->BoundaryPolP())) {
 		//we would bend inward and intersect cells
@@ -666,15 +796,14 @@
 	}
 
 	CellBase* c2 = getOtherCell(c,w1,w2);
-    if (c2 != NULL && !(c2->GetCellVeto()) && findOtherSide(c2,w2,w1,&o0,&o1,&o2,&o3)){
-
+    if (c2 != NULL && !(c2->GetCellVeto()) && findOtherSide(c2,w2,w1,&o0,&o1,&o2,&o3)){ //
 
 //now check how profitable the move of wall element w1-w2 to w1-w3
 //this changes also cell c2 where wall element o1->o2 will be replaced
 //by wall elements o1->w3 and w3->o2 all other surrounding cells will remain
 //unchanged.
 		double bending_dh = 0.;
-		if (abs(par.bend_lambda) > 0.01)	  {
+		if (abs(par.bend_lambda) > 0.01)	  { // c'est quoi le critère qui définit la valeur de bend_lambda? , Rouges 2025
 	// angles that are before w0-w1-w2/w1-w2-w3/w2-w3-w4 and o0-o1-o2/o1-o2-o3
 	// angles after move w0-w1-w3/w1-w3-w4 and o0-o1-w3/o1-w3-o2/w3-o2-o3
 			double r1 = osculating_circle_radius(*w0,*w1,*w2);
@@ -682,24 +811,29 @@
 			double r3 = osculating_circle_radius(*w2,*w3,*w4);
 			double r4 = osculating_circle_radius(*w0,*w1,*w3);
 			double r5 = osculating_circle_radius(*w1,*w3,*w4);
+
 			double energy_before =
 					1./(r1)+
 					1./(r2)+
 					1./(r3)+
 					1./((osculating_circle_radius(*o0,*o1,*o2)))+
 					1./((osculating_circle_radius(*o1,*o2,*o3)));
+
 			double energy_after =
 					1./(r4)+
 					1./((osculating_circle_radius(*o1,*w3,*o2)))+
 					1./(r5)+
 					1./((osculating_circle_radius(*o0,*o1,*w3)))+
 					1./((osculating_circle_radius(*w3,*o2,*o3)));
-			bending_dh = par.bend_lambda*(energy_after-energy_before*1.5+12.);
+
+			bending_dh = par.bend_lambda*(energy_after-energy_before*1.5+12.); // comment sont définis ces coefficients (*1.5 et +12)?, Rouges 2025
 		}
+
 		// the length contraint just needs to be calculated for the wall elements that change length
 		double wl1=((*w1)-(*w2)).Norm();
 		double wl2=((*w3)-(*w2)).Norm();
 		double wl3=((*w1)-(*w3)).Norm();
+
 		double s_bef = wl1;
 		double s_aft = wl3+wl2;
 
@@ -708,7 +842,7 @@
 
 		double length_before = wl1+wl2+wl1;
 
-		double stiffness = (
+		double stiffness = ( // Pourquoi j'ai pas getStiffness(c2,01)*wl2 ?, Rouges 2025
 				getStiffness(c, w1)*wl1+
 				getStiffness(c, w2)*wl2+
 				getStiffness(c2, o2)*wl1
@@ -750,6 +884,21 @@
 	}
 }
 
+
+/* Extracts base length and stiffness data from a wall element and adds them to provided variables.
+Parameters:
+we: Pointer to the wall element from which to extract data
+base_length: Reference to variable where the base length will be accumulated
+stiffness: Reference to variable where the stiffness will be accumulated
+If the wall element is valid (not NULL):
+Accumulates its base length to the base_length parameter
+For stiffness, checks if the wall element has a valid stiffness value:
+If valid: adds the actual stiffness value
+If invalid (NaN): adds the default stiffness from the wall element's cell
+If the wall element is NULL:
+Sets both base_length and stiffness to NaN to indicate invalid data
+This function is typically used in calculations involving wall properties where
+data needs to be aggregated across multiple wall elements while handling edge cases. */
 void extractData(WallElement *we,double & base_length,double &stiffness) {
 	if (we != NULL) {
 		base_length += we->getBaseLength();
@@ -764,6 +913,8 @@
 	}
 }
 
+
+
 void Mesh::RemodelCellWallElements(vector<CellWallCurve> & curves,CellBase *c) {
 	//The algorithm needs at least 5 nodes along the wall
 	if (c->nodes.size()<5) {
@@ -809,6 +960,11 @@
 	RemodelWallElement(curves,c,w0,w1,w2,w3,w4) ;
 }
 
+
+/*This function iterates over all cells in the mesh and resets their wall curves.
+For each cell that is not vetoed (i.e., not excluded from processing), it calls RemodelCellWallElements to attempt remodeling of its wall elements.
+After processing all regular cells, it also applies the remodeling to the boundary polygon to ensure the mesh boundary is updated.
+The function always returns 0.0, indicating its main purpose is to perform side effects on the mesh structure.*/
 double Mesh::RemodelWallElements(vector<CellWallCurve> & curves) {
 	for (vector<Cell *>::iterator ii=cells.begin(); ii!=cells.end(); ii++) {
 		Cell *c = *ii;
@@ -821,6 +977,8 @@
 	return 0.0;
 }
 
+
+
 double Mesh::DisplaceNodes(void) {
 
   MyUrand r(shuffled_nodes.size());
Index: data/leaves/cambium_updated.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version='1.0' encoding='utf-8'?>\n<leaf date=\"Fri May 17 00:28:16 2024\" name=\"/home/ritchie/Desktop/blob_escape.xml\" simtime=\"4720\">\n   <parameter>\n      <par val=\"white\" name=\"arrowcolor\" />\n      <par val=\"10\" name=\"arrowsize\" />\n      <par val=\"black\" name=\"textcolor\" />\n      <par val=\"3\" name=\"cellnumsize\" />\n      <par val=\"1\" name=\"nodenumsize\" />\n      <par val=\"1\" name=\"node_mag\" />\n      <par val=\"1\" name=\"outlinewidth\" />\n      <par val=\"forestgreen\" name=\"cell_outline_color\" />\n      <par val=\"10\" name=\"resize_stride\" />\n      <par val=\"0\" name=\"export_interval\" />\n      <par val=\"cell.\" name=\"export_fn_prefix\" />\n      <par val=\"100\" name=\"storage_stride\" />\n      <par val=\"500\" name=\"xml_storage_stride\" />\n      <par val=\"lateral_root\" name=\"datadir\" />\n      <par val=\"1\" name=\"T\" />\n      <par val=\"100\" name=\"lambda_length\" />\n      <par val=\"4\" name=\"yielding_threshold\" />\n      <par val=\"0\" name=\"lambda_celllength\" />\n      <par val=\"60\" name=\"target_length\" />\n      <par val=\"20\" name=\"cell_expansion_rate\" />\n      <par val=\"10\" name=\"cell_div_expansion_rate\" />\n      <par val=\"true\" name=\"auxin_dependent_growth\" />\n      <par val=\"0.0001\" name=\"ode_accuracy\" />\n      <par val=\"0.4\" name=\"mc_stepsize\" />\n      <par val=\"0.2\" name=\"mc_cell_stepsize\" />\n      <par val=\"1000\" name=\"energy_threshold\" />\n      <par val=\"0\" name=\"bend_lambda\" />\n      <par val=\"0\" name=\"alignment_lambda\" />\n      <par val=\"2\" name=\"rel_cell_div_threshold\" />\n      <par val=\"2\" name=\"rel_perimeter_stiffness\" />\n      <par val=\"0.05\" name=\"collapse_node_threshold\" />\n      <par val=\"0.2\" name=\"morphogen_div_threshold\" />\n      <par val=\"0.01\" name=\"morphogen_expansion_threshold\" />\n      <par val=\"true\" name=\"copy_wall\" />\n      <par val=\"0\" name=\"source\" />\n      <par name=\"D\">\n         <valarray>\n            <val v=\"1e-06\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n         </valarray>\n      </par>\n      <par name=\"initval\">\n         <valarray>\n            <val v=\"0\" />\n            <val v=\"1\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n         </valarray>\n      </par>\n      <par val=\"1\" name=\"k1\" />\n      <par val=\"0.3\" name=\"k2\" />\n      <par val=\"1\" name=\"r\" />\n      <par val=\"1\" name=\"kr\" />\n      <par val=\"1\" name=\"km\" />\n      <par val=\"1\" name=\"Pi_tot\" />\n      <par val=\"0.36\" name=\"transport\" />\n      <par val=\"1\" name=\"ka\" />\n      <par val=\"0\" name=\"pin_prod\" />\n      <par val=\"0\" name=\"pin_prod_in_epidermis\" />\n      <par val=\"0\" name=\"pin_breakdown\" />\n      <par val=\"0.001\" name=\"pin_breakdown_internal\" />\n      <par val=\"0.001\" name=\"aux1prod\" />\n      <par val=\"0\" name=\"aux1prodmeso\" />\n      <par val=\"0.001\" name=\"aux1decay\" />\n      <par val=\"0.1\" name=\"aux1decaymeso\" />\n      <par val=\"0.036\" name=\"aux1transport\" />\n      <par val=\"0\" name=\"aux_cons\" />\n      <par val=\"0.0001\" name=\"aux_breakdown\" />\n      <par val=\"1\" name=\"kaux1\" />\n      <par val=\"1\" name=\"kap\" />\n      <par val=\"0.0001\" name=\"leaf_tip_source\" />\n      <par val=\"0.0001\" name=\"sam_efflux\" />\n      <par val=\"10\" name=\"sam_auxin\" />\n      <par val=\"0\" name=\"sam_auxin_breakdown\" />\n      <par val=\"0.002\" name=\"van3prod\" />\n      <par val=\"0.1\" name=\"van3autokat\" />\n      <par val=\"10\" name=\"van3sat\" />\n      <par val=\"0.3\" name=\"k2van3\" />\n      <par val=\"0.1\" name=\"dt\" />\n      <par val=\"10\" name=\"rd_dt\" />\n      <par val=\"0.174533\" name=\"potential_slide_angle\" />\n      <par val=\"50\" name=\"elastic_modulus\" />\n      <par val=\"true\" name=\"movie\" />\n      <par val=\"100000\" name=\"nit\" />\n      <par val=\"65535\" name=\"compatibility_level\" />\n      <par val=\"1e+06\" name=\"maxt\" />\n      <par val=\"-1\" name=\"rseed\" />\n      <par val=\"16\" name=\"constituous_expansion_limit\" />\n      <par val=\"1\" name=\"vessel_inh_level\" />\n      <par val=\"0.25\" name=\"vessel_expansion_rate\" />\n      <par val=\"0\" name=\"d\" />\n      <par val=\"0\" name=\"e\" />\n      <par val=\"0\" name=\"f\" />\n      <par val=\"0\" name=\"c\" />\n      <par val=\"0\" name=\"mu\" />\n      <par val=\"0\" name=\"nu\" />\n      <par val=\"0\" name=\"rho0\" />\n      <par val=\"0\" name=\"rho1\" />\n      <par val=\"0\" name=\"c0\" />\n      <par val=\"0\" name=\"gamma\" />\n      <par val=\"0\" name=\"eps\" />\n      <par val=\"0\" name=\"betaN\" />\n      <par val=\"0\" name=\"gammaN\" />\n      <par val=\"0\" name=\"betaD\" />\n      <par val=\"0\" name=\"gammaD\" />\n      <par val=\"0\" name=\"betaR\" />\n      <par val=\"0\" name=\"gammaR\" />\n      <par val=\"0\" name=\"tau\" />\n      <par val=\"0\" name=\"kt\" />\n      <par val=\"0\" name=\"kc\" />\n      <par val=\"0\" name=\"krs\" />\n      <par name=\"k\">\n         <valarray>\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n            <val v=\"0\" />\n         </valarray>\n      </par>\n      <par val=\"0\" name=\"i1\" />\n      <par val=\"0\" name=\"i2\" />\n      <par val=\"false\" name=\"b4\" />\n      <par val=\".\" name=\"dir1\" />\n      <par val=\".\" name=\"dir2\" />\n   </parameter>\n   <nodes n=\"387\">\n      <node nr=\"0\" x=\"218.3835\" y=\"168.569\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"1\" x=\"222.76399999999998\" y=\"171.00149999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"2\" x=\"226.83149999999998\" y=\"173.92799999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"3\" x=\"230.3405\" y=\"176.42499999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"4\" x=\"234.49949999999998\" y=\"174.66349999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"5\" x=\"237.24399999999997\" y=\"170.911\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"6\" x=\"238.59749999999994\" y=\"165.949\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"7\" x=\"240.52449999999993\" y=\"160.75500000000002\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"8\" x=\"242.53499999999997\" y=\"155.59350000000003\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"9\" x=\"244.20349999999996\" y=\"150.31350000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"10\" x=\"240.43149999999994\" y=\"146.86850000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"11\" x=\"236.05549999999994\" y=\"144.23150000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"12\" x=\"231.25049999999993\" y=\"142.49600000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"13\" x=\"226.19349999999994\" y=\"141.77400000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"14\" x=\"221.10449999999994\" y=\"142.18500000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"15\" x=\"216.58449999999996\" y=\"143.79400000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"16\" x=\"213.52399999999997\" y=\"147.47850000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"17\" x=\"212.86549999999997\" y=\"153.51850000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"18\" x=\"212.64649999999997\" y=\"159.59050000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"19\" x=\"212.6735\" y=\"165.66750000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"20\" x=\"207.12\" y=\"168.4735\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"21\" x=\"203.34999999999997\" y=\"170.932\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"22\" x=\"199.74099999999996\" y=\"173.61999999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"23\" x=\"195.83649999999994\" y=\"175.86849999999993\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"24\" x=\"191.58749999999992\" y=\"174.24749999999992\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"25\" x=\"187.57699999999988\" y=\"172.0999999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"26\" x=\"186.2499999999999\" y=\"167.2414999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"27\" x=\"184.70599999999985\" y=\"162.4454999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"28\" x=\"183.29199999999986\" y=\"157.61099999999988\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"29\" x=\"182.36299999999986\" y=\"152.66349999999986\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"30\" x=\"182.60849999999982\" y=\"148.43749999999986\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"31\" x=\"185.90949999999984\" y=\"145.50699999999986\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"32\" x=\"189.72999999999985\" y=\"143.30299999999988\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"33\" x=\"193.92449999999982\" y=\"141.92849999999984\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"34\" x=\"198.29949999999985\" y=\"141.34799999999984\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"35\" x=\"202.70999999999984\" y=\"141.54199999999983\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"36\" x=\"207.16499999999985\" y=\"142.60749999999985\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"37\" x=\"200.8535\" y=\"198.7075\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"38\" x=\"205.123\" y=\"197.98350000000002\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"39\" x=\"209.4355\" y=\"197.60150000000002\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"40\" x=\"213.76549999999997\" y=\"197.616\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"41\" x=\"218.069\" y=\"198.0815\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"42\" x=\"222.29\" y=\"199.0445\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"43\" x=\"224.53449999999998\" y=\"195.2905\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"44\" x=\"225.948\" y=\"190.95200000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"45\" x=\"227.35500000000002\" y=\"186.42650000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"46\" x=\"228.57900000000004\" y=\"181.8495000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"47\" x=\"198.15100000000004\" y=\"180.85650000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"48\" x=\"199.35600000000002\" y=\"186.90350000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"49\" x=\"200.346\" y=\"192.98800000000003\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"50\" x=\"245.4135\" y=\"274.2465\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"51\" x=\"248.21649999999997\" y=\"277.5835000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"52\" x=\"251.09099999999998\" y=\"280.8585\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"53\" x=\"254.187\" y=\"283.9235\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"54\" x=\"258.2435000000001\" y=\"285.80400000000003\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"55\" x=\"262.4240000000001\" y=\"284.1555000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"56\" x=\"266.45950000000016\" y=\"282.17450000000014\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"57\" x=\"270.28800000000007\" y=\"279.82000000000016\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"58\" x=\"273.82800000000003\" y=\"277.0520000000002\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"59\" x=\"274.9195\" y=\"272.70850000000024\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"60\" x=\"274.93949999999995\" y=\"268.1360000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"61\" x=\"274.5279999999999\" y=\"263.5835000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"62\" x=\"273.46549999999974\" y=\"259.13950000000057\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"63\" x=\"269.3064999999998\" y=\"257.41400000000067\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"64\" x=\"265.2604999999999\" y=\"256.02400000000074\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"65\" x=\"261.24949999999995\" y=\"254.53700000000075\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"66\" x=\"257.31750000000005\" y=\"252.85200000000071\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"67\" x=\"253.52550000000002\" y=\"250.8755000000007\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"68\" x=\"251.30299999999994\" y=\"254.53550000000072\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"69\" x=\"249.66549999999998\" y=\"258.4405000000008\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"70\" x=\"247.39649999999997\" y=\"262.3110000000008\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"71\" x=\"244.7745\" y=\"265.9550000000007\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"72\" x=\"242.2855\" y=\"269.4355000000008\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"73\" x=\"252.4685\" y=\"228.3475\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"74\" x=\"250.169\" y=\"222.59249999999997\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"75\" x=\"247.3205\" y=\"217.09199999999996\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"76\" x=\"243.6935\" y=\"212.07499999999996\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"77\" x=\"244.20000000000002\" y=\"207.76499999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"78\" x=\"249.01050000000004\" y=\"204.48649999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"79\" x=\"252.74950000000004\" y=\"201.33949999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"80\" x=\"256.4295\" y=\"198.12449999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"81\" x=\"260.714\" y=\"196.565\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"82\" x=\"265.882\" y=\"198.5145\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"83\" x=\"270.80400000000003\" y=\"201.02249999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"84\" x=\"275.432\" y=\"204.03549999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"85\" x=\"275.80050000000006\" y=\"210.14399999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"86\" x=\"275.783\" y=\"216.26049999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"87\" x=\"274.79200000000003\" y=\"222.28799999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"88\" x=\"269.9805\" y=\"225.32299999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"89\" x=\"265.81399999999996\" y=\"226.39049999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"90\" x=\"261.62249999999995\" y=\"227.35349999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"91\" x=\"257.39399999999995\" y=\"228.13999999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"92\" x=\"222.0025\" y=\"280.676\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"93\" x=\"216.105\" y=\"281.53849999999994\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"94\" x=\"210.15125\" y=\"281.53450499999997\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"95\" x=\"204.31655\" y=\"280.78064499999994\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"96\" x=\"200.120715\" y=\"282.5328449999999\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"97\" x=\"198.7925\" y=\"286.89397999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"98\" x=\"197.087\" y=\"291.95998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"99\" x=\"195.631\" y=\"297.10497999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"100\" x=\"194.198\" y=\"302.2554799999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"101\" x=\"198.44100000000003\" y=\"306.0534799999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"102\" x=\"203.20800000000006\" y=\"309.1719799999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"103\" x=\"208.33300000000006\" y=\"311.6629799999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"104\" x=\"213.17450000000002\" y=\"312.2534799999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"105\" x=\"217.31300000000002\" y=\"309.88147999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"106\" x=\"221.16100000000003\" y=\"307.27497999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"107\" x=\"224.68650000000002\" y=\"304.25347999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"108\" x=\"225.525\" y=\"298.28948\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"109\" x=\"224.84050000000002\" y=\"294.08648000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"110\" x=\"224.18750000000003\" y=\"289.87948000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"111\" x=\"223.60500000000002\" y=\"285.66148000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"112\" x=\"253.64949999999996\" y=\"246.59149999999988\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"113\" x=\"253.99849999999984\" y=\"242.24499999999972\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"114\" x=\"254.0409999999998\" y=\"237.88849999999962\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"115\" x=\"253.6504999999999\" y=\"233.62949999999978\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"116\" x=\"276.79650000000004\" y=\"226.06400000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"117\" x=\"280.1655000000002\" y=\"228.70850000000016\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"118\" x=\"281.4695\" y=\"232.90200000000013\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"119\" x=\"282.10699999999997\" y=\"237.26400000000012\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"120\" x=\"282.31399999999996\" y=\"241.66900000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"121\" x=\"282.2034999999999\" y=\"246.0775\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"122\" x=\"281.88199999999995\" y=\"250.47849999999983\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"123\" x=\"279.2355000000002\" y=\"253.79100499999979\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"124\" x=\"170.666\" y=\"230.407\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"125\" x=\"170.1045\" y=\"236.0035\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"126\" x=\"169.8925\" y=\"241.62199999999999\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"127\" x=\"170.40500000000003\" y=\"247.2175\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"128\" x=\"167.57300000000004\" y=\"250.868\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"129\" x=\"163.27300000000002\" y=\"251.54299999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"130\" x=\"158.4325\" y=\"252.60899999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"131\" x=\"153.637\" y=\"253.865\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"132\" x=\"148.814\" y=\"255.014\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"133\" x=\"144.97799999999998\" y=\"252.38500000000002\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"134\" x=\"142.52249999999998\" y=\"248.3135\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"135\" x=\"141.9185\" y=\"242.458\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"136\" x=\"141.673\" y=\"236.57899999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"137\" x=\"142.15200000000002\" y=\"230.71699999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"138\" x=\"144.50200000000004\" y=\"226.38649999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"139\" x=\"148.2345\" y=\"223.43699999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"140\" x=\"152.803\" y=\"222.779\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"141\" x=\"158.27299999999997\" y=\"224.8105\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"142\" x=\"163.7025\" y=\"226.9475\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"143\" x=\"172.0265\" y=\"226.3525\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"144\" x=\"173.73100000000002\" y=\"222.3425\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"145\" x=\"175.79600000000002\" y=\"218.5065\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"146\" x=\"178.161\" y=\"214.92549999999994\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"147\" x=\"181.027\" y=\"211.33499999999995\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"148\" x=\"179.46799999999996\" y=\"207.05199999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"149\" x=\"176.49399999999997\" y=\"203.43049999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"150\" x=\"173.31599999999997\" y=\"199.98399999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"151\" x=\"170.22099999999998\" y=\"196.811\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"152\" x=\"167.0065\" y=\"193.763\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"153\" x=\"162.6205\" y=\"194.61400000000003\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"154\" x=\"158.17049999999998\" y=\"196.58450000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"155\" x=\"153.89449999999997\" y=\"198.90550000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"156\" x=\"149.96399999999997\" y=\"201.76950000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"157\" x=\"149.07849999999996\" y=\"206.18950000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"158\" x=\"148.96999999999997\" y=\"210.90400000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"159\" x=\"149.31499999999997\" y=\"215.60250000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"160\" x=\"180.83\" y=\"268.309\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"161\" x=\"176.96300000000002\" y=\"263.611\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"162\" x=\"173.98950000000002\" y=\"258.294\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"163\" x=\"171.61800000000005\" y=\"252.67949999999996\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"164\" x=\"148.53950000000006\" y=\"259.5204999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"165\" x=\"147.91950000000008\" y=\"265.64499999999987\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"166\" x=\"148.0620000000001\" y=\"271.79949999999985\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"167\" x=\"150.1905000000001\" y=\"276.8579999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"168\" x=\"154.92700000000008\" y=\"279.64099999999985\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"169\" x=\"159.92000000000007\" y=\"281.92899999999986\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"170\" x=\"165.20750000000007\" y=\"283.3969999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"171\" x=\"169.49350000000007\" y=\"280.0579999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"172\" x=\"173.47000000000006\" y=\"276.34699999999987\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"173\" x=\"177.64650000000006\" y=\"272.86949999999985\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"174\" x=\"184.46099999999998\" y=\"271.6435\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"175\" x=\"188.244\" y=\"274.4235000000001\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"176\" x=\"192.212\" y=\"276.91550000000007\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"177\" x=\"196.69199999999998\" y=\"279.05250000000007\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"178\" x=\"189.78099999999986\" y=\"303.78650000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"179\" x=\"184.52499999999984\" y=\"304.071\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"180\" x=\"179.37349999999984\" y=\"302.02450000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"181\" x=\"174.39999999999984\" y=\"299.5820000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"182\" x=\"169.78949999999983\" y=\"296.5135000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"183\" x=\"166.0604749999998\" y=\"291.81369\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"184\" x=\"256.187\" y=\"289.68100000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"185\" x=\"255.618\" y=\"294.0760000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"186\" x=\"252.2765\" y=\"297.2355000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"187\" x=\"247.2765\" y=\"300.5735000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"188\" x=\"242.026\" y=\"303.50250000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"189\" x=\"237.709\" y=\"305.68000000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"190\" x=\"233.33212500000005\" y=\"305.07749000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"191\" x=\"229.41944000000007\" y=\"303.4087900000002\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"192\" x=\"226.13250000000005\" y=\"279.3800550000003\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"193\" x=\"230.32200000000003\" y=\"277.7285550000003\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"194\" x=\"234.19950000000003\" y=\"275.46755500000035\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"195\" x=\"238.26500000000001\" y=\"272.5800550000003\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"196\" x=\"183.58199999999994\" y=\"175.32049999999992\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"197\" x=\"179.74849999999992\" y=\"177.36549999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"198\" x=\"176.05649999999991\" y=\"179.65599999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"199\" x=\"172.51299999999992\" y=\"182.16949999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"200\" x=\"169.1214999999999\" y=\"184.88399999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"201\" x=\"167.9079999999999\" y=\"189.16949999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"202\" x=\"184.27649999999994\" y=\"208.46149999999992\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"203\" x=\"187.59899999999996\" y=\"205.65999999999988\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"204\" x=\"191.49399999999994\" y=\"203.25749999999988\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"205\" x=\"195.60049999999995\" y=\"201.23149999999987\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"206\" x=\"239.4865\" y=\"207.7885\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"207\" x=\"234.724\" y=\"204.3285\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"208\" x=\"229.591\" y=\"201.44899999999998\" sam=\"false\" boundary=\"false\" fixed=\"true\" />\n      <node nr=\"209\" x=\"239.5275000000001\" y=\"175.935\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"210\" x=\"244.4300000000001\" y=\"177.932\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"211\" x=\"249.1815000000001\" y=\"180.25799999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"212\" x=\"253.5990000000001\" y=\"183.16349999999997\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"213\" x=\"257.13050000000015\" y=\"186.04999999999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"214\" x=\"257.7715000000002\" y=\"190.392\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"215\" x=\"165.37150000000003\" y=\"182.79100000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"216\" x=\"162.36100000000002\" y=\"179.55700000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"217\" x=\"158.63500000000002\" y=\"175.21300000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"218\" x=\"155.13350000000003\" y=\"170.68650000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"219\" x=\"151.971\" y=\"165.91850000000008\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"220\" x=\"154.09550000000002\" y=\"161.28400000000008\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"221\" x=\"157.25300000000001\" y=\"157.27950000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"222\" x=\"161.2255\" y=\"154.08000000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"223\" x=\"166.10700000000003\" y=\"151.43800000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"224\" x=\"171.65400000000002\" y=\"149.85750000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"225\" x=\"177.40650000000002\" y=\"149.37950000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"226\" x=\"248.56050000000005\" y=\"150.31600000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"227\" x=\"254.32300000000006\" y=\"150.71100000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"228\" x=\"259.8210000000001\" y=\"152.48850000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"229\" x=\"264.7950000000001\" y=\"155.43300000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"230\" x=\"269.04750000000007\" y=\"159.34800000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"231\" x=\"271.6455000000001\" y=\"162.78700000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"232\" x=\"273.6665000000001\" y=\"166.52650000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"233\" x=\"270.6155000000001\" y=\"170.82500000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"234\" x=\"267.2170000000001\" y=\"173.9975000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"235\" x=\"263.9460000000001\" y=\"177.3015000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"236\" x=\"260.7505000000001\" y=\"180.67950000000008\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"237\" x=\"259.00699999999995\" y=\"297.118\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"238\" x=\"262.31399999999996\" y=\"300.66599999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"239\" x=\"265.80799999999994\" y=\"305.1099999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"240\" x=\"269.2885\" y=\"309.56499999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"241\" x=\"271.73\" y=\"313.08799999999997\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"242\" x=\"269.9765000000001\" y=\"317.1635\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"243\" x=\"265.7305000000001\" y=\"322.5835\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"244\" x=\"261.16000000000014\" y=\"325.9415\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"245\" x=\"255.99900000000017\" y=\"328.29400000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"246\" x=\"250.46350000000015\" y=\"329.52500000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"247\" x=\"244.79350000000014\" y=\"329.52600000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"248\" x=\"241.92600000000013\" y=\"325.7315000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"249\" x=\"241.04600000000013\" y=\"320.99700000000007\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"250\" x=\"239.8500000000001\" y=\"316.33150000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"251\" x=\"238.3270000000001\" y=\"311.76300000000003\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"252\" x=\"240.25850000000005\" y=\"331.2610950000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"253\" x=\"235.28100000000003\" y=\"334.8025950000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"254\" x=\"229.57800000000003\" y=\"336.9855950000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"255\" x=\"223.50300000000001\" y=\"337.5940950000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"256\" x=\"218.27\" y=\"336.97109500000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"257\" x=\"213.3535\" y=\"335.01259500000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"258\" x=\"211.28449999999998\" y=\"329.7625950000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"259\" x=\"211.65949999999998\" y=\"323.66809500000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"260\" x=\"211.88449999999997\" y=\"317.56659500000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"261\" x=\"186.4865\" y=\"308.3690000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"262\" x=\"185.1885\" y=\"312.9770000000001\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"263\" x=\"183.579\" y=\"317.48800000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"264\" x=\"181.80550000000002\" y=\"321.937\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"265\" x=\"180.00600000000003\" y=\"326.37550000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"266\" x=\"181.3545\" y=\"330.78049999999996\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"267\" x=\"185.545\" y=\"333.8005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"268\" x=\"190.22899999999998\" y=\"335.98\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"269\" x=\"195.24899999999997\" y=\"337.19100000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"270\" x=\"200.01149999999996\" y=\"337.19399999999996\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"271\" x=\"204.66399999999996\" y=\"336.337\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"272\" x=\"208.99599999999995\" y=\"334.45449999999994\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"273\" x=\"175.78463500000007\" y=\"328.7498449999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"274\" x=\"171.42880000000008\" y=\"328.5844899999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"275\" x=\"167.16735000000008\" y=\"327.6778799999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"276\" x=\"163.1145550000001\" y=\"326.09484499999974\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"277\" x=\"159.36684500000013\" y=\"323.8987049999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"278\" x=\"156.01911000000013\" y=\"321.14621999999974\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"279\" x=\"153.15398500000015\" y=\"317.9545149999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"280\" x=\"150.75619000000017\" y=\"314.26327999999984\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"281\" x=\"151.05413000000019\" y=\"309.6418099999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"282\" x=\"154.45390500000016\" y=\"306.8124449999998\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"283\" x=\"157.65862000000016\" y=\"303.7067049999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"284\" x=\"160.80892000000017\" y=\"300.60897499999993\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"285\" x=\"163.8429050000002\" y=\"297.40169499999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"286\" x=\"285.56899999999956\" y=\"252.8670000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"287\" x=\"289.7394999999996\" y=\"253.77600000000044\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"288\" x=\"293.89749999999964\" y=\"254.73500000000047\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"289\" x=\"298.0014999999997\" y=\"255.90600000000046\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"290\" x=\"301.9834999999997\" y=\"257.44050000000044\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"291\" x=\"305.2479999999995\" y=\"260.1375000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"292\" x=\"306.11649999999946\" y=\"264.41500000000013\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"293\" x=\"306.26899999999944\" y=\"268.6960000000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"294\" x=\"305.35349999999937\" y=\"273.15900000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"295\" x=\"303.5789999999994\" y=\"277.38650000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"296\" x=\"301.0314999999993\" y=\"281.19950000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"297\" x=\"297.8119999999993\" y=\"284.46600000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"298\" x=\"294.0209999999993\" y=\"287.0485\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"299\" x=\"289.8334999999993\" y=\"285.1169999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"300\" x=\"286.0544999999993\" y=\"282.6339999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"301\" x=\"282.20199999999926\" y=\"280.26599999999985\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"302\" x=\"278.2774999999993\" y=\"278.0189999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"303\" x=\"284.24912\" y=\"227.49508500000033\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"304\" x=\"288.506405\" y=\"226.41735500000027\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"305\" x=\"292.96934\" y=\"225.61547000000024\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"306\" x=\"297.4347900000001\" y=\"224.82937000000027\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"307\" x=\"301.9042550000002\" y=\"224.06210500000026\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"308\" x=\"306.21685500000024\" y=\"224.7606350000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"309\" x=\"308.6439150000003\" y=\"228.53331000000026\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"310\" x=\"310.3278200000002\" y=\"232.69242000000028\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"311\" x=\"311.1258400000002\" y=\"237.19824500000033\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"312\" x=\"311.27725000000015\" y=\"241.5324950000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"313\" x=\"310.6743150000001\" y=\"245.82856000000035\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"314\" x=\"309.4082400000001\" y=\"249.97494000000037\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"315\" x=\"307.5734950000001\" y=\"253.89679000000038\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"316\" x=\"139.2455\" y=\"226.524\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"317\" x=\"135.0465\" y=\"225.60999999999999\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"318\" x=\"130.85000000000002\" y=\"224.682\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"319\" x=\"126.70700000000001\" y=\"223.5445\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"320\" x=\"122.69600000000001\" y=\"222.011\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"321\" x=\"118.91350000000001\" y=\"219.8745\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"322\" x=\"118.10400000000003\" y=\"215.42550000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"323\" x=\"117.96700000000003\" y=\"209.63350000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"324\" x=\"119.20950000000003\" y=\"204.73800000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"325\" x=\"121.50350000000003\" y=\"200.23650000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"326\" x=\"124.66800000000003\" y=\"196.29750000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"327\" x=\"128.55200000000005\" y=\"193.06450000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"328\" x=\"132.946\" y=\"193.16600000000005\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"329\" x=\"137.4265\" y=\"196.28700000000006\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"330\" x=\"142.1025\" y=\"199.11250000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"331\" x=\"116.81100000000004\" y=\"223.95899999999995\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"332\" x=\"114.59400000000002\" y=\"227.91099999999994\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"333\" x=\"112.82500000000002\" y=\"233.42199999999994\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"334\" x=\"112.29700000000003\" y=\"239.18749999999994\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"335\" x=\"113.01500000000003\" y=\"244.93099999999995\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"336\" x=\"114.99850000000002\" y=\"250.36699999999996\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"337\" x=\"117.4865\" y=\"254.22199999999998\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"338\" x=\"123.2945\" y=\"254.53649999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"339\" x=\"129.4355\" y=\"253.52949999999996\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"340\" x=\"135.516\" y=\"252.20149999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"341\" x=\"146.55399000000006\" y=\"310.27000000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"342\" x=\"141.90599000000006\" y=\"308.27600000000007\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"343\" x=\"137.70749000000004\" y=\"305.47150000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"344\" x=\"134.29399000000004\" y=\"301.74800000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"345\" x=\"131.76449000000002\" y=\"297.37500000000006\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"346\" x=\"130.16649\" y=\"292.58000000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"347\" x=\"129.47699\" y=\"288.332\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"348\" x=\"132.73199000000002\" y=\"284.7175\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"349\" x=\"136.83399\" y=\"282.746\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"350\" x=\"140.82448999999997\" y=\"280.55499999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"351\" x=\"144.77498999999997\" y=\"278.29299999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"352\" x=\"117.35800000000002\" y=\"259.1610000000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"353\" x=\"116.92750000000002\" y=\"264.30900000000014\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"354\" x=\"117.47150000000003\" y=\"269.4465000000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"355\" x=\"119.01800000000003\" y=\"274.3725000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"356\" x=\"121.46800000000005\" y=\"278.4565000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"357\" x=\"124.59800000000004\" y=\"282.0040000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"358\" x=\"147.19150000000005\" y=\"168.0065\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"359\" x=\"142.58250000000004\" y=\"170.34\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"360\" x=\"138.49750000000003\" y=\"173.502\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"361\" x=\"135.13100000000003\" y=\"177.417\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"362\" x=\"133.12050000000002\" y=\"181.3435\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"363\" x=\"131.69150000000005\" y=\"185.85200000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"364\" x=\"277.36150000000004\" y=\"168.89549999999997\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"365\" x=\"281.497\" y=\"170.42749999999995\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"366\" x=\"285.18950000000007\" y=\"172.84499999999997\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"367\" x=\"288.33250000000004\" y=\"175.94499999999996\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"368\" x=\"290.86400000000003\" y=\"179.56249999999994\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"369\" x=\"292.71500000000003\" y=\"183.57049999999995\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"370\" x=\"293.892\" y=\"188.30499999999995\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"371\" x=\"294.13249999999994\" y=\"193.17099999999996\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"372\" x=\"288.58699999999993\" y=\"195.74849999999995\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"373\" x=\"283.1789999999999\" y=\"198.60599999999994\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"374\" x=\"306.15000000000003\" y=\"219.46100000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"375\" x=\"306.51849999999996\" y=\"213.27700000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"376\" x=\"305.46549999999996\" y=\"207.17350000000005\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"377\" x=\"303.22499999999997\" y=\"202.18200000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"378\" x=\"299.92849999999993\" y=\"197.89600000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"379\" x=\"279.6914999999999\" y=\"201.14500000000004\" sam=\"false\" boundary=\"false\" fixed=\"false\" />\n      <node nr=\"380\" x=\"275.9275\" y=\"311.4855000000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"381\" x=\"280.03\" y=\"309.79900000000004\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"382\" x=\"283.8124999999999\" y=\"307.4825000000001\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"383\" x=\"287.1499999999999\" y=\"304.5635000000002\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"384\" x=\"289.819\" y=\"301.1865000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"385\" x=\"291.65200000000004\" y=\"297.2160000000003\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n      <node nr=\"386\" x=\"292.5575\" y=\"292.93300000000033\" sam=\"false\" boundary=\"true\" fixed=\"false\" />\n   </nodes>\n   <cells n=\"31\" magnfication=\"1\" nchem=\"0\" offsetx=\"0\" offsety=\"0\" base_area=\"965.8072328712353\">\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"785.8336618749973\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"0\" source=\"false\" pin_fixed=\"false\" area=\"785.8336618749973\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"0\" />\n         <node n=\"19\" />\n         <node n=\"18\" />\n         <node n=\"17\" />\n         <node n=\"16\" />\n         <node n=\"15\" />\n         <node n=\"14\" />\n         <node n=\"13\" />\n         <node n=\"12\" />\n         <node n=\"11\" />\n         <node n=\"10\" />\n         <node n=\"9\" />\n         <node n=\"8\" />\n         <node n=\"7\" />\n         <node n=\"6\" />\n         <node n=\"5\" />\n         <node n=\"4\" />\n         <node n=\"3\" />\n         <node n=\"2\" />\n         <node n=\"1\" />\n         <wall w=\"0\" />\n         <wall w=\"1\" />\n         <wall w=\"2\" />\n         <wall w=\"3\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"818.246203125006\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"100000.0\" index=\"1\" source=\"false\" pin_fixed=\"false\" area=\"818.246203125006\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"20\" />\n         <node n=\"21\" />\n         <node n=\"22\" />\n         <node n=\"23\" />\n         <node n=\"24\" />\n         <node n=\"25\" />\n         <node n=\"26\" />\n         <node n=\"27\" />\n         <node n=\"28\" />\n         <node n=\"29\" />\n         <node n=\"30\" />\n         <node n=\"31\" />\n         <node n=\"32\" />\n         <node n=\"33\" />\n         <node n=\"34\" />\n         <node n=\"35\" />\n         <node n=\"36\" />\n         <node n=\"16\" />\n         <node n=\"17\" />\n         <node n=\"18\" />\n         <node n=\"19\" />\n         <wall w=\"3\" />\n         <wall w=\"4\" />\n         <wall w=\"5\" />\n         <wall w=\"6\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"802.9907981250008\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"2\" source=\"false\" pin_fixed=\"false\" area=\"802.9907981250008\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"37\" />\n         <node n=\"49\" />\n         <node n=\"48\" />\n         <node n=\"47\" />\n         <node n=\"23\" />\n         <node n=\"22\" />\n         <node n=\"21\" />\n         <node n=\"20\" />\n         <node n=\"19\" />\n         <node n=\"0\" />\n         <node n=\"1\" />\n         <node n=\"2\" />\n         <node n=\"3\" />\n         <node n=\"46\" />\n         <node n=\"45\" />\n         <node n=\"44\" />\n         <node n=\"43\" />\n         <node n=\"42\" />\n         <node n=\"41\" />\n         <node n=\"40\" />\n         <node n=\"39\" />\n         <node n=\"38\" />\n         <wall w=\"0\" />\n         <wall w=\"4\" />\n         <wall w=\"7\" />\n         <wall w=\"8\" />\n         <wall w=\"9\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"749.3733358749803\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"3\" source=\"false\" pin_fixed=\"false\" area=\"749.3733358749803\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"50\" />\n         <node n=\"72\" />\n         <node n=\"71\" />\n         <node n=\"70\" />\n         <node n=\"69\" />\n         <node n=\"68\" />\n         <node n=\"67\" />\n         <node n=\"66\" />\n         <node n=\"65\" />\n         <node n=\"64\" />\n         <node n=\"63\" />\n         <node n=\"62\" />\n         <node n=\"61\" />\n         <node n=\"60\" />\n         <node n=\"59\" />\n         <node n=\"58\" />\n         <node n=\"57\" />\n         <node n=\"56\" />\n         <node n=\"55\" />\n         <node n=\"54\" />\n         <node n=\"53\" />\n         <node n=\"52\" />\n         <node n=\"51\" />\n         <wall w=\"10\" />\n         <wall w=\"11\" />\n         <wall w=\"12\" />\n         <wall w=\"13\" />\n         <wall w=\"14\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"745.17889425\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"4\" source=\"false\" pin_fixed=\"false\" area=\"745.17889425\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"73\" />\n         <node n=\"74\" />\n         <node n=\"75\" />\n         <node n=\"76\" />\n         <node n=\"77\" />\n         <node n=\"78\" />\n         <node n=\"79\" />\n         <node n=\"80\" />\n         <node n=\"81\" />\n         <node n=\"82\" />\n         <node n=\"83\" />\n         <node n=\"84\" />\n         <node n=\"85\" />\n         <node n=\"86\" />\n         <node n=\"87\" />\n         <node n=\"88\" />\n         <node n=\"89\" />\n         <node n=\"90\" />\n         <node n=\"91\" />\n         <wall w=\"15\" />\n         <wall w=\"16\" />\n         <wall w=\"17\" />\n         <wall w=\"18\" />\n         <wall w=\"19\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"762.3499630723619\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"5\" source=\"false\" pin_fixed=\"false\" area=\"762.3499630723619\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"92\" />\n         <node n=\"111\" />\n         <node n=\"110\" />\n         <node n=\"109\" />\n         <node n=\"108\" />\n         <node n=\"107\" />\n         <node n=\"106\" />\n         <node n=\"105\" />\n         <node n=\"104\" />\n         <node n=\"103\" />\n         <node n=\"102\" />\n         <node n=\"101\" />\n         <node n=\"100\" />\n         <node n=\"99\" />\n         <node n=\"98\" />\n         <node n=\"97\" />\n         <node n=\"96\" />\n         <node n=\"95\" />\n         <node n=\"94\" />\n         <node n=\"93\" />\n         <wall w=\"20\" />\n         <wall w=\"21\" />\n         <wall w=\"22\" />\n         <wall w=\"23\" />\n         <wall w=\"24\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"810.0971982912666\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"6\" source=\"false\" pin_fixed=\"false\" area=\"810.0971982912666\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"67\" />\n         <node n=\"112\" />\n         <node n=\"113\" />\n         <node n=\"114\" />\n         <node n=\"115\" />\n         <node n=\"73\" />\n         <node n=\"91\" />\n         <node n=\"90\" />\n         <node n=\"89\" />\n         <node n=\"88\" />\n         <node n=\"87\" />\n         <node n=\"116\" />\n         <node n=\"117\" />\n         <node n=\"118\" />\n         <node n=\"119\" />\n         <node n=\"120\" />\n         <node n=\"121\" />\n         <node n=\"122\" />\n         <node n=\"123\" />\n         <node n=\"62\" />\n         <node n=\"63\" />\n         <node n=\"64\" />\n         <node n=\"65\" />\n         <node n=\"66\" />\n         <wall w=\"13\" />\n         <wall w=\"19\" />\n         <wall w=\"25\" />\n         <wall w=\"26\" />\n         <wall w=\"27\" />\n         <wall w=\"28\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"747.7255643750002\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"7\" source=\"false\" pin_fixed=\"false\" area=\"747.7255643750002\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"124\" />\n         <node n=\"125\" />\n         <node n=\"126\" />\n         <node n=\"127\" />\n         <node n=\"128\" />\n         <node n=\"129\" />\n         <node n=\"130\" />\n         <node n=\"131\" />\n         <node n=\"132\" />\n         <node n=\"133\" />\n         <node n=\"134\" />\n         <node n=\"135\" />\n         <node n=\"136\" />\n         <node n=\"137\" />\n         <node n=\"138\" />\n         <node n=\"139\" />\n         <node n=\"140\" />\n         <node n=\"141\" />\n         <node n=\"142\" />\n         <wall w=\"29\" />\n         <wall w=\"30\" />\n         <wall w=\"31\" />\n         <wall w=\"32\" />\n         <wall w=\"33\" />\n         <wall w=\"34\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"792.5648499999996\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"8\" source=\"false\" pin_fixed=\"false\" area=\"792.5648499999996\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"124\" />\n         <node n=\"142\" />\n         <node n=\"141\" />\n         <node n=\"140\" />\n         <node n=\"139\" />\n         <node n=\"159\" />\n         <node n=\"158\" />\n         <node n=\"157\" />\n         <node n=\"156\" />\n         <node n=\"155\" />\n         <node n=\"154\" />\n         <node n=\"153\" />\n         <node n=\"152\" />\n         <node n=\"151\" />\n         <node n=\"150\" />\n         <node n=\"149\" />\n         <node n=\"148\" />\n         <node n=\"147\" />\n         <node n=\"146\" />\n         <node n=\"145\" />\n         <node n=\"144\" />\n         <node n=\"143\" />\n         <wall w=\"34\" />\n         <wall w=\"35\" />\n         <wall w=\"36\" />\n         <wall w=\"37\" />\n         <wall w=\"38\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"764.6376389999953\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"9\" source=\"false\" pin_fixed=\"false\" area=\"764.6376389999953\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"160\" />\n         <node n=\"173\" />\n         <node n=\"172\" />\n         <node n=\"171\" />\n         <node n=\"170\" />\n         <node n=\"169\" />\n         <node n=\"168\" />\n         <node n=\"167\" />\n         <node n=\"166\" />\n         <node n=\"165\" />\n         <node n=\"164\" />\n         <node n=\"132\" />\n         <node n=\"131\" />\n         <node n=\"130\" />\n         <node n=\"129\" />\n         <node n=\"128\" />\n         <node n=\"127\" />\n         <node n=\"163\" />\n         <node n=\"162\" />\n         <node n=\"161\" />\n         <wall w=\"30\" />\n         <wall w=\"39\" />\n         <wall w=\"40\" />\n         <wall w=\"41\" />\n         <wall w=\"42\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"802.3298131541035\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"10\" source=\"false\" pin_fixed=\"false\" area=\"802.3298131541035\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"160\" />\n         <node n=\"174\" />\n         <node n=\"175\" />\n         <node n=\"176\" />\n         <node n=\"177\" />\n         <node n=\"96\" />\n         <node n=\"97\" />\n         <node n=\"98\" />\n         <node n=\"99\" />\n         <node n=\"100\" />\n         <node n=\"178\" />\n         <node n=\"179\" />\n         <node n=\"180\" />\n         <node n=\"181\" />\n         <node n=\"182\" />\n         <node n=\"183\" />\n         <node n=\"170\" />\n         <node n=\"171\" />\n         <node n=\"172\" />\n         <node n=\"173\" />\n         <wall w=\"21\" />\n         <wall w=\"42\" />\n         <wall w=\"43\" />\n         <wall w=\"44\" />\n         <wall w=\"45\" />\n         <wall w=\"46\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"812.4487645084192\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"11\" source=\"false\" pin_fixed=\"false\" area=\"812.4487645084192\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"54\" />\n         <node n=\"184\" />\n         <node n=\"185\" />\n         <node n=\"186\" />\n         <node n=\"187\" />\n         <node n=\"188\" />\n         <node n=\"189\" />\n         <node n=\"190\" />\n         <node n=\"191\" />\n         <node n=\"107\" />\n         <node n=\"108\" />\n         <node n=\"109\" />\n         <node n=\"110\" />\n         <node n=\"111\" />\n         <node n=\"92\" />\n         <node n=\"192\" />\n         <node n=\"193\" />\n         <node n=\"194\" />\n         <node n=\"195\" />\n         <node n=\"72\" />\n         <node n=\"50\" />\n         <node n=\"51\" />\n         <node n=\"52\" />\n         <node n=\"53\" />\n         <wall w=\"10\" />\n         <wall w=\"24\" />\n         <wall w=\"47\" />\n         <wall w=\"48\" />\n         <wall w=\"49\" />\n         <wall w=\"50\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"814.4101535000012\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"12\" source=\"false\" pin_fixed=\"false\" area=\"814.4101535000012\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"49\" />\n         <node n=\"37\" />\n         <node n=\"205\" />\n         <node n=\"204\" />\n         <node n=\"203\" />\n         <node n=\"202\" />\n         <node n=\"147\" />\n         <node n=\"148\" />\n         <node n=\"149\" />\n         <node n=\"150\" />\n         <node n=\"151\" />\n         <node n=\"152\" />\n         <node n=\"201\" />\n         <node n=\"200\" />\n         <node n=\"199\" />\n         <node n=\"198\" />\n         <node n=\"197\" />\n         <node n=\"196\" />\n         <node n=\"25\" />\n         <node n=\"24\" />\n         <node n=\"23\" />\n         <node n=\"47\" />\n         <node n=\"48\" />\n         <wall w=\"5\" />\n         <wall w=\"9\" />\n         <wall w=\"36\" />\n         <wall w=\"51\" />\n         <wall w=\"52\" />\n         <wall w=\"53\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"1\" target_area=\"808.6614455000021\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1.0\" index=\"13\" source=\"false\" pin_fixed=\"false\" area=\"808.6614455000021\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"76\" />\n         <node n=\"206\" />\n         <node n=\"207\" />\n         <node n=\"208\" />\n         <node n=\"42\" />\n         <node n=\"43\" />\n         <node n=\"44\" />\n         <node n=\"45\" />\n         <node n=\"46\" />\n         <node n=\"3\" />\n         <node n=\"4\" />\n         <node n=\"209\" />\n         <node n=\"210\" />\n         <node n=\"211\" />\n         <node n=\"212\" />\n         <node n=\"213\" />\n         <node n=\"214\" />\n         <node n=\"81\" />\n         <node n=\"80\" />\n         <node n=\"79\" />\n         <node n=\"78\" />\n         <node n=\"77\" />\n         <wall w=\"1\" />\n         <wall w=\"8\" />\n         <wall w=\"16\" />\n         <wall w=\"54\" />\n         <wall w=\"55\" />\n         <wall w=\"56\" />\n         <chem n=\"2\">\n            <val v=\"2.251808\" />\n            <val v=\"0.481961\" />\n         </chem>\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"827.438891999994\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"14\" source=\"false\" pin_fixed=\"false\" area=\"827.438891999994\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"25\" />\n         <node n=\"196\" />\n         <node n=\"197\" />\n         <node n=\"198\" />\n         <node n=\"199\" />\n         <node n=\"200\" />\n         <node n=\"215\" />\n         <node n=\"216\" />\n         <node n=\"217\" />\n         <node n=\"218\" />\n         <node n=\"219\" />\n         <node n=\"220\" />\n         <node n=\"221\" />\n         <node n=\"222\" />\n         <node n=\"223\" />\n         <node n=\"224\" />\n         <node n=\"225\" />\n         <node n=\"30\" />\n         <node n=\"29\" />\n         <node n=\"28\" />\n         <node n=\"27\" />\n         <node n=\"26\" />\n         <wall w=\"6\" />\n         <wall w=\"51\" />\n         <wall w=\"57\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"833.0448551250029\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"15\" source=\"false\" pin_fixed=\"false\" area=\"833.0448551250029\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"212\" />\n         <node n=\"211\" />\n         <node n=\"210\" />\n         <node n=\"209\" />\n         <node n=\"4\" />\n         <node n=\"5\" />\n         <node n=\"6\" />\n         <node n=\"7\" />\n         <node n=\"8\" />\n         <node n=\"9\" />\n         <node n=\"226\" />\n         <node n=\"227\" />\n         <node n=\"228\" />\n         <node n=\"229\" />\n         <node n=\"230\" />\n         <node n=\"231\" />\n         <node n=\"232\" />\n         <node n=\"233\" />\n         <node n=\"234\" />\n         <node n=\"235\" />\n         <node n=\"236\" />\n         <node n=\"213\" />\n         <wall w=\"2\" />\n         <wall w=\"55\" />\n         <wall w=\"58\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"782.859040874999\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"16\" source=\"false\" pin_fixed=\"false\" area=\"782.859040874999\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"188\" />\n         <node n=\"187\" />\n         <node n=\"186\" />\n         <node n=\"185\" />\n         <node n=\"237\" />\n         <node n=\"238\" />\n         <node n=\"239\" />\n         <node n=\"240\" />\n         <node n=\"241\" />\n         <node n=\"242\" />\n         <node n=\"243\" />\n         <node n=\"244\" />\n         <node n=\"245\" />\n         <node n=\"246\" />\n         <node n=\"247\" />\n         <node n=\"248\" />\n         <node n=\"249\" />\n         <node n=\"250\" />\n         <node n=\"251\" />\n         <node n=\"189\" />\n         <wall w=\"48\" />\n         <wall w=\"59\" />\n         <wall w=\"60\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"832.3605757178302\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"17\" source=\"false\" pin_fixed=\"false\" area=\"832.3605757178302\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"104\" />\n         <node n=\"105\" />\n         <node n=\"106\" />\n         <node n=\"107\" />\n         <node n=\"191\" />\n         <node n=\"190\" />\n         <node n=\"189\" />\n         <node n=\"251\" />\n         <node n=\"250\" />\n         <node n=\"249\" />\n         <node n=\"248\" />\n         <node n=\"247\" />\n         <node n=\"252\" />\n         <node n=\"253\" />\n         <node n=\"254\" />\n         <node n=\"255\" />\n         <node n=\"256\" />\n         <node n=\"257\" />\n         <node n=\"258\" />\n         <node n=\"259\" />\n         <node n=\"260\" />\n         <wall w=\"23\" />\n         <wall w=\"49\" />\n         <wall w=\"60\" />\n         <wall w=\"61\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"836.8887335012514\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"18\" source=\"false\" pin_fixed=\"false\" area=\"836.8887335012514\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"102\" />\n         <node n=\"103\" />\n         <node n=\"104\" />\n         <node n=\"260\" />\n         <node n=\"259\" />\n         <node n=\"258\" />\n         <node n=\"257\" />\n         <node n=\"272\" />\n         <node n=\"271\" />\n         <node n=\"270\" />\n         <node n=\"269\" />\n         <node n=\"268\" />\n         <node n=\"267\" />\n         <node n=\"266\" />\n         <node n=\"265\" />\n         <node n=\"264\" />\n         <node n=\"263\" />\n         <node n=\"262\" />\n         <node n=\"261\" />\n         <node n=\"179\" />\n         <node n=\"178\" />\n         <node n=\"100\" />\n         <node n=\"101\" />\n         <wall w=\"22\" />\n         <wall w=\"44\" />\n         <wall w=\"62\" />\n         <wall w=\"61\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"793.615438851664\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"19\" source=\"false\" pin_fixed=\"false\" area=\"793.615438851664\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"183\" />\n         <node n=\"182\" />\n         <node n=\"181\" />\n         <node n=\"180\" />\n         <node n=\"179\" />\n         <node n=\"178\" />\n         <node n=\"179\" />\n         <node n=\"261\" />\n         <node n=\"262\" />\n         <node n=\"263\" />\n         <node n=\"264\" />\n         <node n=\"265\" />\n         <node n=\"273\" />\n         <node n=\"274\" />\n         <node n=\"275\" />\n         <node n=\"276\" />\n         <node n=\"277\" />\n         <node n=\"278\" />\n         <node n=\"279\" />\n         <node n=\"280\" />\n         <node n=\"281\" />\n         <node n=\"282\" />\n         <node n=\"283\" />\n         <node n=\"284\" />\n         <node n=\"285\" />\n         <wall w=\"45\" />\n         <wall w=\"62\" />\n         <wall w=\"63\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"837.1302743337275\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"20\" source=\"false\" pin_fixed=\"false\" area=\"837.1302743337275\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"59\" />\n         <node n=\"60\" />\n         <node n=\"61\" />\n         <node n=\"62\" />\n         <node n=\"123\" />\n         <node n=\"122\" />\n         <node n=\"286\" />\n         <node n=\"287\" />\n         <node n=\"288\" />\n         <node n=\"289\" />\n         <node n=\"290\" />\n         <node n=\"291\" />\n         <node n=\"292\" />\n         <node n=\"293\" />\n         <node n=\"294\" />\n         <node n=\"295\" />\n         <node n=\"296\" />\n         <node n=\"297\" />\n         <node n=\"298\" />\n         <node n=\"299\" />\n         <node n=\"300\" />\n         <node n=\"301\" />\n         <node n=\"302\" />\n         <node n=\"58\" />\n         <wall w=\"12\" />\n         <wall w=\"28\" />\n         <wall w=\"64\" />\n         <wall w=\"65\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"812.1306720849735\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"21\" source=\"false\" pin_fixed=\"false\" area=\"812.1306720849735\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"121\" />\n         <node n=\"120\" />\n         <node n=\"119\" />\n         <node n=\"118\" />\n         <node n=\"117\" />\n         <node n=\"303\" />\n         <node n=\"304\" />\n         <node n=\"305\" />\n         <node n=\"306\" />\n         <node n=\"307\" />\n         <node n=\"308\" />\n         <node n=\"309\" />\n         <node n=\"310\" />\n         <node n=\"311\" />\n         <node n=\"312\" />\n         <node n=\"313\" />\n         <node n=\"314\" />\n         <node n=\"315\" />\n         <node n=\"290\" />\n         <node n=\"289\" />\n         <node n=\"288\" />\n         <node n=\"287\" />\n         <node n=\"286\" />\n         <node n=\"122\" />\n         <wall w=\"27\" />\n         <wall w=\"64\" />\n         <wall w=\"66\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"838.3761156249969\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"22\" source=\"false\" pin_fixed=\"false\" area=\"838.3761156249969\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"157\" />\n         <node n=\"158\" />\n         <node n=\"159\" />\n         <node n=\"139\" />\n         <node n=\"138\" />\n         <node n=\"137\" />\n         <node n=\"316\" />\n         <node n=\"317\" />\n         <node n=\"318\" />\n         <node n=\"319\" />\n         <node n=\"320\" />\n         <node n=\"321\" />\n         <node n=\"322\" />\n         <node n=\"323\" />\n         <node n=\"324\" />\n         <node n=\"325\" />\n         <node n=\"326\" />\n         <node n=\"327\" />\n         <node n=\"328\" />\n         <node n=\"329\" />\n         <node n=\"330\" />\n         <node n=\"156\" />\n         <wall w=\"33\" />\n         <wall w=\"38\" />\n         <wall w=\"67\" />\n         <wall w=\"68\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"809.4103242499987\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"23\" source=\"false\" pin_fixed=\"false\" area=\"809.4103242499987\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"134\" />\n         <node n=\"340\" />\n         <node n=\"339\" />\n         <node n=\"338\" />\n         <node n=\"337\" />\n         <node n=\"336\" />\n         <node n=\"335\" />\n         <node n=\"334\" />\n         <node n=\"333\" />\n         <node n=\"332\" />\n         <node n=\"331\" />\n         <node n=\"321\" />\n         <node n=\"320\" />\n         <node n=\"319\" />\n         <node n=\"318\" />\n         <node n=\"317\" />\n         <node n=\"316\" />\n         <node n=\"137\" />\n         <node n=\"136\" />\n         <node n=\"135\" />\n         <wall w=\"32\" />\n         <wall w=\"67\" />\n         <wall w=\"69\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"837.7645377819658\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"24\" source=\"false\" pin_fixed=\"false\" area=\"837.7645377819658\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"167\" />\n         <node n=\"168\" />\n         <node n=\"169\" />\n         <node n=\"170\" />\n         <node n=\"183\" />\n         <node n=\"285\" />\n         <node n=\"284\" />\n         <node n=\"283\" />\n         <node n=\"282\" />\n         <node n=\"281\" />\n         <node n=\"341\" />\n         <node n=\"342\" />\n         <node n=\"343\" />\n         <node n=\"344\" />\n         <node n=\"345\" />\n         <node n=\"346\" />\n         <node n=\"347\" />\n         <node n=\"348\" />\n         <node n=\"349\" />\n         <node n=\"350\" />\n         <node n=\"351\" />\n         <wall w=\"41\" />\n         <wall w=\"46\" />\n         <wall w=\"63\" />\n         <wall w=\"70\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"888.0716695750023\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"25\" source=\"false\" pin_fixed=\"false\" area=\"888.0716695750023\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"165\" />\n         <node n=\"166\" />\n         <node n=\"167\" />\n         <node n=\"351\" />\n         <node n=\"350\" />\n         <node n=\"349\" />\n         <node n=\"348\" />\n         <node n=\"347\" />\n         <node n=\"357\" />\n         <node n=\"356\" />\n         <node n=\"355\" />\n         <node n=\"354\" />\n         <node n=\"353\" />\n         <node n=\"352\" />\n         <node n=\"337\" />\n         <node n=\"338\" />\n         <node n=\"339\" />\n         <node n=\"340\" />\n         <node n=\"134\" />\n         <node n=\"133\" />\n         <node n=\"132\" />\n         <node n=\"164\" />\n         <wall w=\"31\" />\n         <wall w=\"40\" />\n         <wall w=\"69\" />\n         <wall w=\"70\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"853.807326124999\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"26\" source=\"false\" pin_fixed=\"false\" area=\"853.807326124999\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"154\" />\n         <node n=\"155\" />\n         <node n=\"156\" />\n         <node n=\"330\" />\n         <node n=\"329\" />\n         <node n=\"328\" />\n         <node n=\"327\" />\n         <node n=\"363\" />\n         <node n=\"362\" />\n         <node n=\"361\" />\n         <node n=\"360\" />\n         <node n=\"359\" />\n         <node n=\"358\" />\n         <node n=\"219\" />\n         <node n=\"218\" />\n         <node n=\"217\" />\n         <node n=\"216\" />\n         <node n=\"215\" />\n         <node n=\"200\" />\n         <node n=\"201\" />\n         <node n=\"152\" />\n         <node n=\"153\" />\n         <wall w=\"37\" />\n         <wall w=\"52\" />\n         <wall w=\"57\" />\n         <wall w=\"68\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"871.2549866249952\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"27\" source=\"false\" pin_fixed=\"false\" area=\"871.2549866249952\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"83\" />\n         <node n=\"82\" />\n         <node n=\"81\" />\n         <node n=\"214\" />\n         <node n=\"213\" />\n         <node n=\"236\" />\n         <node n=\"235\" />\n         <node n=\"234\" />\n         <node n=\"233\" />\n         <node n=\"232\" />\n         <node n=\"364\" />\n         <node n=\"365\" />\n         <node n=\"366\" />\n         <node n=\"367\" />\n         <node n=\"368\" />\n         <node n=\"369\" />\n         <node n=\"370\" />\n         <node n=\"371\" />\n         <node n=\"372\" />\n         <node n=\"373\" />\n         <node n=\"379\" />\n         <node n=\"84\" />\n         <wall w=\"17\" />\n         <wall w=\"56\" />\n         <wall w=\"58\" />\n         <wall w=\"71\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"841.2532820997197\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"28\" source=\"false\" pin_fixed=\"false\" area=\"841.2532820997197\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"85\" />\n         <node n=\"84\" />\n         <node n=\"379\" />\n         <node n=\"373\" />\n         <node n=\"372\" />\n         <node n=\"371\" />\n         <node n=\"378\" />\n         <node n=\"377\" />\n         <node n=\"376\" />\n         <node n=\"375\" />\n         <node n=\"374\" />\n         <node n=\"308\" />\n         <node n=\"307\" />\n         <node n=\"306\" />\n         <node n=\"305\" />\n         <node n=\"304\" />\n         <node n=\"303\" />\n         <node n=\"117\" />\n         <node n=\"116\" />\n         <node n=\"87\" />\n         <node n=\"86\" />\n         <wall w=\"18\" />\n         <wall w=\"26\" />\n         <wall w=\"66\" />\n         <wall w=\"71\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"0\" target_area=\"861.9510838749919\" lambda_celllength=\"0.0\" at_boundary=\"false\" dead=\"false\" target_length=\"0\" stiffness=\"10000000000000.0\" index=\"29\" source=\"false\" pin_fixed=\"false\" area=\"861.9510838749919\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"56\" />\n         <node n=\"57\" />\n         <node n=\"58\" />\n         <node n=\"302\" />\n         <node n=\"301\" />\n         <node n=\"300\" />\n         <node n=\"299\" />\n         <node n=\"298\" />\n         <node n=\"386\" />\n         <node n=\"385\" />\n         <node n=\"384\" />\n         <node n=\"383\" />\n         <node n=\"382\" />\n         <node n=\"381\" />\n         <node n=\"380\" />\n         <node n=\"241\" />\n         <node n=\"240\" />\n         <node n=\"239\" />\n         <node n=\"238\" />\n         <node n=\"237\" />\n         <node n=\"185\" />\n         <node n=\"184\" />\n         <node n=\"54\" />\n         <node n=\"55\" />\n         <wall w=\"11\" />\n         <wall w=\"47\" />\n         <wall w=\"59\" />\n         <wall w=\"65\" />\n      </cell>\n      <cell boundary=\"0\" cell_type=\"3\" target_area=\"5565.81812591105\" lambda_celllength=\"0.0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"100000000000.0\" index=\"30\" source=\"false\" pin_fixed=\"false\" area=\"5565.81812591105\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"113\" />\n         <node n=\"112\" />\n         <node n=\"67\" />\n         <node n=\"68\" />\n         <node n=\"69\" />\n         <node n=\"70\" />\n         <node n=\"71\" />\n         <node n=\"72\" />\n         <node n=\"195\" />\n         <node n=\"194\" />\n         <node n=\"193\" />\n         <node n=\"192\" />\n         <node n=\"92\" />\n         <node n=\"93\" />\n         <node n=\"94\" />\n         <node n=\"95\" />\n         <node n=\"96\" />\n         <node n=\"177\" />\n         <node n=\"176\" />\n         <node n=\"175\" />\n         <node n=\"174\" />\n         <node n=\"160\" />\n         <node n=\"161\" />\n         <node n=\"162\" />\n         <node n=\"163\" />\n         <node n=\"127\" />\n         <node n=\"126\" />\n         <node n=\"125\" />\n         <node n=\"124\" />\n         <node n=\"143\" />\n         <node n=\"144\" />\n         <node n=\"145\" />\n         <node n=\"146\" />\n         <node n=\"147\" />\n         <node n=\"202\" />\n         <node n=\"203\" />\n         <node n=\"204\" />\n         <node n=\"205\" />\n         <node n=\"37\" />\n         <node n=\"38\" />\n         <node n=\"39\" />\n         <node n=\"40\" />\n         <node n=\"41\" />\n         <node n=\"42\" />\n         <node n=\"208\" />\n         <node n=\"207\" />\n         <node n=\"206\" />\n         <node n=\"76\" />\n         <node n=\"75\" />\n         <node n=\"74\" />\n         <node n=\"73\" />\n         <node n=\"115\" />\n         <node n=\"114\" />\n         <wall w=\"7\" />\n         <wall w=\"14\" />\n         <wall w=\"15\" />\n         <wall w=\"20\" />\n         <wall w=\"25\" />\n         <wall w=\"29\" />\n         <wall w=\"35\" />\n         <wall w=\"39\" />\n         <wall w=\"43\" />\n         <wall w=\"50\" />\n         <wall w=\"53\" />\n         <wall w=\"54\" />\n      </cell>\n      <boundary_polygon boundary=\"0\" cell_type=\"0\" target_area=\"29955.65420301171\" lambda_celllength=\"0\" at_boundary=\"true\" dead=\"false\" target_length=\"0\" stiffness=\"1\" index=\"-1\" source=\"false\" pin_fixed=\"false\" area=\"29955.65420301171\" fixed=\"false\" div_counter=\"0\">\n         <node n=\"16\" />\n         <node n=\"14\" />\n         <node n=\"13\" />\n         <node n=\"12\" />\n         <node n=\"11\" />\n         <node n=\"10\" />\n         <node n=\"9\" />\n         <node n=\"226\" />\n         <node n=\"227\" />\n         <node n=\"228\" />\n         <node n=\"229\" />\n         <node n=\"230\" />\n         <node n=\"231\" />\n         <node n=\"232\" />\n         <node n=\"364\" />\n         <node n=\"365\" />\n         <node n=\"366\" />\n         <node n=\"367\" />\n         <node n=\"368\" />\n         <node n=\"369\" />\n         <node n=\"370\" />\n         <node n=\"371\" />\n         <node n=\"378\" />\n         <node n=\"377\" />\n         <node n=\"376\" />\n         <node n=\"375\" />\n         <node n=\"374\" />\n         <node n=\"308\" />\n         <node n=\"309\" />\n         <node n=\"310\" />\n         <node n=\"311\" />\n         <node n=\"312\" />\n         <node n=\"313\" />\n         <node n=\"314\" />\n         <node n=\"315\" />\n         <node n=\"290\" />\n         <node n=\"291\" />\n         <node n=\"292\" />\n         <node n=\"293\" />\n         <node n=\"294\" />\n         <node n=\"295\" />\n         <node n=\"296\" />\n         <node n=\"297\" />\n         <node n=\"298\" />\n         <node n=\"386\" />\n         <node n=\"385\" />\n         <node n=\"384\" />\n         <node n=\"383\" />\n         <node n=\"382\" />\n         <node n=\"381\" />\n         <node n=\"380\" />\n         <node n=\"241\" />\n         <node n=\"242\" />\n         <node n=\"243\" />\n         <node n=\"244\" />\n         <node n=\"245\" />\n         <node n=\"246\" />\n         <node n=\"247\" />\n         <node n=\"252\" />\n         <node n=\"253\" />\n         <node n=\"254\" />\n         <node n=\"255\" />\n         <node n=\"256\" />\n         <node n=\"257\" />\n         <node n=\"272\" />\n         <node n=\"271\" />\n         <node n=\"270\" />\n         <node n=\"269\" />\n         <node n=\"268\" />\n         <node n=\"267\" />\n         <node n=\"266\" />\n         <node n=\"265\" />\n         <node n=\"273\" />\n         <node n=\"274\" />\n         <node n=\"275\" />\n         <node n=\"276\" />\n         <node n=\"277\" />\n         <node n=\"278\" />\n         <node n=\"279\" />\n         <node n=\"280\" />\n         <node n=\"281\" />\n         <node n=\"341\" />\n         <node n=\"342\" />\n         <node n=\"343\" />\n         <node n=\"344\" />\n         <node n=\"345\" />\n         <node n=\"346\" />\n         <node n=\"347\" />\n         <node n=\"357\" />\n         <node n=\"356\" />\n         <node n=\"355\" />\n         <node n=\"354\" />\n         <node n=\"353\" />\n         <node n=\"352\" />\n         <node n=\"337\" />\n         <node n=\"336\" />\n         <node n=\"335\" />\n         <node n=\"334\" />\n         <node n=\"333\" />\n         <node n=\"332\" />\n         <node n=\"331\" />\n         <node n=\"321\" />\n         <node n=\"322\" />\n         <node n=\"323\" />\n         <node n=\"324\" />\n         <node n=\"325\" />\n         <node n=\"326\" />\n         <node n=\"327\" />\n         <node n=\"363\" />\n         <node n=\"362\" />\n         <node n=\"361\" />\n         <node n=\"360\" />\n         <node n=\"359\" />\n         <node n=\"358\" />\n         <node n=\"219\" />\n         <node n=\"220\" />\n         <node n=\"221\" />\n         <node n=\"222\" />\n         <node n=\"223\" />\n         <node n=\"224\" />\n         <node n=\"225\" />\n         <node n=\"30\" />\n         <node n=\"31\" />\n         <node n=\"32\" />\n         <node n=\"33\" />\n         <node n=\"34\" />\n         <node n=\"35\" />\n         <node n=\"36\" />\n      </boundary_polygon>\n   </cells>\n   <walls n=\"417\">\n      <wall length=\"20.733110376857802\" c1=\"0\" c2=\"2\" index=\"0\" n1=\"19\" n2=\"3\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"4.516653988297086\" c1=\"0\" c2=\"13\" index=\"1\" n1=\"3\" n2=\"4\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"26.408861679354164\" c1=\"0\" c2=\"15\" index=\"2\" n1=\"4\" n2=\"9\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.01859961813397\" c1=\"0\" c2=\"1\" index=\"3\" n1=\"15\" n2=\"19\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"19.728603001465636\" c1=\"1\" c2=\"2\" index=\"4\" n1=\"19\" n2=\"23\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"9.096978320024535\" c1=\"1\" c2=\"12\" index=\"5\" n1=\"23\" n2=\"25\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.379000526493293\" c1=\"1\" c2=\"14\" index=\"6\" n1=\"25\" n2=\"30\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.647922219764133\" c1=\"2\" c2=\"30\" index=\"7\" n1=\"37\" n2=\"42\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.117129331422348\" c1=\"2\" c2=\"13\" index=\"8\" n1=\"42\" n2=\"3\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.571201867682596\" c1=\"2\" c2=\"12\" index=\"9\" n1=\"23\" n2=\"37\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.281788160738632\" c1=\"3\" c2=\"11\" index=\"10\" n1=\"72\" n2=\"54\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"17.97757026275577\" c1=\"3\" c2=\"29\" index=\"11\" n1=\"54\" n2=\"58\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"18.191398173880792\" c1=\"3\" c2=\"20\" index=\"12\" n1=\"58\" n2=\"62\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.612635913761082\" c1=\"3\" c2=\"6\" index=\"13\" n1=\"62\" n2=\"67\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.771115465481856\" c1=\"3\" c2=\"30\" index=\"14\" n1=\"67\" n2=\"72\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"18.582457343588604\" c1=\"4\" c2=\"30\" index=\"15\" n1=\"73\" n2=\"76\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.494293525313154\" c1=\"4\" c2=\"13\" index=\"16\" n1=\"76\" n2=\"81\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"16.569985544163\" c1=\"4\" c2=\"27\" index=\"17\" n1=\"81\" n2=\"84\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"18.344553431569885\" c1=\"4\" c2=\"28\" index=\"18\" n1=\"84\" n2=\"87\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.521411993228003\" c1=\"4\" c2=\"6\" index=\"19\" n1=\"87\" n2=\"73\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.34418914710536\" c1=\"5\" c2=\"30\" index=\"20\" n1=\"92\" n2=\"96\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"20.597473879707866\" c1=\"5\" c2=\"10\" index=\"21\" n1=\"96\" n2=\"100\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.966662265934204\" c1=\"5\" c2=\"18\" index=\"22\" n1=\"100\" n2=\"104\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"14.060876946094535\" c1=\"5\" c2=\"17\" index=\"23\" n1=\"104\" n2=\"107\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.033136649869267\" c1=\"5\" c2=\"11\" index=\"24\" n1=\"107\" n2=\"92\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.692492842503263\" c1=\"6\" c2=\"30\" index=\"25\" n1=\"67\" n2=\"73\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"8.558002867201349\" c1=\"6\" c2=\"28\" index=\"26\" n1=\"87\" n2=\"117\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.03237848445233\" c1=\"6\" c2=\"21\" index=\"27\" n1=\"117\" n2=\"122\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"12.1074989024173\" c1=\"6\" c2=\"20\" index=\"28\" n1=\"122\" n2=\"62\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"16.86601678917694\" c1=\"7\" c2=\"30\" index=\"29\" n1=\"124\" n2=\"127\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.844590503804195\" c1=\"7\" c2=\"9\" index=\"30\" n1=\"127\" n2=\"132\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"9.405073116205314\" c1=\"7\" c2=\"25\" index=\"31\" n1=\"132\" n2=\"134\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"17.65223044026193\" c1=\"7\" c2=\"23\" index=\"32\" n1=\"134\" n2=\"137\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"9.68425697466901\" c1=\"7\" c2=\"22\" index=\"33\" n1=\"137\" n2=\"139\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.061119913809247\" c1=\"7\" c2=\"8\" index=\"34\" n1=\"139\" n2=\"124\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.875968825731775\" c1=\"8\" c2=\"30\" index=\"35\" n1=\"124\" n2=\"147\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.794440498307814\" c1=\"8\" c2=\"12\" index=\"36\" n1=\"147\" n2=\"152\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"19.063127739179926\" c1=\"8\" c2=\"26\" index=\"37\" n1=\"152\" n2=\"156\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.843383209085204\" c1=\"8\" c2=\"22\" index=\"38\" n1=\"156\" n2=\"139\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.866659320902393\" c1=\"9\" c2=\"30\" index=\"39\" n1=\"160\" n2=\"127\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.31487610207676\" c1=\"9\" c2=\"25\" index=\"40\" n1=\"132\" n2=\"167\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"16.47335794549509\" c1=\"9\" c2=\"24\" index=\"41\" n1=\"167\" n2=\"170\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.86868447941721\" c1=\"9\" c2=\"10\" index=\"42\" n1=\"170\" n2=\"160\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.15922546258165\" c1=\"10\" c2=\"30\" index=\"43\" n1=\"160\" n2=\"96\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"9.938510870408102\" c1=\"10\" c2=\"18\" index=\"44\" n1=\"100\" n2=\"179\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"27.885456383629638\" c1=\"10\" c2=\"19\" index=\"45\" n1=\"183\" n2=\"178\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"8.459801233287147\" c1=\"10\" c2=\"24\" index=\"46\" n1=\"183\" n2=\"170\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"8.82033806862994\" c1=\"11\" c2=\"29\" index=\"47\" n1=\"54\" n2=\"185\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.45784405593944\" c1=\"11\" c2=\"16\" index=\"48\" n1=\"185\" n2=\"189\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"13.479540404729843\" c1=\"11\" c2=\"17\" index=\"49\" n1=\"189\" n2=\"107\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.411125670769064\" c1=\"11\" c2=\"30\" index=\"50\" n1=\"92\" n2=\"72\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.509567822107932\" c1=\"12\" c2=\"14\" index=\"51\" n1=\"25\" n2=\"200\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"9.135123775510055\" c1=\"12\" c2=\"26\" index=\"52\" n1=\"200\" n2=\"152\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.66708991142204\" c1=\"12\" c2=\"30\" index=\"53\" n1=\"147\" n2=\"37\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"25.465019573895276\" c1=\"13\" c2=\"30\" index=\"54\" n1=\"76\" n2=\"42\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"25.618623448626167\" c1=\"13\" c2=\"15\" index=\"55\" n1=\"4\" n2=\"213\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"11.227497765219303\" c1=\"13\" c2=\"27\" index=\"56\" n1=\"213\" n2=\"81\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"25.88017076955309\" c1=\"14\" c2=\"26\" index=\"57\" n1=\"200\" n2=\"219\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"25.69622858852197\" c1=\"15\" c2=\"27\" index=\"58\" n1=\"232\" n2=\"213\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.997005106237452\" c1=\"16\" c2=\"29\" index=\"59\" n1=\"185\" n2=\"241\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"25.318064595112567\" c1=\"16\" c2=\"17\" index=\"60\" n1=\"247\" n2=\"189\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.32213238832164\" c1=\"17\" c2=\"18\" index=\"61\" n1=\"257\" n2=\"104\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"29.143855381214024\" c1=\"18\" c2=\"19\" index=\"62\" n1=\"265\" n2=\"178\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.730872054816903\" c1=\"19\" c2=\"24\" index=\"63\" n1=\"281\" n2=\"183\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.463853050650695\" c1=\"20\" c2=\"21\" index=\"64\" n1=\"122\" n2=\"290\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"22.73091935909152\" c1=\"20\" c2=\"29\" index=\"65\" n1=\"298\" n2=\"58\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"26.62383329989109\" c1=\"21\" c2=\"28\" index=\"66\" n1=\"117\" n2=\"308\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"26.63172417488766\" c1=\"22\" c2=\"23\" index=\"67\" n1=\"137\" n2=\"321\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"23.617265722810156\" c1=\"22\" c2=\"26\" index=\"68\" n1=\"327\" n2=\"156\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"26.27631890699267\" c1=\"23\" c2=\"25\" index=\"69\" n1=\"337\" n2=\"134\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"24.12238971030969\" c1=\"24\" c2=\"25\" index=\"70\" n1=\"347\" n2=\"167\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n      <wall length=\"21.693237810506325\" c1=\"27\" c2=\"28\" index=\"71\" n1=\"371\" n2=\"84\" wall_type=\"normal\" viz_flux=\"0\">\n         <transporters1 />\n         <transporters2 />\n      </wall>\n   </walls>\n   <nodesets n=\"0\" />\n   <settings>\n      <setting val=\"true\" name=\"show_cell_centers\" />\n      <setting val=\"false\" name=\"show_nodes\" />\n      <setting val=\"false\" name=\"show_node_numbers\" />\n      <setting val=\"true\" name=\"show_cell_numbers\" />\n      <setting val=\"false\" name=\"show_borders_cells\" />\n      <setting val=\"false\" name=\"show_cell_axes\" />\n      <setting val=\"false\" name=\"show_cell_strain\" />\n      <setting val=\"false\" name=\"show_fluxes\" />\n      <setting val=\"false\" name=\"show_walls\" />\n      <setting val=\"false\" name=\"save_movie_frames\" />\n      <setting val=\"false\" name=\"show_only_leaf_boundary\" />\n      <setting val=\"true\" name=\"cell_growth\" />\n      <setting val=\"false\" name=\"hide_cells\" />\n   </settings>\n</leaf>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/leaves/cambium_updated.xml b/data/leaves/cambium_updated.xml
--- a/data/leaves/cambium_updated.xml	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/data/leaves/cambium_updated.xml	(date 1745860595601)
@@ -5,7 +5,7 @@
       <par val="10" name="arrowsize" />
       <par val="black" name="textcolor" />
       <par val="3" name="cellnumsize" />
-      <par val="1" name="nodenumsize" />
+      <par val="3" name="nodenumsize" />
       <par val="1" name="node_mag" />
       <par val="1" name="outlinewidth" />
       <par val="forestgreen" name="cell_outline_color" />
@@ -1445,7 +1445,7 @@
          <wall w="59" />
          <wall w="65" />
       </cell>
-      <cell boundary="0" cell_type="3" target_area="5565.81812591105" lambda_celllength="0.0" at_boundary="true" dead="false" target_length="0" stiffness="100000000000.0" index="30" source="false" pin_fixed="false" area="5565.81812591105" fixed="false" div_counter="0">
+      <cell boundary="0" cell_type="3" target_area="5565.81812591105" lambda_celllength="0.0" at_boundary="false" dead="false" target_length="0" stiffness="1.0" index="30" source="false" pin_fixed="false" area="5565.81812591105" fixed="false" div_counter="0">
          <node n="113" />
          <node n="112" />
          <node n="67" />
Index: src/Models/Cambium/cambium.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  This file is part of the Virtual Leaf.\n *\n *  The Virtual Leaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  The Virtual Leaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n#include <QObject>\n#include <QtGui>\n\n#include \"parameter.h\"\n\n#include \"wallbase.h\"\n#include \"cellbase.h\"\n#include \"cambium.h\"\n#include \"node.h\"\n\nstatic const std::string _module_id(\"$Id$\");\n\n/*\nCell Types and Their Behavior:\n\nCellType(0) : Bark Cells\n- Can grow slightly (prevents potential bugs if restricted completely).\n- Cannot divide.\n- Stiffness = 10 × Cambium stiffness.\n\nCellType(1) : Cambium Cells\n- Can grow until a specific threshold is reached.\n- Upon reaching the threshold, the cell divides:\n    - If only one daughter cell is in contact with the bark, it becomes CellType(1) (Cambium), and the other becomes CellType(2) (Growing Xylem).\n    - If both daughter cells are in contact with the bark, both become CellType(1).\n\nCellType(2) : Growing Xylem Cells\n- Can grow until they reach a threshold of 3 × BaseArea().\n- Cannot divide.\n- When growth limit is reached, they transform into CellType(3) (Mature Xylem).\n\nCellType(3) : Mature Xylem Cells\n- Cannot grow or divide.\n- Stiffness = 100 × Cambium stiffness.\n*/\n\n\n\nQString cambium::ModelID(void) {\n  // specify the name of your model here\n  return QString( \"Cambium\" );\n}\n\n// return the number of chemicals your model uses\nint cambium::NChem(void) { return 0; }\n// Constructor - add this code to initialize the bark_cells vector\ncambium::cambium() {\n    // Initialize bark cells with the original values\n    bark_cells = {0, 15, 27, 28, 21, 20, 29, 16, 17, 18, 19, 24, 25, 23, 22, 26, 14, 1};\n}\n\n// To be executed after cell division\n\nvoid cambium::AfficherNoeuds(CellBase *c) {\n    qDebug() << \"=== INFORMATIONS DES NOEUDS DE LA CELLULE \" << c->Index() << \" ===\";\n    qDebug() << \"Type de cellule: \" << c->CellType();\n    qDebug() << \"Nombre total de noeuds: \" << c->getNodes().size();\n\n    int i = 0;\n    for (list<Node *>::const_iterator it = c->getNodes().begin(); it != c->getNodes().end(); ++it, ++i) {\n        Node* noeud = *it;\n        qDebug() << \"Nœud \" << noeud->Index() << \":\";\n\n        qDebug() << \"  - À la frontière: \" << (noeud->BoundaryP() ? \"Oui\" : \"Non\");\n\n    }\n    qDebug() << \"=========================================\";\n}\n\nvoid cambium::SetCellTypeProperties(CellBase *c) { // Set cell properties\n/* SetLambdaLength => Cette propriété fout la merde partout :\n    -les cellules \"coulent\" avec une valeur élevée(>2)\n    -une valeur très faible pour l'écorce (<0.01) fait que les cellules ne s'immmicent pas entre les cellules d'écorce\nNormal c'est le coefficient d'élasticité de la paroi donc elle peut s'allnger de lambda* la valeut initiiale (?)\n*/\n  if (c->CellType()==0){\n    c-> SetWallStiffness(3);\n    c-> SetLambdaLength(0);\n  }\n  else if (c->CellType()==1){\n    c-> SetWallStiffness(1);\n    c-> SetLambdaLength(0);\n  }\n  else if (c->CellType()==2){\n    c-> SetWallStiffness(1);\n    c-> SetLambdaLength(0);\n  }\n  else {\n    c-> SetWallStiffness(1);\n    c-> SetLambdaLength(0);\n  }\n}\n\n\n\n\nvoid cambium::SetCellColor(CellBase *c, QColor *color) {\n  //cell Coloring depending on type\n  if (c->CellType()==0){\n      if (c->Area() < 0.8 * c->BaseArea()) {\n           color->setNamedColor(\"yellow\");\n      }\n      else {\n           color->setNamedColor(\"brown\");\n      }\n  }\n  else if (c->CellType()==1){\n        color->setNamedColor(\"red\");\n  }\n  else if (c->CellType()==2){\n        color->setNamedColor(\"lightblue\");\n  }\n  else {\n        color->setNamedColor(\"blue\");\n  }\n}\n\n\nvoid cambium::OnDivide(ParentInfo *parent_info, CellBase *daughter1, CellBase *daughter2) {\n    // Rules to be executed after cell division go here\n    // (e.g., cell differentiation rules)\n\n// Partie division de la solution n°1 à propos des cellules de cambium\n//qui touchent l'extérieur\n\n    // Vérifier si c'est une division spéciale\n    int parent_id1 = daughter1->Index(); // Récupérer l'ID de la cellule mère via une fille\n    int parent_id2 = daughter2->Index();\n    if (special_division_cells.find(parent_id1) != special_division_cells.end() or special_division_cells.find(parent_id2) != special_division_cells.end() ) {\n        // Déterminer quelle cellule fille est plus proche de l'extérieur\n        bool d1_more_exposed = false;\n        bool d2_more_exposed = false;\n\n        // Compter les nœuds exposés pour chaque cellule fille\n        int d1_exposed_nodes = 0;\n        int d2_exposed_nodes = 0;\n\n        for (auto node_it = daughter1->getNodes().begin(); node_it != daughter1->getNodes().end(); ++node_it) {\n            if ((*node_it)->BoundaryP()) d1_exposed_nodes++;\n        }\n\n        for (auto node_it = daughter2->getNodes().begin(); node_it != daughter2->getNodes().end(); ++node_it) {\n            if ((*node_it)->BoundaryP()) d2_exposed_nodes++;\n        }\n\n        d1_more_exposed = (d1_exposed_nodes > d2_exposed_nodes);\n        d2_more_exposed = (d2_exposed_nodes > d1_exposed_nodes);\n\n        // Transformer la cellule plus exposée en écorce, l'autre reste cambium\n        if (d1_more_exposed) {\n            daughter1->SetCellType(0);  // Écorce\n            daughter2->SetCellType(1);  // Cambium\n\n            // Ajouter la nouvelle cellule d'écorce à notre liste\n            bark_cells.push_back(daughter1->Index());\n        } else {\n            daughter1->SetCellType(1);  // Cambium\n            daughter2->SetCellType(0);  // Écorce\n\n            // Ajouter la nouvelle cellule d'écorce à notre liste\n            bark_cells.push_back(daughter2->Index());\n        }\n\n        // Supprimer la cellule de notre ensemble après traitement\n        special_division_cells.erase(parent_id1);\n        special_division_cells.erase(parent_id2);\n        return;\n    }\n\n\n    // Construct neighbor lists for both daughter cells\n    daughter1->GetNeighborIndices();\n    daughter2->GetNeighborIndices();\n    // Get neighbor indices for both daughter cells\n    std::vector<int> d1_neighbor_indices = daughter1->GetNeighborIndices();\n    std::vector<int> d2_neighbor_indices = daughter2->GetNeighborIndices();\n\n    // Check if daughter cells are neighbors with any bark cells\n    bool d1_neighbors_bark = false;\n    bool d2_neighbors_bark = false;\n\n    // Check daughter1's neighbors\n    for (auto idx : d1_neighbor_indices) {\n        if (std::find(bark_cells.begin(), bark_cells.end(), idx) != bark_cells.end()) {\n            d1_neighbors_bark = true; // daughter1 has a neighbor bark cell\n            //qDebug() << \"Daughter1 (ID:\" << daughter1->Index() << \") is neighbor with bark cell ID:\" << idx;\n        }\n    }\n\n    // Check daughter2's neighbors\n    for (auto idx : d2_neighbor_indices) {\n        if (std::find(bark_cells.begin(), bark_cells.end(), idx) != bark_cells.end()) {\n            d2_neighbors_bark = true; // daughter1 has a neighbor bark cell\n            //qDebug() << \"Daughter2 (ID:\" << daughter2->Index() << \") is neighbor with bark cell ID:\" << idx;\n        }\n    }\n\n    // Handle the case where both daughter cells are neighbors to bark cells\n    if (d1_neighbors_bark && d2_neighbors_bark) {\n        // Both cells become type 1 (Cambium cells)\n        daughter1->SetCellType(1);\n        daughter2->SetCellType(1);\n    }\n    // Handle cases where only one daughter cell is neighbor to bark cells\n    else if (d1_neighbors_bark) { // Daughter 1 is neighbor to a bark cell\n        daughter1->SetCellType(1); // Daughter 1 becomes a Cambium cell on division\n        daughter2->SetCellType(2); // Daughter 2 becomes a Growing Xylem on division\n    }\n    else if (d2_neighbors_bark) {// Daughter 2 is neighbor to a bark cell\n        daughter1->SetCellType(2);// Daughter 1 becomes a Growing Xylem on division\n        daughter2->SetCellType(1);// Daughter 2 becomes a Cambium cell on division\n    }\n    else { // Neither are neighbor to a bark cell.\n        daughter1->SetCellType(2);// Daughter 1 becomes a Growing Xylem cell on division\n        daughter2->SetCellType(2);// Daughter 2 becomes a Growing Xylem cell on division\n    }\n    /*\n    // Debug print to confirm new cell types\n    qDebug() << \"New cell types - Daughter1 (ID:\" << daughter1->Index() << \") is now type:\" << daughter1->CellType()\n             << \", Daughter2 (ID:\" << daughter2->Index() << \") is now type:\" << daughter2->CellType();\n    */\n    /*\n    // Print all bark cell IDs after division\n    qDebug() << \"Bark cells after division:\" << bark_cells.size() << \"cells:\";\n    QStringList bark_ids;\n    for (auto id : bark_cells) {\n        bark_ids << QString::number(id);\n    }\n    qDebug() << \"Barks cells :\" << bark_cells.size()  << \"cell IDs: [\" << bark_ids.join(\", \") << \"]\";\n    */\n}\n\n\n\n\nvoid cambium::CellHouseKeeping(CellBase *c) { // How cells behave after division\n  SetCellTypeProperties(c);\n /*//See value of lambda_length prperty (i.e Spring constant of wall elements, idk the difference between this and wall stiffness)\n qDebug() << \"Processing cell in CellHouseKeeping. Cell ID:\" << c->Index()\n           << \", Type:\" << c->CellType()\n           << \", Lambda_Length:\" << c->GetLambdaLength();*/\n  /*// See value of the wall stiffness property\n  qDebug() << \"Processing cell in CellHouseKeeping. Cell ID:\" << c->Index()\n           << \", Type:\" << c->CellType()\n           << \", Wall Stiffness:\" << c->GetWallStiffness();*/\n\n\n  // Check if a cambium cell is no longer adjacent to the bark, if not it has to be transformed into a Growing Xylem cell\n\nif (c->CellType() == 1) {\n\n/* Solution n°1 au problème du cambium qui touche l'extérieur :\nla cellule de cambium se divise en deux et la cellule la plus a l'extérieur\nse transforme en cellule d'écorce.\nC'est pas forcément la bonne approche mais ça fonctionne.\nVoir solution n°2 dans la méthode CellHouseKeeping partie CellType(0)\n*/\n\n    // Vérifier si des nœuds de la cellule sont exposés à l'extérieur\n    bool nodeExposed = false;\n    Node* exposedNode = nullptr;\n    Vector boundaryDirection;\n    AfficherNoeuds(c);\n\n    // Parcourir tous les nœuds de la cellule\n    for (list<Node *>::const_iterator it = c->getNodes().begin(); it != c->getNodes().end(); ++it) {\n        Node* noeud = *it;\n        if (noeud->BoundaryP()) {  // Correction: noeud au lieu de node\n            nodeExposed = true;\n            exposedNode = noeud;\n\n            qDebug() << \"=== DIVISION CELLULE EXPOSÉE ===\";\n            qDebug() << \"Cellule cambium ID:\" << c->Index() << \"a un nœud exposé\";\n\n            // Forcer la division selon cet axe\n            c->Divide();\n\n            // OnDivide s'occupera du reste\n            special_division_cells.insert(c->Index());\n            return;  // Sortir après avoir initié la division\n        }\n    }\n\n    // Si aucun nœud exposé n'a été trouvé\n    if (!nodeExposed) {\n        qDebug() << \"Aucun nœud exposé trouvé pour la cellule cambium ID:\" << c->Index();\n    }\n\n/* Solution pour les cellules de cambium qui se retrouvent au milieu\ndu tissu de Xylème :\n- It does't work because for the new isolated bark cell, the program still consider a bark cell as a neighbor,\nto resolve this issue actualize the neighbor cell list.\n\n\n    std::vector<int> neighbor_indices = c->GetNeighborIndices();\n    //c->SetWallStiffness(1.0);\n    // Check if at least one neighbor is a bark cell\n    bool has_bark_neighbor = false;\n    for (auto idx : neighbor_indices) {\n      if (std::find(bark_cells.begin(), bark_cells.end(), idx) != bark_cells.end()) {\n        has_bark_neighbor = true;\n        break;\n      }\n    }\n\n    // Logs if cambium cell has no neighbor bark cell before transforming it into bark cell\n    if (!has_bark_neighbor) {\n      qDebug() << \"=== CAMBIUM ISOLÉ DÉTECTÉ ===\";\n      qDebug() << \"Cellule ID:\" << c->Index() << \", Area:\" << c->Area() << \", BaseArea:\" << c->BaseArea();\n      qDebug() << \"Position: (\" << c->Centroid().x << \",\" << c->Centroid().y << \")\";\n\n      // Liste des indices des voisins (sans accéder aux objets voisins)\n      qDebug() << \"Indices des\" << neighbor_indices.size() << \"voisins:\";\n      for (auto idx : neighbor_indices) {\n        qDebug() << \"  - Voisin ID:\" << idx;\n      }\n\n      // Vérifie si les voisins sont des cellules d'écorce\n      qDebug() << \"Vérification bark_cells:\";\n      for (auto bark_idx : bark_cells) {\n        qDebug() << \"  - Bark cell ID:\" << bark_idx;\n      }\n\n      qDebug() << \"Analyse: La cellule cambium est isolée, transformation en Growing Xylem (type 2)\";\n      qDebug() << \"==============================\";\n\n      c->SetCellType(2);\n\n      return;\n\n    }\n*/\n\n    // Normal behavior for cambium cells\n    c->EnlargeTargetArea(par->cell_expansion_rate);\n    if (c->Area() > par->rel_cell_div_threshold * c->BaseArea()) {\n      c->Divide();\n    }\n  }\n  else if(c->CellType() == 2) { // If cell is a type 2, grow until it reach 3*BaseArea then transform into a Type 3\n\n    if (c->Area() < 3 * c->BaseArea()) {\n      c->EnlargeTargetArea(par->cell_expansion_rate);\n    }\n    else {\n      c->SetCellType(3); // Set grown Type 2 cell to a Type 3\n\n    }\n  }\n  else if (c->CellType() == 0) {\n/* If the cell is a bark cell (i.e., type 0), we need to slightly enlarge it to prevent excessive stretching,\n   which could cause issues in the simulation. This adjustment ensures stability during runtime. */\n\n    double perimeter = c->ExactCircumference(); // perimètre de ma cellule\n    double area = c->Area();\n    double ratio = perimeter / sqrt(area);\n\n    if (ratio > 6.0) {\n        // La cellule est trop déformée, augmenter sa rigidité\n        c->SetWallStiffness(c->GetWallStiffness() * 1.5);\n        // Forcer une légère expansion\n        c->EnlargeTargetArea(2.0 * par->cell_expansion_rate);\n\n        }\n    }\n    //if ()\n\n}\n\nvoid cambium::CelltoCellTransport(Wall *w, double *dchem_c1, double *dchem_c2) {\n  // add biochemical transport rules here\n}\nvoid cambium::WallDynamics(Wall *w, double *dw1, double *dw2) {\n  // add biochemical networks for reactions occuring at walls here\n}\nvoid cambium::CellDynamics(CellBase *c, double *dchem) {\n  // add biochemical networks for intracellular reactions here\n}\n#include <set>  // Ajoutez cet include en haut du fichier\n\n\n\n\n//Q_EXPORT_PLUGIN2(cambium, cambium)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Models/Cambium/cambium.cpp b/src/Models/Cambium/cambium.cpp
--- a/src/Models/Cambium/cambium.cpp	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/Models/Cambium/cambium.cpp	(date 1746540008374)
@@ -95,7 +95,7 @@
 Normal c'est le coefficient d'élasticité de la paroi donc elle peut s'allnger de lambda* la valeut initiiale (?)
 */
   if (c->CellType()==0){
-    c-> SetWallStiffness(3);
+    c-> SetWallStiffness(1);
     c-> SetLambdaLength(0);
   }
   else if (c->CellType()==1){
@@ -140,7 +140,7 @@
 void cambium::OnDivide(ParentInfo *parent_info, CellBase *daughter1, CellBase *daughter2) {
     // Rules to be executed after cell division go here
     // (e.g., cell differentiation rules)
-
+/*
 // Partie division de la solution n°1 à propos des cellules de cambium
 //qui touchent l'extérieur
 
@@ -187,7 +187,7 @@
         special_division_cells.erase(parent_id2);
         return;
     }
-
+    */
 
     // Construct neighbor lists for both daughter cells
     daughter1->GetNeighborIndices();
@@ -276,7 +276,7 @@
 C'est pas forcément la bonne approche mais ça fonctionne.
 Voir solution n°2 dans la méthode CellHouseKeeping partie CellType(0)
 */
-
+    /*
     // Vérifier si des nœuds de la cellule sont exposés à l'extérieur
     bool nodeExposed = false;
     Node* exposedNode = nullptr;
@@ -306,7 +306,7 @@
     if (!nodeExposed) {
         qDebug() << "Aucun nœud exposé trouvé pour la cellule cambium ID:" << c->Index();
     }
-
+    */
 /* Solution pour les cellules de cambium qui se retrouvent au milieu
 du tissu de Xylème :
 - It does't work because for the new isolated bark cell, the program still consider a bark cell as a neighbor,
Index: src/GUI/cell.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  $Id$\n *\n *  This file is part of the Virtual Leaf.\n *\n *  VirtualLeaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  VirtualLeaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n#ifndef _CELL_H_\n#define _CELL_H_\n\n#include <list>\n#include <vector>\n#include <iostream>\n#include <QString>\n#include \"vector.h\"\n#include \"parameter.h\"\n#include \"wall.h\"\n#include \"warning.h\"\n#include \"cellbase.h\"\n#include \"Neighbor.h\"\n//#include \"cell.h\"\n\n#include <QGraphicsScene>\n#include <qcolor.h>\n#include <QObject>\n#include <QMouseEvent>\n\nenum DivisionAxisType { // Division selon un axe bien défini,  Rajout Rouges 2025\n  SHORTEST_AXIS = 0,\n  LONGEST_AXIS = 1,\n  RANDOM_AXIS = 2,\n  MECHANICAL_AXIS = 3\n};\n\nclass Cell : public CellBase \n{\n\n  Q_OBJECT\n    friend class Mesh;\n  friend class FigureEditor;\n\n public:\n  Cell(double x, double y, double z = 0.);\n  Cell(void);\n  Cell(const Cell &src);\n  Cell operator=(const Cell &src);\n  bool Cmp(Cell*) const;\n  bool Eq(Cell*) const;\n\n  inline bool IndexEquals(int i) { return i == index; }\n\n  static void SetMagnification(const double &magn) {\n    factor=magn;\n  }\n  static Vector Offset(void) {\n    Vector offs;\n    offs.x=offset[0];\n    offs.y=offset[1];\n    return offs;\n  }\n\n  static void Translate(const double &tx,const double &ty) {\n    offset[0]+=tx;\n    offset[1]+=ty;\n  }\n\n  inline static double Factor(void) {\n    return factor;\n  }\n  static void setOffset(double ox, double oy) {\n    offset[0]=ox;\n    offset[1]=oy;\n  }\n  static double Magnification(void) {\n    return factor;\n  }\n\n  static double Scale(const double scale) {\n    factor*=scale;\n    return factor;\n  }\n  void Divide(void); // Divide cell over a chosen axis, Rajout Rouges 2025\n    Vector CalculateDivisionAxis(void);\n\n  void DivideOverAxis(Vector axis); // divide cell over axis\n\n  // divide over the line (if line and cell intersect)\n  bool DivideOverGivenLine(const Vector v1, const Vector v2, bool wall_fixed = false, NodeSet *node_set = 0);\n\n\n  /*void Divide(void) { // Divide cell over short axis\n\n    Vector long_axis;\n    Length(&long_axis);\n    DivideOverAxis(long_axis.Perp2D());\n  }\n*/\n\n\n\n\n  //void CheckForGFDrivenDivision(void);\n  inline int NNodes(void) const { return nodes.size(); }\n\n  void Move(Vector T);\n  void Move(double dx, double dy, double dz=0) {\n    Move( Vector (dx, dy, dz) );\n  }\n\n  double Displace(double dx, double dy, double dh);\n  void Displace(void);\n  double Energy(void) const;\n  bool SelfIntersect(void);\n  bool MoveSelfIntersectsP(Node *nid, Vector new_pos);\n  bool LinePieceIntersectsP(const Vector v1, const Vector v2) const;\n  bool IntersectsWithLineP(const Vector v1, const Vector v2);\n\n  void XMLAdd(QDomDocument &doc, QDomElement &cells_node) const;\n\n  void ConstructWalls(void);\n  void Flux(double *flux, double *D);\n\n  void OnClick(QMouseEvent *e);\n  inline Mesh& getMesh(void) const { return *m; }\n  double MeanArea(void);\n\n  void Apoptose(void); // Cell kills itself\n  list<Wall *>::iterator RemoveWall( Wall *w );\n  void AddWall( Wall *w );\n\n  void Draw(QGraphicsScene *c, bool showStiffness, QString tooltip = \"\");\n\n  // Draw a text in the cell's center\n  void DrawText(QGraphicsScene *c, const QString &text) const;\n  void DrawIndex(QGraphicsScene *c) const;\n  void DrawCenter(QGraphicsScene *c) const;\n  void DrawNodes(QGraphicsScene *c) const;\n  void DrawMiddleLamella(QGraphicsScene *c, QString tooltip = \"\");\n\n  void DrawAxis(QGraphicsScene *c) const;\n  void DrawStrain(QGraphicsScene *c) const;\n  void DrawFluxes(QGraphicsScene *c, double arrowsize = 1.);\n  void DrawWalls(QGraphicsScene *c) const;\n  void DrawValence(QGraphicsScene *c) const;\n  void EmitValues(double t);\n  void insertNodeAfterFirst(NodeBase * position1, NodeBase * position2, NodeBase * newNode);\n  virtual void correctNeighbors();\n  virtual WallBase* newWall(NodeBase* from,NodeBase* to,CellBase * other);\n  virtual void InsertWall( WallBase *w );\n  virtual CellBase* getOtherWallElementSide(NodeBase * spikeEnd,NodeBase * over);\n  virtual double elastic_limit();\n\n signals:\n  void ChemMonValue(double t, double *x);\n\n protected:\n  void XMLAddCore(QDomDocument &doc, QDomElement &xmlcell) const;\n  int XMLRead(QDomElement &cur);\n  void DivideWalls(ItList new_node_locations, const Vector from, const Vector to, bool wall_fixed = false, NodeSet *node_set = 0);\n\n private:\n\n  static QPen *cell_outline_pen;\n  static double offset[3];\n  static double factor;\n  Mesh *m;\n  void ConstructConnections(void);\n  void SetWallLengths(void);\n  void checkCellLooseWallEnds(Wall * wall,bool&n1Connected,bool&n2Connected);\n  Node * followNeighborsToWall(Node * n1, Node * n2, double &distance);\n  Neighbor getNeighbor(Node * node);\n  Wall* getBoundaryWallAt(Node * node);\n  Node * attachFreeWallEnd(Cell * cellWithOtherWalls, Cell * cellWithSingleWalls, Wall * wall, Node * loseWallNode);\n  Wall * findWall(Node * n1, Node * n2);\n  void splittWallElementsBetween(Node* node, Cell* daughter);\n\n  void findBeforeAfter(Node * node, Node ** before, Node**after);\n  Cell* findOtherCell(Cell*other,  Node * node,  Node * node2);\n  Cell* findNeighbourCellOnDivide(Cell* daughter,Node* node,Node * before1,Node * after1 ,Node * before2,Node * after2);\n\n};\n\n\n// Boundarypolygon is a special cell; will not increase ncells\n//  and will not be part of Mesh::cells\nclass BoundaryPolygon : public Cell {\n\n public:\n BoundaryPolygon(void) : Cell() {\n    NCells()--;\n    index=-1;\n  }\n\n BoundaryPolygon(double x,double y,double z=0) : Cell (x,y,z) {\n    NCells()--;\n    index=-1;\n  }\n\n  BoundaryPolygon &operator=(Cell &src) {\n    Cell::operator=(src);\n    index=-1;\n    return *this;\n  }\n  virtual void Draw(QGraphicsScene *c, QString tooltip = \"\");\n\n  virtual void XMLAdd(QDomDocument &doc, QDomElement &parent_node) const;\n\n  virtual bool BoundaryPolP(void) const { return true; } \n};\n\n#endif\n\n/* finis */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/cell.h b/src/GUI/cell.h
--- a/src/GUI/cell.h	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/GUI/cell.h	(date 1746622456538)
@@ -95,8 +95,9 @@
     factor*=scale;
     return factor;
   }
-  void Divide(void); // Divide cell over a chosen axis, Rajout Rouges 2025
-    Vector CalculateDivisionAxis(void);
+
+//  void Divide(void); // Divide cell over a chosen axis, Rajout Rouges 2025
+//    Vector CalculateDivisionAxis(void);
 
   void DivideOverAxis(Vector axis); // divide cell over axis
 
@@ -104,13 +105,13 @@
   bool DivideOverGivenLine(const Vector v1, const Vector v2, bool wall_fixed = false, NodeSet *node_set = 0);
 
 
-  /*void Divide(void) { // Divide cell over short axis
+  void Divide(void) { // Divide cell over short axis
 
     Vector long_axis;
     Length(&long_axis);
     DivideOverAxis(long_axis.Perp2D());
   }
-*/
+
 
 
 
Index: src/GUI/cell.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  This file is part of the Virtual Leaf.\n *\n *  VirtualLeaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  VirtualLeaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n#include <QDebug>\n\n#include <string>\n#include \"pi.h\"\n#include \"cell.h\"\n#include \"node.h\"\n#include \"mesh.h\"\n#include \"tiny.h\"\n#include \"nodeset.h\"\n#include \"cellitem.h\"\n#include \"nodeitem.h\"\n#include \"qcanvasarrow.h\"\n#include \"parameter.h\"\n\n\nstatic const std::string _module_id(\"$Id$\");\n\nextern Parameter par;\n\ndouble Cell::factor=1.;\ndouble Cell::offset[3]={0,0,0};\n\nCell::Cell(void) : CellBase()\n{\n  m=0;\n}\n\nCell::Cell(double x, double y, double z) : CellBase(x,y,z)\n{\n  m=0;\n}\n\nCell::Cell(const Cell &src) :  CellBase(src)\n{\n  m=src.m;\n}\n\nbool Cell::Cmp(Cell *c) const { return this->Index() < c->Index(); }\nbool Cell::Eq(Cell *c) const { return this->Index() == c->Index(); }\n\nCell Cell::operator=(const Cell &src) \n{\n  CellBase::operator=(src);\n  m=src.m;\n  return *this;\n}\n\n\nDivisionAxisType axis_type = static_cast<DivisionAxisType>(par.division_axis_type);\nVector Cell::CalculateDivisionAxis(void) {\n    // Déclaration des variables locales\n    Vector axis;\n    Vector long_axis;\n    double width = 0.0;\n     switch(static_cast<DivisionAxisType>(par.division_axis_type)) {\n        case SHORTEST_AXIS:\n            // Calculer le grand axe puis prendre sa perpendiculaire\n            Length(&long_axis, &width);\n            axis = long_axis.Perp2D();\n            break;\n        }\n        case LONGEST_AXIS: {\n            // Utiliser le grand axe\n            Length(&long_axis, &width);\n            axis = long_axis;\n            break;\n        }\n        case RANDOM_AXIS: {\n            // Générer un axe aléatoire\n            double angle = 2 * Pi * RANDOM();\n            axis = Vector(cos(angle), sin(angle), 0);\n            break;\n        }\n        /*case MECHANICAL_AXIS: {\n            // Calcul basé sur les contraintes mécaniques\n            Vector stress_direction;\n\n            // Sommation des forces sur tous les nœuds\n            for (list<Node*>::iterator i = nodes.begin(); i != nodes.end(); i++) {\n                stress_direction += (*i)->CalcForce();\n            }\n\n            if (stress_direction.Norm() > 1e-6) {\n                // Direction perpendiculaire à la contrainte principale\n                axis = stress_direction.Normalised().Perp2D();\n            } else {\n                // Par défaut, utiliser le grand axe\n                Length(&long_axis, &width);\n                axis = long_axis;\n            }\n            break;\n        }*/\n        default: {\n            // Par défaut, utiliser le petit axe\n            Length(&long_axis, &width);\n            axis = long_axis.Perp2D();\n            break;\n        }\n    }\n\n    // Définir division_axis pour la cellule si nécessaire\n    if (division_axis) {\n        *division_axis = axis;\n    }\n\n    return axis;\n}\n\nvoid Cell::Divide(void) {\n    Vector division_axis = CalculateDivisionAxis();\n    DivideOverAxis(division_axis);\n}\n\n\n\nvoid Cell::DivideOverAxis(Vector axis) \n{\n  // Build a wall\n  // ->  find the position of the wall\n\n  // better look for intersection with a simple line intersection algorithm as below?\n  // this leads to some exceptions: e.g. dividing a horizontal rectangle.\n  // leaving it like this for the time being\n\n  if (dead) return;\n\n  Vector centroid=Centroid();\n  double prev_cross_z=(axis * (centroid - *(nodes.back()) ) ).z ;\n\n  ItList new_node_locations;\n\n  for (list<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n\n    // cross product to detect position of division\n    Vector cross = axis * (centroid - *(*i));\n\n    if (cross.z * prev_cross_z < 0 ) {\n\n      new_node_locations.push_back(i);\n\n    }\t\t\n    prev_cross_z=cross.z;\n  }\n\n  DivideWalls(new_node_locations, centroid, centroid+axis);\n}\n\ndouble Cell::MeanArea(void)\n{\n  return m->MeanArea();\n}\n\n\nvoid Cell::Apoptose(void)\n{\n  // First kill walls\n#ifdef QDEBUG\n  qDebug() << \"This is cell \" << Index() << endl;\n  qDebug() << \"Number of walls: \" << walls.size() << endl;\n#endif\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n#ifdef QDEBUG\n    qDebug() << \"Before apoptosis, wall \" << (*w)->Index() << \" says: c1 = \"\n\t     << (*w)->c1->Index() << \", c2 = \" << (*w)->c2->Index() << endl;\n#endif\n  }\n  for (list<Wall *>::iterator w=walls.begin(); w!=walls.end(); w++) {\n\n#ifdef QDEBUG\n    bool illegal_flag = false;\n    if ((*w)->c1 == (*w)->c2 )\n      illegal_flag=true;\n#endif\n    if ((*w)->c1 == this) {\n\n      // invert wall?\n      (*w)->c1 = (*w)->c2;      \n      (*w)->c2 = m->boundary_polygon;\n\n      Node *n1 = (*w)->n1;\n      (*w)->n1 = (*w)->n2;\n      (*w)->n2 = n1;\n\n    } else {\n      (*w)->c2 = m->boundary_polygon;\n    }\n\n#ifdef QDEBUG\n    if (illegal_flag && (*w)->c1==(*w)->c2) {\n      qDebug() << \"I created an illegal wall.\" << endl;\n    }\n#endif\n\n    if ( ((*w)->N1()->DeadP() || (*w)->N2()->DeadP()) ||\n\t ((*w)->C1() == (*w)->C2() ) ){\n      // kill wall\n#ifdef QDEBUG\n      qDebug() << \"Killing wall.\" << endl;\n#endif\n      (*w)->Kill();\n\n#ifdef QDEBUG\n      if ((*w)) {\n\tqDebug() << \"Wall \" << (*w)->Index() << \" says: c1 = \" \n\t\t << (*w)->c1->Index() << \", c2 = \" << (*w)->c2->Index() << endl;\n      }\n#endif\n      (*w)=0;\n    } else {\n#ifdef QDEBUG\n      qDebug() << \"Not killing wall.\" << endl;\n      qDebug() << \"Wall \" << (*w)->Index() << \" says: c1 = \" \n\t       << (*w)->c1->Index() << \", c2 = \" << (*w)->c2->Index() << endl;\n#endif\n    }\n  }\n  walls.remove(0);\n\n  // Unregister me from my nodes, and delete the node if it no longer belongs to any cells\n  list<Node *> superfluous_nodes;\n  for (list<Node *>::iterator n=nodes.begin(); n!=nodes.end(); n++) {\n\n    Node &no(*(*n));\n    // locate myself in the node's owner list\n    list<Neighbor>::iterator cellpos;\n    bool cell_found=false;\n    for (list<Neighbor>::iterator nb=no.owners.begin(); nb!=no.owners.end(); nb++) {\n      if (nb->cell == this) {\n\tcellpos = nb;\n\tcell_found = true;\n\tbreak;\n      }\n    }\n\n    if (!cell_found) {\n      // I think this cannot happen; but if I am wrong, unpredictable things would happen. So throw an exception.\n      throw (\"Cell not found in CellBase::Apoptose()\\n\\rPlease correct the code to handle this situation.\");\n    }\n\n    Neighbor tmp = *cellpos;\n    no.owners.erase(cellpos);\n\n    // if node has no owners left, or only has a connection to special cell -1 (outside world), mark it as dead.\n\n    if (no.owners.size()==0 || (no.owners.size()==1 && no.owners.front().cell->BoundaryPolP()) ) {\n      no.MarkDead();\n    } else {\n      // register node with outside world\n      if (find_if( no.owners.begin(), no.owners.end(), \n\t\t   [this](auto neighbor){return neighbor.CellEquals(m->boundary_polygon->Index());} ) == no.owners.end() ) {\n\ttmp.cell = m->boundary_polygon;\n\tno.owners.push_back(tmp);\n      }\n    }\n  }\n\n  // mark cell as dead\n  MarkDead();\n}\n\nvoid Cell::ConstructConnections(void)\n{\n  // Tie up the nodes of this cell, assuming they are correctly ordered\n\n  //cerr << \"Constructing connections of cell \" << index << endl;\n\n  for (list<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n\n    //cerr << \"Connecting node \" << *i << endl;\n    //cerr << \"Node \" << *i << endl << \" = \" << *(*i) << endl;\n    // 1. Tidy up existing connections (which are part of this cell)\n    if ((*i)->owners.size()>0) {\n      list<Neighbor>::iterator neighb_with_this_cell=\n\t// remove myself from the neighbor list of the node\n\tfind_if((*i)->owners.begin(),\n\t\t(*i)->owners.end(),\n\t\t [this](auto neighbor){return neighbor.CellEquals(this->Index());});\n      if (neighb_with_this_cell!=(*i)->owners.end()) \n\t(*i)->owners.erase(neighb_with_this_cell);\n    }\n\n    Node *previous;\n    if (i!=nodes.begin()) {\n      list<Node *>::iterator previous_iterator=i;\n      previous_iterator--;\n      previous=*previous_iterator;\n    } else {\n      previous=nodes.back();\n    }\n\n    Node *next;\n    list<Node *>::iterator next_iterator=i;\n    next_iterator++;\n    if (next_iterator==nodes.end()) {\n      next=nodes.front();\n    } else {\n      next=*next_iterator;\n    }\n    (*i)->owners.push_back( Neighbor( this, previous, next ) );\n  }\n}\n\nbool Cell::DivideOverGivenLine(const Vector v1, const Vector v2, bool fix_cellwall, NodeSet *node_set )\n{\n  if (dead) return false;\n\n  // check each edge for intersection with the line\n  ItList new_node_locations;\n\n#ifdef QDEBUG\n  qDebug() << \"Cell \" << Index() << \" is doing DivideOverGivenLine\" << endl;\n#endif\n  for (list<Node *>::iterator i=nodes.begin(); i!=nodes.end(); i++) {\n\n    Vector v3 = *(*i);\n    list<Node *>::iterator nb=i;\n    nb++;\n    if (nb == nodes.end()) {\n      nb = nodes.begin();\n    }\n    Vector v4 = *(*nb);\n\n    double denominator = \n      (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);\n\n    double ua = \n      ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;\n    double ub = \n      ((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;\n\n\n    //cerr << \"Edge \" << *i << \" to \" << *nb << \": ua = \" << ua << \", ub = \" << ub << \":  \";\n    // this construction with \"TINY\" should simulate open/closed interval <0,1]\n    if ( ( TINY < ua && ua < 1.+TINY ) && ( TINY < ub && ub < 1.+TINY ) ) {\n      // yes, intersection detected. Push the location to the list of iterators\n      new_node_locations.push_back(nb);\n\n    } \n  }\n\n#ifdef QDEBUG\n  if (new_node_locations.size()<2) { \n    qDebug() << \"Line does not intersect with two edges of Cell \" << Index() << endl;\n    qDebug() << \"new_node_locations.size() = \" << new_node_locations.size() << endl;\n    return false;\n  }\n\n  ItList::iterator i = new_node_locations.begin();\n  list< Node *>::iterator j;\n  qDebug() << \"-------------------------------\" << endl;\n  qDebug() << \"Location of new nodes: \" << (**i)->Index() << \" and \";\n\n  ++i;\n  j = *i; \n  if (j==nodes.begin()) j=nodes.end(); j--;\n\n  qDebug() << (*j)->Index() << endl;\n  qDebug() << \"-------------------------------\" << endl;\n\n  if ( **new_node_locations.begin() == *j ) {\n    qDebug() << \"Rejecting proposed division (cutting off zero area).\" << endl;\n    return false;\n  }\n#endif\n\n  DivideWalls(new_node_locations, v1, v2, fix_cellwall, node_set);\n\n  return true;\n}\nvoid Cell::checkCellLooseWallEnds(Wall * wall,bool&n1Connected,bool&n2Connected) {\n\tn1Connected = false;\n\tn2Connected = false;\n\t// check free swinging wall\n\tfor (list<Wall *>::iterator w = walls.begin(); w!=walls.end(); w++) {\n\t\t  Wall* other = *w;\n\t\t  if (wall != other && (wall->N1()==other->N1() ||wall->N1()==other->N2() )){\n\t\t\t  n1Connected=true;\n\t\t  }\n\t\t  if (wall != other && (wall->N2()==other->N1() ||wall->N2()==other->N2() )){\n\t\t\t  n2Connected=true;\n\t\t  }\n\t\t  if (n1Connected&& n2Connected) {\n\t\t\t  break;\n\t\t  }\n\t}\n}\n\nNeighbor Cell::getNeighbor(Node * node) {\n\t  Neighbor result;\n\t  Neighbor * presult=&result;\n\t  node->LoopNeighbors([this,presult](auto neighbor){\n\t\t  if (neighbor.cell == this) {\n\t\t\t  (*presult) = neighbor;\n\t\t  }\n\t  });\n\t  return result;\n}\n\nWall* Cell::getBoundaryWallAt(Node * node) {\n\tWall* wall=NULL;\n\tWall** pwall=&wall;\n\t this->LoopWalls([node,pwall,this](auto wall){\n\t\t if ((wall->N1()==node ||wall->N1()==node)&& (wall->C1()==this->m->boundary_polygon ||wall->C2()==this->m->boundary_polygon) ) {\n\t\t\t *pwall=wall;\n\t\t }\n\t });\n\t  return wall;\n}\n\nNode * Cell::followNeighborsToWall(Node * n1, Node * n2, double &distance) {\n\tbool isWallEnd=false;\n\tbool* pisWallEnd=&isWallEnd;\n\t this->LoopWalls([n2,pisWallEnd](auto wall){\n\t\t if (wall->N1()==n2 ||wall->N2()==n2) {\n\t\t\t *pisWallEnd=true;\n\t\t }\n\t });\n\t if (isWallEnd) {\n\t\t return n2;\n\t }else {\n\t\t Neighbor neighbor = getNeighbor(n2);\n\t\t distance+=((*n1)-(*n2)).Norm();\n\t\t Node * other =  neighbor.nb1 == n1?neighbor.nb2:neighbor.nb1;\n\t\t return followNeighborsToWall( n2, other, distance);\n\t }\n}\n\nWall * Cell::findWall(Node * n1, Node * n2) {\n\tWall* splittWall = NULL;\n\tWall** psplittWall = &splittWall;\n\n\tLoopWalls([psplittWall,n1,n2](auto wallToSplit) {\n\t\tif (wallToSplit->N1() == n1 && wallToSplit->N2() == n2) {\n\t\t\t(*psplittWall)=wallToSplit;\n\t\t}\n\t\tif (wallToSplit->N2() == n1 && wallToSplit->N1() == n2) {\n\t\t\t(*psplittWall)=wallToSplit;\n\t\t}\n\t});\n\treturn splittWall;\n}\n\nNode* Cell::attachFreeWallEnd(Cell * cellWithOtherWalls, Cell * cellWithSingleWalls, Wall * wall, Node * loseWallNode) {\n\tNeighbor neighbors = cellWithOtherWalls->getNeighbor(loseWallNode);\n\tcout << \"wall needed (n1) after devision in cell \" << Index() << \"\\n\";\n\tdouble distance1=0.0;\n\tNode * startOfOtherWall1 = cellWithOtherWalls->followNeighborsToWall(loseWallNode, neighbors.nb1, distance1);\n\tdouble distance2=0.0;\n\tNode * startOfOtherWall2 = cellWithOtherWalls->followNeighborsToWall(loseWallNode, neighbors.nb2, distance2);\n\tif (!loseWallNode->BoundaryP()) {\n\t\tcout << \"!BoundaryP\\n\" ;\n\t\t// ok this is not good we are inside the cell structure and missed the wall to split\n\t\t// but this wall must be between startOfOtherWall1 and startOfOtherWall2 so we find it and split it up\n\t\tWall* splittWall = findWall(startOfOtherWall1,startOfOtherWall2);\n\n\t\tif (splittWall == NULL) {\n\t\t\tcout << \"!BoundaryP but no wall to split...\\n\" ;\n\t\t\treturn NULL;\n\t\t} else {\n\t\t\t// this node must have 3 neighbors, we need the 3e one.\n\t\t\tCell* opposedCell = NULL;\n\t\t\tCell** popposedCell = &opposedCell;\n\t\t\tloseWallNode->LoopNeighbors([popposedCell,cellWithOtherWalls,cellWithSingleWalls](auto neighbors){\n\t\t\t\tif (neighbors.getCell() != cellWithOtherWalls && neighbors.getCell() != cellWithSingleWalls) {\n\t\t\t\t\t(*popposedCell) = neighbors.getCell();\n\t\t\t\t}\n\t\t\t});\n\t\t\tdouble orgLength=splittWall->Length();\n\t\t\tWall * connectWall = new Wall(startOfOtherWall1, loseWallNode, cellWithSingleWalls, opposedCell );\n\t\t\tsplittWall->replaceNode(startOfOtherWall1, loseWallNode);\n\t\t\tconnectWall->CopyWallContents(*splittWall);\n\t\t\tconnectWall->SetLength();\n\t\t\tconnectWall->CorrectTransporters(orgLength);\n\t\t\tsplittWall->SetLength();\n\t\t\tsplittWall->CorrectTransporters(orgLength);\n\t\t\topposedCell->AddWall(connectWall);\n\t\t\tcellWithOtherWalls->AddWall(connectWall);\n\t\t\tcellWithSingleWalls->AddWall(connectWall);\n\t\t\tconnectWall->CorrectWall();\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\tNode * startOfOtherWall = distance1<distance2?startOfOtherWall1:startOfOtherWall2 ;\n\tcout << \"wall needed from \" << loseWallNode->Index() << \" to \" << startOfOtherWall->Index() << \"\\n\";\n\tWall * connectWall = new Wall(startOfOtherWall, loseWallNode, cellWithSingleWalls, m->boundary_polygon );\n\tWall * donorWall = cellWithOtherWalls->getBoundaryWallAt(startOfOtherWall);\n\tconnectWall->SetLength();\n\tdouble orgLength=connectWall->Length();\n\tif (donorWall!=NULL) {\n\t  connectWall->CopyWallContents(*donorWall);\n\t  orgLength += donorWall->Length();\n\t  donorWall->CorrectTransporters(orgLength);\n\t}\n\tconnectWall->CorrectTransporters(orgLength);\n\n\tcellWithSingleWalls->AddWall(connectWall);\n\tm->boundary_polygon->AddWall(connectWall);\n\tconnectWall->CorrectWall();\n\treturn startOfOtherWall;\n}\n\n// Core division procedure\nvoid Cell::DivideWalls(ItList new_node_locations, const Vector from, const Vector to, bool fix_cellwall, NodeSet *node_set)\n{\n\n  if (dead) return;\n\n  bool boundary_touched_flag=false;\n\n  // Step 0: keep some data about the parent before dividing\n\n  ParentInfo parent_info;\n  parent_info.polarization = ReduceCellAndWalls<Vector>( PINdir );\n  parent_info.polarization.Normalise();\n  parent_info.PINmembrane = SumTransporters(1);\n  parent_info.PINendosome = Chemical(1);\n\n  //cerr << \"Parent polarization before division: \" << parent_info.polarization << endl;\n\n  // Step 1: create a daughter cell\n  Cell *daughter=m->AddCell(new Cell());\n\n  // Step 2: Copy the basics of parent cell to daughter\n  for (int i=0;i<NChem();i++) {\n    daughter->chem[i]=chem[i];\n  }\n\n  daughter->cell_type = cell_type;\n\n  for (int i=0;i<NChem();i++) {\n    daughter->new_chem[i]=new_chem[i];\n  }\n\n  daughter->boundary=boundary;\n  daughter->m=m;\n\n  daughter->target_area=target_area/2.;\n\n  target_area/=2;\n  daughter->cellvec=cellvec;\n\n  // Division currently only works for convex cells: i.e. if the division line\n  // intersects the cells at two points only.\n  if (new_node_locations.size()!=2) {\n\n    // Note: if you would add the possibility of dividing non-convex\n    // cells, remember to update the code below. There are some\n    // fixed-size arrays over there!\n\n    cerr << \"Warning in Cell::Division: division of non-convex cells not fully implemented\" << endl;\n\n    // Reject the daughter cell and decrement the amount of cells\n    // again. We can do this here because it is the last cell added.\n    // Never, ever try to fully erase a cell elsewhere, because we\n    // make heavy use of cell indices in this project; if you erase a\n    // Cell somewhere in the middle of Mesh::Cells the indices will\n    // get totally messed up...! (e.g. the indices used in Nodes::cells)\n\n#ifdef QDEBUG\n    qDebug() << \"new_node_locations.size() = \" << new_node_locations.size() <<endl;\n    qDebug() << \"daughter->index = \" << daughter->index << endl;\n    qDebug() << \"cells.size() = \" << m->cells.size() << endl;\n#endif\n\n    m->cells.pop_back();\n    Cell::NCells()--;\n    m->shuffled_cells.pop_back();\n    return;\n  }\n\n  // We can be sure we only need two positions here because divisions\n  // of non-convex cells are rejected above.\n  Vector new_node[2];\n  Node *new_node_ind[2];\n\n  int new_node_flag[2];\n  Edge div_edges[2];\n\n  int nnc=0;\n\n  Wall *div_wall[4];\n  double orig_length[2];\n  for (int i=0;i<4;i++) { div_wall[i]=0; orig_length[i/2] = 0.; }\n\n  // construct new Nodes at the intersection points\n  // unless they coincide with existing points\n  for ( ItList::const_iterator i=new_node_locations.begin(); i!=new_node_locations.end(); i++) {\n\n    // intersection between division axis\n    // and line from this node to its predecessor\n\n    // method used: http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n    Vector v1 = from;\n    Vector v2 = to;\n    Vector v3 = *(**i);\n\n    // get previous node\n    list<Node *>::iterator nb=*i;\n    if (nb == nodes.begin()) {\n      nb = nodes.end();\n    } \n    nb--;\n    Vector v4=*( *nb ); \n\n    double denominator = \n      (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);\n\n    double ua = \n      ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;\n\n    double intersec_x = v1.x + ua*(v2.x-v1.x);\n    double intersec_y = v1.y + ua*(v2.y-v1.y);\n\n    // construct a new node at intersec\n    // we construct a vector temporarily,\n    // until we are sure we are going to keep the node...\n    // Node count is damaged if we construct superfluous nodes\n    Vector *n=new Vector(intersec_x,intersec_y,0);\n\n    div_edges[nnc].first=*nb;\n    div_edges[nnc].second=**i;\n\n    // Insert this new Node if it is far enough (5% of element length)\n    // from one of the two existing nodes, else use existing node\n    //\n    // old, fixed value was: par.collapse_node_threshold = 0.05\n    double collapse_node_threshold = 0.05;\n#ifdef FLEMING\n    collapse_node_threshold = par.collapse_node_threshold;\n#endif\n\n    double elem_length = ( (*(**i)) - (*(*nb)) ).Norm();\n    if ( ( *(**i) - *n ).Norm() < collapse_node_threshold  * elem_length ) {\n      new_node_flag[nnc]=1;\n      new_node[nnc] = *(**i);\n      new_node_ind[nnc] = **i;\n      //cerr << **i << endl ;\n    } else \n      if ( (*(*nb) - *n).Norm() < collapse_node_threshold * elem_length ) {\n\tnew_node_flag[nnc]=2;\n\tnew_node[nnc] = *(*nb);\n\tnew_node_ind[nnc] = *nb;\n      } else {\n\tnew_node_flag[nnc]=0;\n\tnew_node[nnc] = *n;\n      }\n\n    nnc++;\n    delete n;\n  }\n\n\n  for (int i=0;i<2;i++) {\n\n    Cell *neighbor_cell=0; // we need this to split up the \"Wall\" objects.\n\n    // for both divided edges: \n    //      insert its new node into all cells that own the divided edge\n    // but only if it really is a new node:\n    if (new_node_flag[i]!=0) {\n      if (fix_cellwall) {\n\t(new_node_ind[i])->fixed = true;\n\n\t// all this we'll do later for the node set :-)\n\t/* (new_node_ind[i])->boundary = true;\n\t   (new_node_ind[i])->sam = true;\n\t   boundary = SAM;\n\t   daughter->boundary = SAM;\n\t   boundary_touched_flag = true;\n\t*/ \n      }\n\n    } else {\n\n      // (Construct a list of all owners:)\n      // really construct the new node (if this is a new node)\n      new_node_ind[i] = \n\tm->AddNode(new Node (new_node[i]) );\n\n\n\n      // if a new node is inserted into a fixed edge (i.e. in the petiole)\n      // make the new node fixed as well\n      (new_node_ind[i])->fixed = (div_edges[i].first)->fixed &&\n\t(div_edges[i].second)->fixed;\n\n      // Insert Node into NodeSet if the div_edge is part of it.\n      if (\n\t  (div_edges[i].first->node_set && div_edges[i].second->node_set) &&\n\t  (div_edges[i].first->node_set == div_edges[i].second->node_set))\n\t{\n\t  //cerr << \"Inserting node into node set\\n\";\n\t  div_edges[i].first->node_set->AddNode( new_node_ind[i] );\n\t}\n\n      // if the new wall should be fixed (i.e. immobile, or moving as\n      // solid body), make it so, and make it part of the boundary. Using\n      // this to make a nice initial condition by cutting off part of a\n      // growing leaf.\n\n      if (fix_cellwall) {\n\t(new_node_ind[i])->fixed = true;\n\n\t// All this we'll do later for the node set only\n      }\n\n      // if new node is inserted into the boundary\n      // it will be part of the boundary, too\n\n      new_node_ind[i]->UnsetBoundary();\n      if ((div_edges[i].first->BoundaryP() && div_edges[i].second->BoundaryP()) && // Both edge nodes are boundary nodes AND\n\t  ((m->findNextBoundaryNode(div_edges[i].first))->Index() == div_edges[i].second->Index())){ // The boundary proceeds from first to second.\n\n#ifdef QDEBUG\n\tqDebug() << \"Index of the first node: \" << div_edges[i].first->Index() << endl;\n\tqDebug() << \"Index of the second node: \" << div_edges[i].second->Index() << endl;\n\tqDebug() << \"Boundary proceeds from: \" <<  div_edges[i].first->Index() \n\t\t << \"to: \" << (m->findNextBoundaryNode(div_edges[i].first))->Index() << endl << endl;\n#endif\n\tnew_node_ind[i]->SetBoundary();\n\n\t// We will need to repair the boundary polygon later, since we will insert new nodes\n\t//cerr << \"Boundary touched for Node \" << new_node_ind[i]->Index() << \"\\n\";\n\tboundary_touched_flag=true;\n\n\t// and insert it into the boundary_polygon\n\t// find the position of the first node in the boundary\n\tlist<Node *>::iterator ins_pos = find\n\t  (m->boundary_polygon->nodes.begin(),\n\t   m->boundary_polygon->nodes.end(),\n\t   div_edges[i].first);\n\t// ... second node comes before or after it ...\n\tif (*(++ins_pos!=m->boundary_polygon->nodes.end()?\n\t      ins_pos:m->boundary_polygon->nodes.begin())!=div_edges[i].second) {\n\n\t  m->boundary_polygon->nodes.insert(((ins_pos--)!=m->boundary_polygon->nodes.begin()?ins_pos:(--m->boundary_polygon->nodes.end())), new_node_ind[i]);\n\n\t  // .. set the neighbors of the new node ...\n\t  // in this case e.second and e.first are inverted\n\t} else {\n\t  // insert before second node, so leave ins_pos as it is,\n\t  // that is: incremented\n\t  m->boundary_polygon->nodes.insert(ins_pos, new_node_ind[i]);\t\n\t  // .. set the neighbors of the new node ...\n\t}\n      }\n\n      list<Neighbor> owners;\n\n      // push all cells owning the two nodes of the divides edges\n      // onto a list\n\n      copy((div_edges[i].first)->owners.begin(),\n\t   (div_edges[i].first)->owners.end(),\n\t   back_inserter(owners));\n      copy((div_edges[i].second)->owners.begin(),\n\t   (div_edges[i].second)->owners.end(),\n\t   back_inserter(owners));\n\n\n      // find first non-self duplicate in the owners: \n      // cells owning the same two nodes\n      // share an edge with me\n      owners.sort( [](auto neighbor_a, auto neighbor_b){return neighbor_a.Cmp(neighbor_b);} );\n\n\n#ifdef QDEBUG  \n      list<Neighbor> unique_owners;\n      copy(owners.begin(), owners.end(), back_inserter(unique_owners));\n      unique_owners.unique( mem_fn( &Neighbor::Eq ) );\n      qDebug() << \"The dividing edge nodes: \" << div_edges[i].first->Index() \n\t       << \" and \" << div_edges[i].second->Index() << \" are owned by cells: \";\n\n      // spit out each owners' cell index\n      foreach(Neighbor neighbor, unique_owners){\n\tqDebug() << neighbor.cell->Index() << \"  \";\n      }\n      qDebug() << endl;\n#endif\n\n      // Search through the sorted list of edge node owners looking for duplicate pairs. Each pair represents an actual edge owner.\n      list<Neighbor> edge_owners;\n      list<Neighbor>::iterator it;\n      for (it=owners.begin(); it!=owners.end(); it++) {\n\tit = adjacent_find(it, owners.end(), neighbor_cell_eq);\n\tif (it == owners.end()) break; // bail if reach the end of the list\n#ifdef QDEBUG\n\tqDebug() << \"Considering: \" << it->cell->Index() << \" as a possible edge owner.\" << endl;\n#endif\n\tif (it->cell->Index() != this->Index()) {\n#ifdef QDEBUG\n\t  qDebug() << \"Adding: \" << it->cell->Index() << \" to the list of edge owners.\" << endl;\n#endif\n\t  edge_owners.push_back(*it);\n\t}\n      } \n\n      if (edge_owners.size() > 1){\n\t// Remove the boundary polygon - if its there\n\tlist<Neighbor>::iterator it;\n\tif ((it = find_if (edge_owners.begin(), edge_owners.end(), [](auto neighbor){return neighbor.CellEquals(-1);}))\n\t    != edge_owners.end()) {\n#ifdef QDEBUG\n      qDebug() << \"deleting: \" << it->cell->Index() << \" from the list of edge owners.\" << endl;\n#endif\n\t  edge_owners.erase(it);\n\t}\n      }\n\n#ifdef QDEBUG\n      qDebug() << \"The edge owners list has: \" << edge_owners.size() << \" elements\" << endl;\n#endif\n\n      // Since the list should always contain exactly one element, pass it on as an iterator\n      list<Neighbor>::iterator c = (edge_owners.size() != 0) ? edge_owners.begin() : edge_owners.end();\n\n      // (can we have more than one neighboring cell here??)\n      if (c!=owners.end()) { \n\tneighbor_cell = c->cell;\n\tif (c->cell == NULL) {\n\t\tcout << \"error\";\n\t} else\n\tif (!c->cell->BoundaryPolP()) {\n\n\t  // find correct position in the cells node list\n\t  // to insert the new node\n\t  list<Node *>::iterator ins_pos = find\n\t    (neighbor_cell->nodes.begin(),\n\t     neighbor_cell->nodes.end(),\n\t     div_edges[i].first);\n\n\t  neighbor_cell->nodes.insert(ins_pos, new_node_ind[i]);\n\t  neighbor_cell->ConstructConnections();\n\n\t  // give walls to daughter later\n\t}\n      } else {\n\tneighbor_cell = 0;\n      }\n    }\n\n    // Split the Wall with the neighboring cell\n\n    // if the neighbor cell has not yet been identified above, do it now\n    if (neighbor_cell == 0) {\n\n      list<Neighbor> owners;\n\n      // push all cells owning the two nodes of the divides edges\n      // onto a list\n      copy((div_edges[i].first)->owners.begin(),\n\t   (div_edges[i].first)->owners.end(),\n\t   back_inserter(owners));\n      copy((div_edges[i].second)->owners.begin(),\n\t   (div_edges[i].second)->owners.end(),\n\t   back_inserter(owners));\n\n\n      // find first non-self duplicate in the owners: \n      // cells owning the same two nodes\n      // share an edge with me\n      owners.sort( mem_fn ( &Neighbor::Cmp ) );\n\n      list<Neighbor>::iterator c;\n      for (c=owners.begin(); c!=owners.end(); c++) {\n\tc=adjacent_find(c,owners.end(),neighbor_cell_eq);\n\tif (c->cell->Index() != this->Index() || c==owners.end()) break;\n      }\n\n      if (c!=owners.end())\n\tneighbor_cell = c->cell;\n      else \n\tneighbor_cell = 0;\n    }\n\n\n    if (neighbor_cell /* && !neighbor_cell->BoundaryPolP() */) {\n\n      //cerr << \"Cell \"  << index << \" says: neighboring cell is \" << neighbor_cell->index << endl;\n\n      /*************** 1. Find the correct wall element  ********************/\n\n      list<Wall *>::iterator w, start_search;\n      w = start_search = walls.begin();\n      do {\n\t// Find wall between this cell and neighbor cell\n        w = find_if( start_search, walls.end(), [neighbor_cell](auto wall){\n\t\t\treturn wall->is_wall_of_cell_p(neighbor_cell);} );\n\tstart_search = w; start_search++; // continue searching at next element\n      } while ( w!=walls.end() && !(*w)->IntersectsWithDivisionPlaneP( from, to ) ); // go on until we find the right one.\n\n      if (w == walls.end()) {\n#ifdef QDEBUG\n\tqDebug() << \"Whoops, wall element not found...!\" << endl;\n\tqDebug() << \"Cell ID: \" << neighbor_cell->Index() << endl;\n\tqDebug() << \"My cell ID: \" << Index() << endl;\n#endif\n      } else {\n\n\t// 2. Split it up, if we should (sometimes, the new node coincides with an existing node so\n\t// we should not split up the Wall)\n\n\tif (new_node_ind[i]!=(*w)->n1 && new_node_ind[i]!=(*w)->n2) {\n\n\t  Wall *new_wall;\n\n\t  // keep the length of the original wall; we need it to equally divide the transporter concentrations\n\t  // over the two daughter walls\n\t  (*w)->SetLength(); // make sure we've got the current length\n\t  orig_length[i] = (*w)->Length();\n\t  //cerr << \"Original length is \" << orig_length[i] << endl;\n\t  if ((*w)->c1 == this ) {\n\n\t    //  cerr << \"Cell \" << (*w)->c1->Index() << \" splits up wall \" << *(*w) << \", into: \" << endl;\n\t    new_wall = new Wall( (*w)->n1, new_node_ind[i], this, neighbor_cell);\n\t    (*w)->n1 = new_node_ind[i];\n\n\t    //  cerr << \"wall \" << *(*w) << \", and new wall \" << *new_wall << endl;\n\n\t  } else {\n\t    new_wall = new Wall( (*w)->n1, new_node_ind[i], neighbor_cell, this);\n\n\t    (*w)->n1 = new_node_ind[i];\n\t  }\n\n\n\t  // 3. Give wall elements to appropriate cells\n\t  if (new_wall->n1 != new_wall->n2) {\n\n\t    if (par.copy_wall)\n\t      new_wall->CopyWallContents(**w);\n\t    else {\n\t      // If wall contents are not copied, decide randomly which wall will be the \"parent\"\n\t      // otherwise we will get biases (to the left), for example in the meristem growth model\n\t      if (RANDOM()<0.5) {\n\t\tnew_wall->SwapWallContents(*w);\n\t      }\n\t    }\n\t    AddWall(new_wall);\n\t    // cerr << \"Building new wall: this=\" << Index() << \", neighbor_cell = \" << neighbor_cell->Index() << endl;\n\n\t    neighbor_cell->AddWall( new_wall);\n\t    //cerr << \"Existing wall: c1 = \" << (*w)->c1->Index() << \", neighbor_cell = \" << (*w)->c2->Index() << endl;\n\n\t    // Remember the addresses of the new walls\n\t    div_wall[2*i+0] = *w;\n\t    div_wall[2*i+1] = new_wall;\n\n\t    // we will correct the transporter concentrations later in this member function, after division\n\t    // First the new nodes should be inserted into the cells, before we can calculate wall lengths\n\t    // Remember that cell walls can be bent, so have a bigger length than the Euclidean distance n1->n2\n\n\t  } else {\n\t    delete new_wall;\n\t  }\n\t}\n      }\n    }\n  }  // closing loop over the two divided edges (for (int i=0;i<2;i++) )\n\n  // move half of the nodes to the daughter\n  {\n    //cerr << \"Daughter: \";\n    list<Node *>::iterator start, stop;\n\n    start=new_node_locations.front();\n\n    //cerr << \"*new_node_locations.front() = \" << *new_node_locations.front() << endl;\n    if (new_node_flag[0]==1) {\n      start++;\n      if (start==nodes.end())\n\tstart=nodes.begin();\n    }  \n\n    stop=new_node_locations.back();\n    if (new_node_flag[1]==2) {\n      if (stop==nodes.begin())\n\tstop=nodes.end();\n      stop--;\n    }\n    list<Node *>::iterator i=start;\n    while ( i!=stop) {\n\n      // give the node to the daughter\n      // (find references to parent cell from this node,\n      // and remove them)\n      list<Neighbor>::iterator neighb_with_this_cell=\n\tfind_if((*i)->owners.begin(),\n\t\t(*i)->owners.end(),\n\t        [this](auto neighbor){return neighbor.CellEquals(this->Index());});\n      if (neighb_with_this_cell==(*i)->owners.end()) {\n\n#ifdef QDEBUG\n\tqDebug() << \"not found\" << endl;\n#endif\n\tabort();\n      }\n\n      (*i)->owners.erase(neighb_with_this_cell);\n\n      daughter->nodes.push_back( *i );\n\n\n      i++;\n      if (i==nodes.end())\n\ti=nodes.begin();\n    };\n  }\n\n  // new node list of parent\n  list<Node *> new_nodes_parent;\n\n  // half of the nodes stay with the parent\n  {\n    list<Node *>::iterator start, stop;\n    start=new_node_locations.back();\n    if (new_node_flag[1]==1) {\n      start++;\n      if (start==nodes.end())\n\tstart=nodes.begin();\n    }\n    stop=new_node_locations.front();\n    if (new_node_flag[0]==2) {\n      if (stop==nodes.begin())\n\tstop=nodes.end();\n      stop--;\n    }\n\n    list<Node *>::iterator i=start;\n    while (i!=stop) {\n      new_nodes_parent.push_back( *i );\n\n      i++;\n      if (i==nodes.end()) \n\ti = nodes.begin();\n    };\n  }\n\n  // insert shared wall\n  // insert shared nodes on surface of parent cell\n  new_nodes_parent.push_back( new_node_ind[0] );\n  daughter->nodes.push_back ( new_node_ind[1] );\n\n  // optionally add the new node to the nodeset (passed by pointer)\n  // (in this way we can move the NodeSet as a whole; useful for a fixed cutting line)\n  if (node_set) {\n    node_set->AddNode( new_node_ind[0] );\n  }\n\n#define MULTIPLE_NODES\n#ifdef MULTIPLE_NODES\n  // intermediate, extra nodes\n  // Calculate distance between the two new nodes\n  double dist=( new_node[1] - new_node[0] ).Norm();\n  //bool fixed_wall = (new_node_ind[0])->fixed && (new_node_ind[1])->fixed;\n  bool fixed_wall = false;\n\n  // Estimate number of extra nodes in wall\n  // factor 4 is to keep tension on the walls;\n  // this is a hidden parameter and should be made explicit\n  // later on.\n  int n=(int)((dist/Node::target_length)/4+0.5);\n\n  Vector nodevec = ( new_node[1]- new_node[0]).Normalised();\n\n  double element_length = dist/(double)(n+1);\n\n  // note that wall nodes need to run in inverse order in parent\n  list<Node *>::iterator ins_pos = daughter->nodes.end();\n\n  for (int i=1;i<=n;i++) {\n    Node *node=\n      m->AddNode( new Node( new_node[0] + i*element_length*nodevec ) );\n\n    node->fixed=fixed_wall;\n\n    if (!fix_cellwall)\n      node->boundary = false;\n    else {\n      node->fixed = true;\n    }\n\n    ins_pos=daughter->nodes.insert(ins_pos, node );\n    new_nodes_parent.push_back( node );\n\n    // optionally add the new node to the nodeset (passed by pointer)\n    // (in this way we can move the NodeSet as a whole; useful for a fixed cutting line)\n    if (node_set) {\n      node_set->AddNode( node );\n    }\n\n  }\n#endif\n  daughter->nodes.push_back( new_node_ind[0] );\n  new_nodes_parent.push_back( new_node_ind[1] );\n\n  // optionally add the new node to the nodeset (passed by pointer)\n  // (in this way we can move the NodeSet as a whole; useful for a fixed cutting line)\n  if (node_set) {\n    node_set->AddNode( new_node_ind[1] );\n  }\n\n  // move the new nodes to the parent\n  nodes.clear();\n  copy( new_nodes_parent.begin(), \n\tnew_nodes_parent.end(), \n\tback_inserter(nodes) );\n\n\n  // Repair cell lists of Nodes, and node connectivities\n  ConstructConnections();\n  daughter->ConstructConnections();\n\n  if (boundary_touched_flag) {\n    m->boundary_polygon->ConstructConnections();\n  } \n\n  // collecting neighbors of divided cell\n  list<CellBase *> broken_neighbors;\n\n  // this cell's old neighbors\n  copy(neighbors.begin(), neighbors.end(), back_inserter(broken_neighbors) );\n\n  // this cell\n  broken_neighbors.push_back(this);\n\n  // its daughter\n  broken_neighbors.push_back(daughter);\n\n  // Recalculate area of parent and daughter\n  area = CalcArea();\n  daughter->area = daughter->CalcArea();\n\n  SetIntegrals();\n  daughter->SetIntegrals();\n\n  // Add a \"Cell Wall\" for diffusion algorithms\n  Wall *wall = new Wall( new_node_ind[0], new_node_ind[1], this, daughter );\n\n  AddWall( wall );\n\n  daughter->AddWall( wall );\n\n  //cerr << \"Correct walls of cell \" << Index() << \" and daughter \" << daughter->Index() << endl;\n\n  // Move Walls to daughter cell\n  list <Wall *> copy_walls = walls;\n  for (list<Wall *>::iterator w = copy_walls.begin(); w!=copy_walls.end(); w++) {\n\n    //cerr << \"Doing wall, before:  \" << **w << endl;\n\n    //  checks the nodes of the wall and gives it away if appropriate\n    (*w)->CorrectWall ( );\n\n    //cerr << \"and after: \" << **w << endl;\n\n  }\n\n  // Correct tranporterconcentrations of divided walls\n  for (int i=0;i<4;i++) {\n    if (div_wall[i]) {\n      div_wall[i]->SetLength();\n      div_wall[i]->CorrectTransporters(orig_length[i/2]);\n    }\n  }\n\n  //cerr << \"Cell \" << index << \" has been dividing, and gave birth to Cell \" << daughter->index << endl;\n\n  // now reconstruct neighbor list for all \"broken\" neighbors\n\n  for (list<CellBase *>::iterator i=broken_neighbors.begin(); i!=broken_neighbors.end(); i++) {\n    ((Cell *)(*i))->ConstructNeighborList();\n  }\n\n  ConstructNeighborList();\n  daughter->ConstructNeighborList();\n\n  \t/**\n     * Here we reconnect the wall elements if they got lose ends, if both ends are lose then\n     * the original wall has to be deleted.\n     *\n     * Important we need to distribute the properties over the newly created walls.\n     */\n\tbool n1Connected;\n\tbool n2Connected;\n\tcheckCellLooseWallEnds(wall,n1Connected,n2Connected);\n\tCell * cellWithOtherWalls = this;\n\tCell * cellWithSingleWalls = daughter;\n\tif (walls.size() < daughter->walls.size()) {\n\t\tcellWithOtherWalls = daughter;\n\t\tcellWithSingleWalls = this;\n\t}\n\tif (!n1Connected && !n2Connected) {\n\t\t\tNode * fist = attachFreeWallEnd(cellWithOtherWalls,cellWithSingleWalls,wall,wall->N1());\n\t\t\tNode * second = attachFreeWallEnd(cellWithOtherWalls,cellWithSingleWalls,wall,wall->N2());\n\t\t\tWall * wallToRemove = findWall(fist, second);\n\t\t\tif (wallToRemove != NULL) {\n\t\t\t\tm->walls.remove(wallToRemove);\n\t\t\t\twallToRemove->c1->removeWall(wallToRemove);\n\t\t\t\twallToRemove->c2->removeWall(wallToRemove);\n\t\t\t\tdelete wallToRemove;\n\t\t\t}\n\t} else if (!n1Connected) {\n\t\tattachFreeWallEnd(cellWithOtherWalls,cellWithSingleWalls,wall,wall->N1());\n\t} else if (!n2Connected) {\n\t\tattachFreeWallEnd(cellWithOtherWalls,cellWithSingleWalls,wall,wall->N2());\n\t}\n\n    this->splittWallElementsBetween(new_node_ind[0],  daughter);\n\n\tthis->splittWallElementsBetween(new_node_ind[1], daughter);\n\n\tm->plugin->OnDivide(&parent_info, daughter, this);\n\n\tdaughter->div_counter=(++div_counter);\n}\n\nvoid Cell::findBeforeAfter(Node * node, Node ** before, Node**after) {\n\tfor (list<Node *>::iterator i=this->nodes.begin(); i!=this->nodes.end(); i++) {\n\t    list<Node *>::const_iterator next=i;\n\t    next++;\n\t    if (next == this->nodes.end()) {\n\t      next = this->nodes.begin();\n\t    }\n\t    if (*next == node) {\n\t    \t(*before) = *i;\n\t    }\n\t    if (*i == node) {\n\t    \t(*after) = *next;\n\t    }\n\t}\n}\n\nCell* Cell::findOtherCell(Cell*other,  Node * node,  Node * node2) {\n\tfor (list<Neighbor>::const_iterator n=node->owners.begin(); n!=node->owners.end(); n++) {\n\t\tif (n->cell != this && n->cell != other) {\n\t\t\treturn n->cell;\n\t\t}\n\t}\n\tif (other== NULL) {\n\t\tfor (list<Neighbor>::const_iterator n=node2->owners.begin(); n!=node2->owners.end(); n++) {\n\t\t   if (n->cell != this && n->cell != other) {\n\t\t\t   return n->cell;\n\t\t   }\n\t   }\n\t}\n\treturn NULL;\n}\n\n/**\n * find neighbour cell for splittWallElementsBetween\n */\nCell* Cell::findNeighbourCellOnDivide(Cell* daughter,Node* node,Node * before1,Node * after1 ,Node * before2,Node * after2) {\n\tCell* other = findOtherCell(daughter, before1, after2);\n\tif (other == NULL) {\n\t\tother = findOtherCell(daughter, after1, before2);\n\t}\n\treturn other;\n}\n/**\n *          o before1\n *          |         THIS\n *          |\n *          |     after1\n * OTHER    +-----o\n *          |     before2\n *          |\n *          |         DOUGHTER\n *          o after2\n *\n * blow the reverse case (on the other side)\n *\n *              o after1\n *   THIS       |\n *              |\n * before1      |\n *        o-----+   OTHER\n * after2       |\n *              |\n *  DOUGHTER    |\n *              o before2\n *\n */\nvoid Cell::splittWallElementsBetween(Node* node, Cell* daughter) {\n\tNode * before1 = NULL;\n\tNode * after1 = NULL;\n\tNode * before2 = NULL;\n\tNode * after2 = NULL;\n\tthis->findBeforeAfter(node, &before1, &after1);\n\tdaughter->findBeforeAfter(node, &before2, &after2);\n\n\t// find the other node on the outside of the split\n\tCell* other = findNeighbourCellOnDivide(daughter, node, before1, after1, before2, after2);\n\n\t// get wall element info of the walls that are now splitt.\n\tWallElementInfo oldInfoB1ToA2_B2A1;\n\tWallElementInfo oldInfoA2ToB1_A1B2;\n\tthis->fillWallElementInfo(&oldInfoB1ToA2_B2A1, before1, after2);\n\tbool reverse = false;\n\tif (oldInfoB1ToA2_B2A1.hasWallElement()) {\n\t\tother->fillWallElementInfo(&oldInfoA2ToB1_A1B2, after2, before1);\n\t} else {\n\t\tthis->fillWallElementInfo(&oldInfoB1ToA2_B2A1, before2, after1);\n\t\tother->fillWallElementInfo(&oldInfoA2ToB1_A1B2, after1, before2);\n\t\treverse=true;\n\t}\n\t//save a backup of the data to distribute the data over the new parts.\n\tWallElement weB1A2_B2A1= *(oldInfoB1ToA2_B2A1.getWallElement());\n\toldInfoB1ToA2_B2A1.setWallElement(&weB1A2_B2A1);\n\tWallElement weA2B1_A1B2= *(oldInfoA2ToB1_A1B2.getWallElement());\n\toldInfoA2ToB1_A1B2.setWallElement(&weA2B1_A1B2);\n\n\tdouble patrialLengthBefore =  ((*before1) - (*node)).Norm();\n\tdouble patrialLengthAfter =  ((*after2) - (*node)).Norm();\n\tdouble ratio = patrialLengthBefore / (patrialLengthBefore+patrialLengthAfter);\n\tdouble elastic_limit = this->m->elastic_limit;\n\tWallElementInfo element;\n\tif (!reverse) {\n\t\tthis->fillWallElementInfo(&element, before1, node);\n\t\telement.updateFrom(&oldInfoB1ToA2_B2A1, ratio, elastic_limit);\n\t\tthis->fillWallElementInfo(&element, node, after1);\n\t\telement.updateBaseLength(elastic_limit);\n\t\tdaughter->fillWallElementInfo(&element, before2, node);\n\t\telement.updateBaseLength(elastic_limit);\n\t\tdaughter->fillWallElementInfo(&element, node, after2);\n\t\telement.updateFrom(&oldInfoB1ToA2_B2A1, 1.-ratio, elastic_limit);\n\t\tif (!other->BoundaryPolP()) {\n\t\t\tother->fillWallElementInfo(&element, after2, node);\n\t\t\telement.updateFrom(&oldInfoA2ToB1_A1B2, ratio, elastic_limit);\n\t\t\tother->fillWallElementInfo(&element, node, before2);\n\t\t\telement.updateFrom(&oldInfoA2ToB1_A1B2, 1.-ratio, elastic_limit);\n\t\t}\n\t} else {\n\t\tthis->fillWallElementInfo(&element, before1, node);\n\t\telement.updateBaseLength(elastic_limit);\n\t\tthis->fillWallElementInfo(&element, node, after1);\n\t\telement.updateFrom(&oldInfoB1ToA2_B2A1, ratio, elastic_limit);\n\t\tdaughter->fillWallElementInfo(&element, before2, node);\n\t\telement.updateFrom(&oldInfoB1ToA2_B2A1, 1.-ratio, elastic_limit);\n\t\tdaughter->fillWallElementInfo(&element, node, after2);\n\t\telement.updateBaseLength(elastic_limit);\n\t\tif (!other->BoundaryPolP()) {\n\t\t\tother->fillWallElementInfo(&element, after1, node);\n\t\t\telement.updateFrom(&oldInfoA2ToB1_A1B2, ratio, elastic_limit);\n\t\t\tother->fillWallElementInfo(&element, node, before2);\n\t\t\telement.updateFrom(&oldInfoA2ToB1_A1B2, 1.-ratio, elastic_limit);\n\t\t}\n\t}\n}\n\n// Move the whole cell\nvoid Cell::Move(const Vector T) {\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    *(*i)+=T;\n  }\n}\n\ndouble Cell::Displace(double dx, double dy, double dh)\n{\n\n  // Displace whole cell, add resulting energy to dh,\n  // and accept displacement if energetically favorable\n  // \n  // Method is called if a \"fixed\" node is displaced\n\n  // Warning: length constraint not yet  CORRECTLY implemented for this function\n\n  // Attempt to move this cell in a random direction\n  //  Vector movement(par.mc_cell_stepsize*(RANDOM()-0.5),par.mc_cell_stepsize*(RANDOM()-0.5),0);\n\n\n  dh=0;\n\n  Vector movement(dx,dy,0);\n\n  vector< pair<Node *, Node *> > length_edges;\n  vector<double> cellareas;\n  cellareas.reserve(neighbors.size());\n\n  // for the length constraint, collect all edges to this cell's nodes,\n  // which are not part of the cell\n  // the length of these edges will change\n\n  double old_length=0.;\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    for (list<Neighbor>::const_iterator n=(*i)->owners.begin(); n!=(*i)->owners.end(); n++) {\n      if (n->getCell()!=this) {\n\tlength_edges.push_back( pair <Node *,Node *> (*i, n->nb1) );\n\tlength_edges.push_back( pair <Node *,Node *> (*i, n->nb2) );\n\told_length += \n\t  DSQR(Node::target_length-(*(*i)-*(n->nb1)).Norm())+\n\t  DSQR(Node::target_length-(*(*i)-*(n->nb2)).Norm());\n      }\n    }\n  }\n\n  // calculate area energy difference of neighboring cells\n  // (this cells' shape remains unchanged)\n  double old_area_energy=0., old_length_energy=0.;\n  for (list<CellBase *>::const_iterator i=neighbors.begin(); i!=neighbors.end(); i++) {\n    old_area_energy += DSQR((*i)->Area()-(*i)->TargetArea());\n    old_length_energy += DSQR((*i)->Length()-(*i)->TargetLength());\n  }\n\n  Move(movement);\n\n  double new_area_energy=0., new_length_energy=0.;\n  for (list<CellBase *>::const_iterator i=neighbors.begin(); i!=neighbors.end(); i++) {\n    cellareas.push_back((*i)->CalcArea());\n    new_area_energy += DSQR(cellareas.back()-(*i)->TargetArea());\n    new_length_energy += DSQR((*i)->CalcLength()-(*i)->TargetLength());\n  }\n\n  double new_length=0;\n  for ( vector< pair< Node *, Node * > >::const_iterator e = length_edges.begin(); e != length_edges.end(); e++) {\n    new_length +=  DSQR(Node::target_length - (*(e->first) - *(e->second)).Norm());\n  }\n\n\n  dh += (new_area_energy - old_area_energy) + (new_length_energy - old_length_energy) * lambda_celllength +\n    par.lambda_length * (new_length - old_length);\n\n  if (dh<0 || RANDOM()<exp(-dh/par.T)) {\n\n    // update areas of cells\n    //cerr << \"neighbors: \";\n    list<CellBase *>::const_iterator nb_it = neighbors.begin();\n    for (vector<double>::const_iterator ar_it = cellareas.begin(); ar_it!=cellareas.end(); ( ar_it++, nb_it++) ) {\n      ((Cell *)(*nb_it))->area = *ar_it;\n      (*nb_it)->SetIntegrals(); \n    }\n\n    //cerr << endl;\n\n  } else {\n\n    Move ( -1*movement);\n\n  }\n\n  return dh;\n}\n\n\nvoid Cell::Displace (void)\n{\n  Displace(par.mc_cell_stepsize*(RANDOM()-0.5),par.mc_cell_stepsize*(RANDOM()-0.5),0);\n}\n\n// Get energy level of whole cell (excluding length constraint?)\ndouble Cell::Energy(void) const\n{\n  double energy = 0.;\n  double length_contribution = 0.;\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    for (list<Neighbor>::const_iterator n=(*i)->owners.begin(); n!=(*i)->owners.end(); n++) {\n      if (n->getCell()==this) {\n\tlength_contribution += \n\t  DSQR(Node::target_length-(*(*i)-*(n->nb1)).Norm()) +\n\t  DSQR(Node::target_length-(*(*i)-*(n->nb2)).Norm());\n      }\n    }\n  }\n\n  // wall elasticity constraint\n  energy += par.lambda_length * length_contribution;\n\n  // area constraint\n  energy += DSQR(CalcArea() - target_area);\n\n  // cell length constraint\n  energy += lambda_celllength * DSQR(Length() - target_length);\n\n  return energy;\n}\n\n\n\n\nbool Cell::SelfIntersect(void)\n{\n  // The (obvious) O(N*N) algorithm\n\n  // Compare each edge against each other edge\n\n  // An O(N log(N)) algorithm by Shamos & Hoey (1976) supposedly exists;\n  // it was mentioned on comp.graphics.algorithms\n\n  // But I haven't been able to lay my hand on the paper.\n  // Let's try whether we need it....\n\n  // method used: http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n\n    list<Node *>::const_iterator j=i; \n    ++j;\n    for (; j!=nodes.end(); j++) \n      {\n\t\n\tVector v1 = *(*i);\n\tlist<Node *>::const_iterator nb=i;\n\tnb++;\n\tif (nb == nodes.end()) {\n\t  nb = nodes.begin();\n\t} \n\tVector v2 = *(*nb);\n\tVector v3 = *(*j);\n\tnb=j;\n\tnb++;\n\tif (nb == nodes.end()) {\n\t  nb = nodes.begin();\n\t} \n\tVector v4=*( *nb ); \n\n\tdouble denominator = \n\t  (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);\n\n\tdouble ua = \n\t  ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;\n\tdouble ub = \n\t  ((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;\n\n\n\tif ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {\n\t  //cerr << \"ua = \" << ua << \", ub = \" << ub << endl;\n\t  return true;\n\t}\n      }\n  }\n\n  return false;\n}\n\n\n/*\nbool Cell::MoveSelfIntersectsP(Node *moving_node_ind, Vector new_pos)\n{\n\n  // Check whether the polygon will self-intersect if moving_node_ind \n  // were displaced to new_pos\n\n  // Compare the two new edges against each other edge\n\n  // O(2*N)\n\n  // method used for segment intersection:\n  // http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n\n  Vector neighbor_of_moving_node[2];\n\n  //cerr << \"list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\\n\";\n  list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\n\n  list<Node *>::const_iterator nb = moving_node_ind_pos;\n  //cerr << \"Done\\n\";\n  nb++;\n  if (nb == nodes.end()) {\n    nb = nodes.begin();\n  } \n\n  neighbor_of_moving_node[0]=*(*nb); \n\n  nb=moving_node_ind_pos;\n  if (nb == nodes.begin()) {\n    nb = nodes.end();\n  }\n  nb--;\n\n  neighbor_of_moving_node[1]=*( *nb ); \n\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n    for (int j=0;j<2;j++) { // loop over the two neighbors of moving node\n      list<Node *>::const_iterator nb=i;\n      nb++;\n      if (nb == nodes.end()) {\n\tnb = nodes.begin();\n      } \n      if (*i == moving_node_ind || *nb == moving_node_ind) {\n\t// do not compare to self\n\tcontinue;\n      }\n\n      Vector v3 = *(*i);\n      Vector v4 = *(*nb);\n\n      double denominator = \n\t(v4.y - v3.y)*(neighbor_of_moving_node[j].x - new_pos.x) - (v4.x - v3.x)*(neighbor_of_moving_node[j].y - new_pos.y);\n\n      double ua = \n\t((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;\n      double ub = \n\t((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x))/denominator;\n\n      if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {\n\t//cerr << \"ua = \" << ua << \", ub = \" << ub << endl;\n\treturn true;\n      }\n    }\n  }\n  return false;\n}\n\n\n\n*/\n\nbool Cell::MoveSelfIntersectsP(Node *moving_node_ind, Vector new_pos)\n{\n    \n    // Check whether the polygon will self-intersect if moving_node_ind\n    // were displaced to new_pos\n    \n    // Compare the two new edges against each other edge\n    \n    // O(2*N)\n    \n    // method used for segment intersection:\n    // http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n    \n    Vector neighbor_of_moving_node[2];\n    \n    //cerr << \"list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\\n\";\n    list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\n    \n    list<Node *>::const_iterator nb = moving_node_ind_pos;\n    //cerr << \"Done\\n\";\n    nb++;\n    if (nb == nodes.end()) {\n        nb = nodes.begin();\n    }\n    \n    neighbor_of_moving_node[0]=*(*nb);\n    \n    nb=moving_node_ind_pos;\n    if (nb == nodes.begin()) {\n        nb = nodes.end();\n    }\n    nb--;\n    \n    neighbor_of_moving_node[1]=*( *nb );\n    \n    \n    for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n        for (int j=0;j<2;j++) { // loop over the two neighbors of moving node\n            list<Node *>::const_iterator nb=i;\n            nb++;\n            if (nb == nodes.end()) {\n                nb = nodes.begin();\n            }\n            if (*i == moving_node_ind || *nb == moving_node_ind) {\n                // do not compare to self\n                continue;\n            }\n            \n            Vector v3 = *(*i);\n            Vector v4 = *(*nb);\n            \n            double denominator =\n            (v4.y - v3.y)*(neighbor_of_moving_node[j].x - new_pos.x) - (v4.x - v3.x)*(neighbor_of_moving_node[j].y - new_pos.y);\n            \n           //  double ua =\n           //  ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;\n           //  double ub =\n           //  ((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x))/denominator;\n\n            double numera = ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x));\n            double numerb = ((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x));\n            \n            // Are the wall elements coincident?\n            if (fabs(numera) < TINY && fabs(numerb) < TINY && fabs(denominator) < TINY) {\n                return true;\n            }\n            \n            // Are the wall elements parallel?\n            if (fabs(denominator) < TINY) {\n                continue;\n            }\n            double ua = numera / denominator;\n            double ub = numerb / denominator;\n            \n            \n            //if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {\n            if ( ( 0 < ua && ua < 1. ) && ( 0 < ub && ub < 1.) ) {\n                //cerr << \"ua = \" << ua << \", ub = \" << ub << endl;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n\n\nbool Cell::LinePieceIntersectsP(const Vector n1, const Vector n2) const\n{\n    \n    // Check whether the polygon will self-intersect if moving_node_ind\n    // were displaced to new_pos\n    \n    // Compare the two new edges against each other edge\n    \n    // O(2*N)\n    \n    // method used for segment intersection:\n    // http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n    \n    /*Vector neighbor_of_moving_node[2];\n    \n    //cerr << \"list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\\n\";\n    list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\n    \n    list<Node *>::const_iterator nb = moving_node_ind_pos;\n    //cerr << \"Done\\n\";\n    nb++;\n    if (nb == nodes.end()) {\n        nb = nodes.begin();\n    }\n    \n    neighbor_of_moving_node[0]=*(*nb);\n    \n    nb=moving_node_ind_pos;\n    if (nb == nodes.begin()) {\n        nb = nodes.end();\n    }\n    nb--;\n    \n    neighbor_of_moving_node[1]=*( *nb );\n    */\n    \n    for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {\n        list<Node *>::const_iterator nb=i;\n        nb++;\n        if (nb == nodes.end()) {\n            nb = nodes.begin();\n        }\n        \n       /* if (*i == moving_node_ind || *nb == moving_node_ind) {\n            // do not compare to self\n            continue;\n        }*/\n        \n        Vector v3 = *(*i);\n        Vector v4 = *(*nb);\n        \n        double denominator =\n        (v4.y - v3.y)*(n1.x - n2.x) - (v4.x - v3.x)*(n1.y - n2.y);\n        \n        /* double ua =\n         ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;\n         double ub =\n         ((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x))/denominator;*/\n        double numera = ((v4.x - v3.x)*(n1.y - v3.y) - (v4.y - v3.y)*(n1.x -v3.x));\n        double numerb = ((n2.x - n1.x)*(n1.y-v3.y) - (n2.y- n1.y)*(n1.x - v3.x));\n        \n        /* Are the wall elements coincident? */\n        if (fabs(numera) < TINY && fabs(numerb) < TINY && fabs(denominator) < TINY) {\n            return true;\n        }\n        \n        /* Are the wall elements parallel? */\n        if (fabs(denominator) < TINY) {\n            continue;\n        }\n        double ua = numera / denominator;\n        double ub = numerb / denominator;\n        \n        \n        //if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {\n        if ( ( 0 < ua && ua < 1. ) && ( 0 < ub && ub < 1.) ) {\n            //cerr << \"ua = \" << ua << \", ub = \" << ub << endl;\n            return true;\n        }\n        \n    }\n    return false;\n}\n\n/*! \\brief Test if this cell intersects with the given line.\n\n */\nbool Cell::IntersectsWithLineP(const Vector v1, const Vector v2)\n{\n  // Compare the line against each edge\n  // method used: http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) \n    {\n      Vector v3 = *(*i);\n      list<Node *>::const_iterator nb=i;\n      nb++;\n      if (nb == nodes.end()) {\n\tnb = nodes.begin();\n      }\n      Vector v4 = *(*nb);\n\n      double denominator = \n\t(v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);\n\n      double ua = \n\t((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;\n      double ub = \n\t((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;\n\n      if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {\n\treturn true;\n      }\n    }\n  return false;\n}\n/*! \\brief Constructs Walls, but only one per cell boundary.\n\n  Standard method constructs a Wall for each cell wall element,\n  making transport algorithms computationally more intensive than needed.\n\n  We can remove this? Well, let's leave it in the code in case we need it for something else. E.g. for importing leaf architectures in different formats than our own... :-)\n\n*/\nvoid Cell::ConstructWalls(void)\n{\n  return;\n  if (dead) return;\n\n  walls.clear();\n  neighbors.clear();\n\n  // Get \"corner points; i.e. nodes where more than 2 cells are connected\n  list<Node *> corner_points;\n\n  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end();i++) {\n\n    // look for nodes belonging to >2 cells\n    if ((*i)->owners.size()>2) {\n\n      // push onto list\n      corner_points.push_back(*i);\n    }\n  }\n\n  // Construct Walls between corner points\n\n  // previous one in list\n  list<Node *>::const_iterator nb = (--corner_points.end());\n\n  // loop over list, \n  for (list<Node *>::const_iterator i=corner_points.begin(); i!=corner_points.end(); ( i++, nb++) ) {\n\n    if (nb==corner_points.end()) nb=corner_points.begin();\n    // add owning cells to a list\n    list<Cell *> owning_cells;\n    Node &n(*(*i));\n\n    for (list<Neighbor>::const_iterator j=n.owners.begin(); j!=n.owners.end(); j++) {\n      owning_cells.push_back(j->cell);\n    }\n\n    Node &n2(*(*nb));\n    for (list<Neighbor>::const_iterator j=n2.owners.begin(); j!=n2.owners.end(); j++) {\n      owning_cells.push_back(j->cell);\n    }\n\n    // sort cell owners\n    owning_cells.sort( mem_fn( &Cell::Cmp ));\n\n    // find duplicates\n    vector<Cell *> duplicates;\n    list<Cell *>::const_iterator prevj = (--owning_cells.end());\n    for (list<Cell *>::const_iterator j=owning_cells.begin(); j!=owning_cells.end(); ( j++, prevj++) ) {\n      if (prevj==owning_cells.end())\n\tprevj=owning_cells.begin();\n      if (*j==*prevj) \n\tduplicates.push_back(*j);\n    }\n\n    if (duplicates.size()==3) { // ignore cell boundary (this occurs only after the first division, I think)\n      vector<Cell *>::iterator dup_it = find_if(duplicates.begin(),duplicates.end(),mem_fn(&Cell::BoundaryPolP) );\n      if (dup_it!=duplicates.end()) \n\tduplicates.erase(dup_it);\n      else {\n\treturn;\n      }\n    }\n\n\n    // One Wall for each neighbor, so we should be able to correctly construct neighbor lists here.\n    if (duplicates[0]==this) {\n      AddWall(  new Wall(*nb,*i,duplicates[0],duplicates[1]) );\n      if (!duplicates[1]->BoundaryPolP()) {\n\n\tneighbors.push_back(duplicates[1]);\n      }\n    } else {\n      AddWall ( new Wall(*nb,*i,duplicates[1],duplicates[0]) );\n      if (!duplicates[0]->BoundaryPolP()) {\n\tneighbors.push_back(duplicates[0]);\n\n      }\n    }\n  }\n}\n\n\nvoid BoundaryPolygon::Draw(QGraphicsScene *c, QString tooltip)\n{\n\n  // Draw the BoundaryPolygon on a QCanvas object\n\n  CellItem* p = new CellItem(this, c);\n\n  QPolygonF pa(nodes.size());\n  int cc=0;\n\n  for (list<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    Node *i=*n;\n    pa[cc++] = QPoint((qreal)((Offset().x+i->x)*Factor()), (qreal)((Offset().y+i->y)*Factor()) );\n  }\n\n  p->setPolygon(pa);\n  p->setPen(par.outlinewidth>=0?QPen( QColor(par.cell_outline_color),par.outlinewidth):QPen(Qt::NoPen));\n  p->setBrush( Qt::NoBrush );\n  p->setZValue(1);\n\n  if (!tooltip.isEmpty()) {\n    p->setToolTip(tooltip);\n  }\n\n  c->addItem(p);\n  p->show();\n}\n\nvoid Cell::Flux(double *flux, double *D)\n{\n  // loop over cell edges\n\n  for (int c=0;c<NChem();c++)\n    flux[c]=0.;\n\n  for (list<Wall *>::iterator i=walls.begin(); i!=walls.end(); i++) {\n\n    // leaf cannot take up chemicals from environment (\"no flux boundary\")\n    if ((*i)->c2->BoundaryPolP()) continue;\n\n\n    // flux depends on edge length and concentration difference\n    for (int c=0;c<NChem();c++) {\n      double phi = (*i)->length * ( D[c] ) * ( ((Cell *)(*i)->c2)->chem[c] - chem[c] );\n\n#ifdef QDEBUG\n      if ((*i)->c1!=this) {\n\tqDebug() << \"Warning, bad cells boundary: \" << (*i)->c1->Index() << \", \" << index << endl;\n      }\n#endif\n\n      flux[c] += phi;\n    }    \n  }\n}\n\n\n// graphics stuff, not compiled for batch versions\n#ifdef QTGRAPHICS\n\n#include \"canvas.h\"\n\nvoid Cell::Draw(QGraphicsScene *c, bool showStiffness, QString tooltip)\n{\n\n  // Draw the cell on a QCanvas object\n\n  if (DeadP()) { \n#ifdef QDEBUG\n    qDebug() << \"Cell \" << index << \" not drawn, because dead.\" << endl;\n#endif\n    return;\n  }\n\n  CellItem* p = new CellItem(this, c);\n\n  int cc=0;\n  int* pcc=&cc;\n  QPolygonF pa(nodes.size());\n  QPolygonF *ppa =&pa;\n  LoopWallElements([p,pcc,ppa,c,showStiffness](auto wallElementInfo){\n  \twallElementInfo->getWallElement();\n  \tVector start =  *wallElementInfo->getFrom();\n  \tVector end =  *wallElementInfo->getTo();\n    Vector edgevec = end-start;\n\tVector edgevecNormalised = edgevec.Normalised();\n    Vector perp = edgevecNormalised.Perp2D();\n\n    Vector offs = Cell::Offset();\n    double factor = Cell::Factor();\n    double stiffness = wallElementInfo->stiffness();\n    if (std::isnan(stiffness)) {\n    \tstiffness=1.0;\n    }\n\n\tVector startEndOffset = edgevecNormalised * stiffness * 0.25 * factor;\n    Vector thicknessOffset = (-1) * stiffness * 0.5 * factor * perp;\n    Vector from = ( offs + start)  * factor + thicknessOffset + startEndOffset;\n    Vector to = ( offs + end)  * factor + thicknessOffset - startEndOffset;\n\n\n    QGraphicsLineItem *line = new QGraphicsLineItem((qreal)(from.x), (qreal)(from.y ),(qreal)(to.x), (qreal)(to.y ),p);\n    if (showStiffness) {\n        line->setPen(QPen( QColor(par.cell_outline_color),stiffness,Qt::SolidLine,Qt::RoundCap, Qt::BevelJoin));\n    }else {\n        line->setPen(par.outlinewidth>=0?QPen( QColor(par.cell_outline_color),par.outlinewidth):QPen(Qt::NoPen));\n    }\n    line->setZValue(2);\n     c->addItem(line);\n    line->show();\n\n\n    (*ppa)[(*pcc)++] = QPointF((qreal)(from.x), (qreal)(from.y ));\n  });\n\n  QColor cell_color;\n\n  m->plugin->SetCellColor(this,&cell_color);\n\n  p->setPolygon(pa);\n  p->setPen(QPen(Qt::NoPen));\n  p->setBrush( cell_color );\n  p->setZValue(1);\n\n  if (!tooltip.isEmpty()) {\n    p->setToolTip(tooltip);\n  }\n  c->addItem(p);\n  p->show();\n}\n\nvoid Cell::DrawMiddleLamella(QGraphicsScene *c, QString tooltip){\n    QGraphicsPathItem *middle = new QGraphicsPathItem;\n    QPainterPath path;\n    int cc=0;\n\n    for (list<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n        Node *i=*n;\n        if(cc ==0){\n            path.moveTo(QPointF(i->x, i->y));\n        }\n        else{\n      path.lineTo(QPointF(i->x, i->y));\n        }\n      cc++;\n    }\n\n\n    middle->setPath(path);\n    middle->setPen(QPen(QColor(\"white\"),0.1));\n    middle->setZValue(3);\n\n    if (!tooltip.isEmpty()) {\n      middle->setToolTip(tooltip);\n    }\n    c->addItem(middle);\n    middle->show();\n}\n\n\nvoid Cell::DrawCenter(QGraphicsScene *c) const {\n  // Maginfication derived similarly to that in nodeitem.cpp\n  // Why not use Cell::Magnification()?\n  const double mag = par.node_mag;\n  int indicator = (CellType()+1)&3;\n  int dimm=((CellType()+1)&(12))<<2;\n  int intensity = 255 - (255/3)*dimm;\n  int red=  indicator == 1?intensity:0;\n  int green=  indicator == 2?intensity:0;\n  int blue=  indicator == 3?intensity:0;\n    QColor color(red, green, blue, 255);\n  // construct an ellipse\n  QGraphicsEllipseItem *disk = new QGraphicsEllipseItem ( -1*mag, -1*mag, 2*mag, 2*mag, 0);\n  disk->setBrush(color);\n  disk->setZValue(5);\n  Vector centroid=Centroid();\n  disk -> setPos((offset[0]+centroid.x)*factor,(offset[1]+centroid.y)*factor);\n    c->addItem(disk);\n      disk->show();\n}\n\nvoid Cell::DrawNodes(QGraphicsScene *c) const {\n\n  for (list<Node *>::const_iterator n=nodes.begin(); n!=nodes.end(); n++) {\n    Node *i=*n;\n\n    NodeItem *item = new NodeItem ( &(*i), c );\n    item->setColor();\n    item->setZValue(5);\n    item ->setPos(((offset[0]+i->x)*factor), ((offset[1]+i->y)*factor) );\n      c->addItem(item);\n          item->show();\n      \n  }\n}\n\nvoid Cell::DrawIndex(QGraphicsScene *c) const {\n\n  DrawText( c, QString(\"%1\").arg(index));\n}\n\n// Draw any text in the cell's center\nvoid Cell::DrawText(QGraphicsScene *c, const QString &text) const {\n    \n    Vector centroid = Centroid();\n    QGraphicsSimpleTextItem *ctext = new QGraphicsSimpleTextItem ( text, 0);\n   // ctext->setPen( QPen(QColor(par.textcolor)) );\n    ctext->setBrush( QBrush(QColor(par.textcolor)) );\n    ctext->setZValue(20);\n    ctext->setFont( QFont( \"Helvetica\", par.cellnumsize, QFont::Normal) );\n    \n    ctext ->setPos(((offset[0]+centroid.x)*factor),\n                   ((offset[1]+centroid.y)*factor) );\n    c->addItem(ctext);\n    ctext->show();\n    \n}\n\n\nvoid Cell::DrawAxis(QGraphicsScene *c) const {\n\n  Vector long_axis;\n  double width;\n  Length(&long_axis, &width);\n\n  //cerr << \"Length is \"  << length << endl;\n  long_axis.Normalise();\n  Vector short_axis=long_axis.Perp2D();\n\n\n  Vector centroid = Centroid();\n  Vector from = centroid - 0.5 * width * short_axis;\n  Vector to = centroid + 0.5 * width *short_axis;\n\n\n  QGraphicsLineItem *line = new QGraphicsLineItem(0);\n  line->setPen( QPen(QColor(par.arrowcolor),2) );\n  line->setZValue(2);\n\n  line->setLine( ( (offset[0]+from.x)*factor ),\n\t\t ( (offset[1]+from.y)*factor ), \n\t\t ( (offset[0]+to.x)*factor ),\n\t\t ( (offset[1]+to.y)*factor ) );\n  line->setZValue(10);\n    c->addItem(line);\n  line->show();\n    \n}\n\nvoid Cell::DrawStrain(QGraphicsScene *c) const {\n  MyWarning::warning(\"Sorry, Cell::DrawStrain temporarily not implemented.\");\n}\n\n\nvoid Cell::DrawFluxes(QGraphicsScene *c, double arrowsize)\n{\n\n  // get the mean flux through this cell\n  Vector vec_flux = ReduceCellAndWalls<Vector>( PINdir );\n\n  vec_flux.Normalise();\n\n  vec_flux *= arrowsize;\n\n  QGraphicsArrowItem *arrow = new QGraphicsArrowItem(0);\n\n  Vector centroid = Centroid();\n  Vector from = centroid - vec_flux/2.;\n  Vector to = centroid + vec_flux/2.;\n\n\n  arrow->setPen( QPen(QColor(par.arrowcolor),par.outlinewidth));\n  arrow->setZValue(2);\n\n  arrow->setLine( ( (offset[0]+from.x)*factor ),\n\t\t  ( (offset[1]+from.y)*factor ), \n\t\t  ( (offset[0]+to.x)*factor ),\n\t\t  ( (offset[1]+to.y)*factor ) );\n  arrow->setZValue(10);\n  c->addItem(arrow);\n  arrow->show();\n}\n\n\nvoid Cell::DrawWalls(QGraphicsScene *c) const {\n  for_each(walls.begin(), walls.end(), [c](auto wall){return wall->Draw(c);});\n\n  // to see the cells connected the each wall (for debugging), uncomment the following\n  //for_each(walls.begin(), walls.end(), [c](auto wall){return wall->ShowStructure(c);});\n}\n\n\nvoid Cell::DrawValence(QGraphicsScene *c) const {\n\n  DrawText(c, QString(\"%1\").arg(walls.size()) );\n}\n\n#endif // QTGRAPHICS !\n\n/*! \\brief Recalculate the lengths of the cell's Walls.\n\n  Call this function after the Monte Carlo updates, and before doing the reaction-diffusion iterations.\n\n*/\nvoid Cell::SetWallLengths(void)\n{\n\n  for (list<Wall *>::iterator de=walls.begin(); de!=walls.end(); de++) {\n\n    // Step 1: find the path of nodes leading along the Wall.\n    // A Wall often represents a curved cell wall: we want the total\n    // length _along_ the wall here...\n\n\n    // Locate first and second nodes of the edge in list of nodes\n    list<Node *>::const_iterator first_node_edge = find(nodes.begin(), nodes.end(), (*de)->n1);\n    list<Node *>::const_iterator second_node_edge_plus_1 = ++find(nodes.begin(), nodes.end(), (*de)->n2);\n\n    double sum_length = 0.;\n\n    // Now, walk to the second node of the edge in the list of nodes\n    for (list<Node *>::const_iterator n=++first_node_edge; n!=second_node_edge_plus_1; ++n ) {\n      if (n==nodes.end())\n\tn=nodes.begin(); /* wrap around */ \n      list<Node *>::const_iterator prev_n = n; \n      if (prev_n==nodes.begin())\n\tprev_n=nodes.end();\n      --prev_n;\n\n      // Note that Node derives from a Vector, so we can do vector calculus as defined in vector.h \n      sum_length += (*(*prev_n) - *(*n)).Norm(); \n\n      //cerr << \"Node \" << *prev_n << \" to \" << *n << \", cumulative length = \" << sum_length << endl;\n    }\n\n    // We got the total length of the Wall now, store it:\n    (*de)->length = sum_length;\n\n    //cerr << endl;\n    // goto next de\n  }\n}\n\nCellBase* Cell::getOtherWallElementSide(NodeBase *spikeEnd, NodeBase *over) {\n\tfor (list<Neighbor>::iterator nb = ((Node*) spikeEnd)->owners.begin();\n\t\t\tnb != ((Node*) spikeEnd)->owners.end(); nb++) {\n\t\tif (nb->cell != this) {\n\t\t\tfor (list<Neighbor>::iterator nb2 = ((Node*) over)->owners.begin();\n\t\t\t\t\tnb2 != ((Node*) over)->owners.end(); nb2++) {\n\t\t\t\tif (nb2->cell == nb->cell) {\n\t\t\t\t\treturn nb2->cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn NULL;\n}\n\nvoid Cell::InsertWall( WallBase *w )\n{\n\tlist<Wall *>::iterator it;\n\tif ((it=find_if ( walls.begin(), walls.end(),\n\t\t[w](auto wall){\n\t\t\treturn wall->N1() == w->N2();\n\t\t} )) == walls.end() ) {\n\t\twalls.insert(it, (Wall*)w);\n\t} else {\n\t\twalls.push_back( (Wall*)w );\n\t}\n    if (find ( m->walls.begin(), m->walls.end(), w ) == m->walls.end() ) {\n    \tm->walls.push_back((Wall*)w);\n\t}\n\n}\n//! Add Wall w to the list of Walls\nvoid Cell::AddWall( Wall *w )\n{\n\n  // if necessary, we could try later inserting it at the correct position\n#ifdef QDEBUG\n  if (w->c1 == w->c2 ){\n    qDebug() << \"Wall between identical cells: \" << w->c1->Index()<< endl;\n  }\n#endif\n\n  // Add Wall to Cell's list\n  walls.push_back( w );\n\n  // Add wall to Mesh's list if it isn't there yet\n  if (find ( m->walls.begin(), m->walls.end(), w ) == m->walls.end() ) { m->walls.push_back(w);\n  }\n}\n\n//! Remove Wall w from the list of Walls\nlist<Wall *>::iterator Cell::RemoveWall( Wall *w )\n{\n\n  // remove wall from Mesh's list\n  m->walls.erase( find( m->walls.begin(), m->walls.end(), w ) );\n\n  // remove wall from Cell's list\n  return walls.erase (find( walls.begin(), walls.end(), w ));\n}\n\n\nvoid Cell::EmitValues(double t)\n{\n  //  cerr << \"Attempting to emit \" << t << \", \" << chem[0] << \", \" << chem[1] << endl;\n  emit ChemMonValue(t, chem);\n}\n\nvoid Cell::insertNodeAfterFirst(NodeBase * position1,NodeBase * position2, NodeBase * newNode) {\n  CellBase::insertNodeAfterFirst(position1,position2, newNode);\n  ((Node*)newNode)->addCell(this);\n}\n\nWallBase* Cell::newWall(NodeBase* from,NodeBase* to,CellBase * other) {\n  return new Wall((Node*)from, (Node*)to, this, other);\n}\n\nvoid Cell::correctNeighbors() {\n  list<Node*>::iterator nit=this->nodes.begin();\n  Node* n1 = *nit;\n  Node* n2 = *(++nit);\n  Node* n3 = *(++nit);\n  Node* first = n1;\n  Node* second = n2;\n  while (nit != this->nodes.end()) {\n    n2->correctNeighbors(this->Index(), n1, n3);\n    n1=n2;\n    n2=n3;\n    n3=*(++nit);\n  }\n  n3=first;\n  n2->correctNeighbors(this->Index(), n1, n3);\n  n1=n2;\n  n2=n3;\n  n3=second;\n  n2->correctNeighbors(this->Index(), n1, n3);\n  ConstructNeighborList();\n  RecalcArea();\n}\n\ndouble Cell::elastic_limit() {\n\treturn this->m->elastic_limit;\n}\n/* finis */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/cell.cpp b/src/GUI/cell.cpp
--- a/src/GUI/cell.cpp	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/GUI/cell.cpp	(date 1746622456560)
@@ -66,75 +66,7 @@
   return *this;
 }
 
-
-DivisionAxisType axis_type = static_cast<DivisionAxisType>(par.division_axis_type);
-Vector Cell::CalculateDivisionAxis(void) {
-    // Déclaration des variables locales
-    Vector axis;
-    Vector long_axis;
-    double width = 0.0;
-     switch(static_cast<DivisionAxisType>(par.division_axis_type)) {
-        case SHORTEST_AXIS:
-            // Calculer le grand axe puis prendre sa perpendiculaire
-            Length(&long_axis, &width);
-            axis = long_axis.Perp2D();
-            break;
-        }
-        case LONGEST_AXIS: {
-            // Utiliser le grand axe
-            Length(&long_axis, &width);
-            axis = long_axis;
-            break;
-        }
-        case RANDOM_AXIS: {
-            // Générer un axe aléatoire
-            double angle = 2 * Pi * RANDOM();
-            axis = Vector(cos(angle), sin(angle), 0);
-            break;
-        }
-        /*case MECHANICAL_AXIS: {
-            // Calcul basé sur les contraintes mécaniques
-            Vector stress_direction;
-
-            // Sommation des forces sur tous les nœuds
-            for (list<Node*>::iterator i = nodes.begin(); i != nodes.end(); i++) {
-                stress_direction += (*i)->CalcForce();
-            }
-
-            if (stress_direction.Norm() > 1e-6) {
-                // Direction perpendiculaire à la contrainte principale
-                axis = stress_direction.Normalised().Perp2D();
-            } else {
-                // Par défaut, utiliser le grand axe
-                Length(&long_axis, &width);
-                axis = long_axis;
-            }
-            break;
-        }*/
-        default: {
-            // Par défaut, utiliser le petit axe
-            Length(&long_axis, &width);
-            axis = long_axis.Perp2D();
-            break;
-        }
-    }
-
-    // Définir division_axis pour la cellule si nécessaire
-    if (division_axis) {
-        *division_axis = axis;
-    }
-
-    return axis;
-}
-
-void Cell::Divide(void) {
-    Vector division_axis = CalculateDivisionAxis();
-    DivideOverAxis(division_axis);
-}
-
-
-
-void Cell::DivideOverAxis(Vector axis) 
+void Cell::DivideOverAxis(Vector axis)
 {
   // Build a wall
   // ->  find the position of the wall
@@ -159,7 +91,7 @@
 
       new_node_locations.push_back(i);
 
-    }		
+    }
     prev_cross_z=cross.z;
   }
 
@@ -195,7 +127,7 @@
     if ((*w)->c1 == this) {
 
       // invert wall?
-      (*w)->c1 = (*w)->c2;      
+      (*w)->c1 = (*w)->c2;
       (*w)->c2 = m->boundary_polygon;
 
       Node *n1 = (*w)->n1;
@@ -222,7 +154,7 @@
 
 #ifdef QDEBUG
       if ((*w)) {
-	qDebug() << "Wall " << (*w)->Index() << " says: c1 = " 
+	qDebug() << "Wall " << (*w)->Index() << " says: c1 = "
 		 << (*w)->c1->Index() << ", c2 = " << (*w)->c2->Index() << endl;
       }
 #endif
@@ -230,7 +162,7 @@
     } else {
 #ifdef QDEBUG
       qDebug() << "Not killing wall." << endl;
-      qDebug() << "Wall " << (*w)->Index() << " says: c1 = " 
+      qDebug() << "Wall " << (*w)->Index() << " says: c1 = "
 	       << (*w)->c1->Index() << ", c2 = " << (*w)->c2->Index() << endl;
 #endif
     }
@@ -267,7 +199,7 @@
       no.MarkDead();
     } else {
       // register node with outside world
-      if (find_if( no.owners.begin(), no.owners.end(), 
+      if (find_if( no.owners.begin(), no.owners.end(),
 		   [this](auto neighbor){return neighbor.CellEquals(m->boundary_polygon->Index());} ) == no.owners.end() ) {
 	tmp.cell = m->boundary_polygon;
 	no.owners.push_back(tmp);
@@ -296,7 +228,7 @@
 	find_if((*i)->owners.begin(),
 		(*i)->owners.end(),
 		 [this](auto neighbor){return neighbor.CellEquals(this->Index());});
-      if (neighb_with_this_cell!=(*i)->owners.end()) 
+      if (neighb_with_this_cell!=(*i)->owners.end())
 	(*i)->owners.erase(neighb_with_this_cell);
     }
 
@@ -341,12 +273,12 @@
     }
     Vector v4 = *(*nb);
 
-    double denominator = 
+    double denominator =
       (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);
 
-    double ua = 
+    double ua =
       ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;
-    double ub = 
+    double ub =
       ((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;
 
 
@@ -356,11 +288,11 @@
       // yes, intersection detected. Push the location to the list of iterators
       new_node_locations.push_back(nb);
 
-    } 
+    }
   }
 
 #ifdef QDEBUG
-  if (new_node_locations.size()<2) { 
+  if (new_node_locations.size()<2) {
     qDebug() << "Line does not intersect with two edges of Cell " << Index() << endl;
     qDebug() << "new_node_locations.size() = " << new_node_locations.size() << endl;
     return false;
@@ -372,7 +304,7 @@
   qDebug() << "Location of new nodes: " << (**i)->Index() << " and ";
 
   ++i;
-  j = *i; 
+  j = *i;
   if (j==nodes.begin()) j=nodes.end(); j--;
 
   qDebug() << (*j)->Index() << endl;
@@ -620,14 +552,14 @@
     list<Node *>::iterator nb=*i;
     if (nb == nodes.begin()) {
       nb = nodes.end();
-    } 
+    }
     nb--;
-    Vector v4=*( *nb ); 
+    Vector v4=*( *nb );
 
-    double denominator = 
+    double denominator =
       (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);
 
-    double ua = 
+    double ua =
       ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;
 
     double intersec_x = v1.x + ua*(v2.x-v1.x);
@@ -657,7 +589,7 @@
       new_node[nnc] = *(**i);
       new_node_ind[nnc] = **i;
       //cerr << **i << endl ;
-    } else 
+    } else
       if ( (*(*nb) - *n).Norm() < collapse_node_threshold * elem_length ) {
 	new_node_flag[nnc]=2;
 	new_node[nnc] = *(*nb);
@@ -676,7 +608,7 @@
 
     Cell *neighbor_cell=0; // we need this to split up the "Wall" objects.
 
-    // for both divided edges: 
+    // for both divided edges:
     //      insert its new node into all cells that own the divided edge
     // but only if it really is a new node:
     if (new_node_flag[i]!=0) {
@@ -689,14 +621,14 @@
 	   boundary = SAM;
 	   daughter->boundary = SAM;
 	   boundary_touched_flag = true;
-	*/ 
+	*/
       }
 
     } else {
 
       // (Construct a list of all owners:)
       // really construct the new node (if this is a new node)
-      new_node_ind[i] = 
+      new_node_ind[i] =
 	m->AddNode(new Node (new_node[i]) );
 
 
@@ -736,7 +668,7 @@
 #ifdef QDEBUG
 	qDebug() << "Index of the first node: " << div_edges[i].first->Index() << endl;
 	qDebug() << "Index of the second node: " << div_edges[i].second->Index() << endl;
-	qDebug() << "Boundary proceeds from: " <<  div_edges[i].first->Index() 
+	qDebug() << "Boundary proceeds from: " <<  div_edges[i].first->Index()
 		 << "to: " << (m->findNextBoundaryNode(div_edges[i].first))->Index() << endl << endl;
 #endif
 	new_node_ind[i]->SetBoundary();
@@ -762,7 +694,7 @@
 	} else {
 	  // insert before second node, so leave ins_pos as it is,
 	  // that is: incremented
-	  m->boundary_polygon->nodes.insert(ins_pos, new_node_ind[i]);	
+	  m->boundary_polygon->nodes.insert(ins_pos, new_node_ind[i]);
 	  // .. set the neighbors of the new node ...
 	}
       }
@@ -780,17 +712,17 @@
 	   back_inserter(owners));
 
 
-      // find first non-self duplicate in the owners: 
+      // find first non-self duplicate in the owners:
       // cells owning the same two nodes
       // share an edge with me
       owners.sort( [](auto neighbor_a, auto neighbor_b){return neighbor_a.Cmp(neighbor_b);} );
 
 
-#ifdef QDEBUG  
+#ifdef QDEBUG
       list<Neighbor> unique_owners;
       copy(owners.begin(), owners.end(), back_inserter(unique_owners));
       unique_owners.unique( mem_fn( &Neighbor::Eq ) );
-      qDebug() << "The dividing edge nodes: " << div_edges[i].first->Index() 
+      qDebug() << "The dividing edge nodes: " << div_edges[i].first->Index()
 	       << " and " << div_edges[i].second->Index() << " are owned by cells: ";
 
       // spit out each owners' cell index
@@ -815,7 +747,7 @@
 #endif
 	  edge_owners.push_back(*it);
 	}
-      } 
+      }
 
       if (edge_owners.size() > 1){
 	// Remove the boundary polygon - if its there
@@ -837,7 +769,7 @@
       list<Neighbor>::iterator c = (edge_owners.size() != 0) ? edge_owners.begin() : edge_owners.end();
 
       // (can we have more than one neighboring cell here??)
-      if (c!=owners.end()) { 
+      if (c!=owners.end()) {
 	neighbor_cell = c->cell;
 	if (c->cell == NULL) {
 		cout << "error";
@@ -878,7 +810,7 @@
 	   back_inserter(owners));
 
 
-      // find first non-self duplicate in the owners: 
+      // find first non-self duplicate in the owners:
       // cells owning the same two nodes
       // share an edge with me
       owners.sort( mem_fn ( &Neighbor::Cmp ) );
@@ -891,7 +823,7 @@
 
       if (c!=owners.end())
 	neighbor_cell = c->cell;
-      else 
+      else
 	neighbor_cell = 0;
     }
 
@@ -992,7 +924,7 @@
       start++;
       if (start==nodes.end())
 	start=nodes.begin();
-    }  
+    }
 
     stop=new_node_locations.back();
     if (new_node_flag[1]==2) {
@@ -1053,7 +985,7 @@
       new_nodes_parent.push_back( *i );
 
       i++;
-      if (i==nodes.end()) 
+      if (i==nodes.end())
 	i = nodes.begin();
     };
   }
@@ -1124,8 +1056,8 @@
 
   // move the new nodes to the parent
   nodes.clear();
-  copy( new_nodes_parent.begin(), 
-	new_nodes_parent.end(), 
+  copy( new_nodes_parent.begin(),
+	new_nodes_parent.end(),
 	back_inserter(nodes) );
 
 
@@ -1135,7 +1067,7 @@
 
   if (boundary_touched_flag) {
     m->boundary_polygon->ConstructConnections();
-  } 
+  }
 
   // collecting neighbors of divided cell
   list<CellBase *> broken_neighbors;
@@ -1336,6 +1268,7 @@
 	double patrialLengthAfter =  ((*after2) - (*node)).Norm();
 	double ratio = patrialLengthBefore / (patrialLengthBefore+patrialLengthAfter);
 	double elastic_limit = this->m->elastic_limit;
+
 	WallElementInfo element;
 	if (!reverse) {
 		this->fillWallElementInfo(&element, before1, node);
@@ -1383,7 +1316,7 @@
 
   // Displace whole cell, add resulting energy to dh,
   // and accept displacement if energetically favorable
-  // 
+  //
   // Method is called if a "fixed" node is displaced
 
   // Warning: length constraint not yet  CORRECTLY implemented for this function
@@ -1410,7 +1343,7 @@
       if (n->getCell()!=this) {
 	length_edges.push_back( pair <Node *,Node *> (*i, n->nb1) );
 	length_edges.push_back( pair <Node *,Node *> (*i, n->nb2) );
-	old_length += 
+	old_length +=
 	  DSQR(Node::target_length-(*(*i)-*(n->nb1)).Norm())+
 	  DSQR(Node::target_length-(*(*i)-*(n->nb2)).Norm());
       }
@@ -1450,7 +1383,7 @@
     list<CellBase *>::const_iterator nb_it = neighbors.begin();
     for (vector<double>::const_iterator ar_it = cellareas.begin(); ar_it!=cellareas.end(); ( ar_it++, nb_it++) ) {
       ((Cell *)(*nb_it))->area = *ar_it;
-      (*nb_it)->SetIntegrals(); 
+      (*nb_it)->SetIntegrals();
     }
 
     //cerr << endl;
@@ -1479,7 +1412,7 @@
   for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {
     for (list<Neighbor>::const_iterator n=(*i)->owners.begin(); n!=(*i)->owners.end(); n++) {
       if (n->getCell()==this) {
-	length_contribution += 
+	length_contribution +=
 	  DSQR(Node::target_length-(*(*i)-*(n->nb1)).Norm()) +
 	  DSQR(Node::target_length-(*(*i)-*(n->nb2)).Norm());
       }
@@ -1501,6 +1434,7 @@
 
 
 
+
 bool Cell::SelfIntersect(void)
 {
   // The (obvious) O(N*N) algorithm
@@ -1517,32 +1451,32 @@
 
   for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {
 
-    list<Node *>::const_iterator j=i; 
+    list<Node *>::const_iterator j=i;
     ++j;
-    for (; j!=nodes.end(); j++) 
+    for (; j!=nodes.end(); j++)
       {
-	
+
 	Vector v1 = *(*i);
 	list<Node *>::const_iterator nb=i;
 	nb++;
 	if (nb == nodes.end()) {
 	  nb = nodes.begin();
-	} 
+	}
 	Vector v2 = *(*nb);
 	Vector v3 = *(*j);
 	nb=j;
 	nb++;
 	if (nb == nodes.end()) {
 	  nb = nodes.begin();
-	} 
-	Vector v4=*( *nb ); 
+	}
+	Vector v4=*( *nb );
 
-	double denominator = 
+	double denominator =
 	  (v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);
 
-	double ua = 
+	double ua =
 	  ((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;
-	double ub = 
+	double ub =
 	  ((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;
 
 
@@ -1561,7 +1495,7 @@
 bool Cell::MoveSelfIntersectsP(Node *moving_node_ind, Vector new_pos)
 {
 
-  // Check whether the polygon will self-intersect if moving_node_ind 
+  // Check whether the polygon will self-intersect if moving_node_ind
   // were displaced to new_pos
 
   // Compare the two new edges against each other edge
@@ -1581,9 +1515,9 @@
   nb++;
   if (nb == nodes.end()) {
     nb = nodes.begin();
-  } 
+  }
 
-  neighbor_of_moving_node[0]=*(*nb); 
+  neighbor_of_moving_node[0]=*(*nb);
 
   nb=moving_node_ind_pos;
   if (nb == nodes.begin()) {
@@ -1591,7 +1525,7 @@
   }
   nb--;
 
-  neighbor_of_moving_node[1]=*( *nb ); 
+  neighbor_of_moving_node[1]=*( *nb );
 
 
   for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {
@@ -1600,7 +1534,7 @@
       nb++;
       if (nb == nodes.end()) {
 	nb = nodes.begin();
-      } 
+      }
       if (*i == moving_node_ind || *nb == moving_node_ind) {
 	// do not compare to self
 	continue;
@@ -1609,12 +1543,12 @@
       Vector v3 = *(*i);
       Vector v4 = *(*nb);
 
-      double denominator = 
+      double denominator =
 	(v4.y - v3.y)*(neighbor_of_moving_node[j].x - new_pos.x) - (v4.x - v3.x)*(neighbor_of_moving_node[j].y - new_pos.y);
 
-      double ua = 
+      double ua =
 	((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;
-      double ub = 
+      double ub =
 	((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x))/denominator;
 
       if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {
@@ -1632,40 +1566,40 @@
 
 bool Cell::MoveSelfIntersectsP(Node *moving_node_ind, Vector new_pos)
 {
-    
+
     // Check whether the polygon will self-intersect if moving_node_ind
     // were displaced to new_pos
-    
+
     // Compare the two new edges against each other edge
-    
+
     // O(2*N)
-    
+
     // method used for segment intersection:
     // http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/
-    
+
     Vector neighbor_of_moving_node[2];
-    
+
     //cerr << "list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\n";
     list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);
-    
+
     list<Node *>::const_iterator nb = moving_node_ind_pos;
     //cerr << "Done\n";
     nb++;
     if (nb == nodes.end()) {
         nb = nodes.begin();
     }
-    
+
     neighbor_of_moving_node[0]=*(*nb);
-    
+
     nb=moving_node_ind_pos;
     if (nb == nodes.begin()) {
         nb = nodes.end();
     }
     nb--;
-    
+
     neighbor_of_moving_node[1]=*( *nb );
-    
-    
+
+
     for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {
         for (int j=0;j<2;j++) { // loop over the two neighbors of moving node
             list<Node *>::const_iterator nb=i;
@@ -1677,13 +1611,13 @@
                 // do not compare to self
                 continue;
             }
-            
+
             Vector v3 = *(*i);
             Vector v4 = *(*nb);
-            
+
             double denominator =
             (v4.y - v3.y)*(neighbor_of_moving_node[j].x - new_pos.x) - (v4.x - v3.x)*(neighbor_of_moving_node[j].y - new_pos.y);
-            
+
            //  double ua =
            //  ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;
            //  double ub =
@@ -1691,20 +1625,20 @@
 
             double numera = ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x));
             double numerb = ((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x));
-            
+
             // Are the wall elements coincident?
             if (fabs(numera) < TINY && fabs(numerb) < TINY && fabs(denominator) < TINY) {
                 return true;
             }
-            
+
             // Are the wall elements parallel?
             if (fabs(denominator) < TINY) {
                 continue;
             }
             double ua = numera / denominator;
             double ub = numerb / denominator;
-            
-            
+
+
             //if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {
             if ( ( 0 < ua && ua < 1. ) && ( 0 < ub && ub < 1.) ) {
                 //cerr << "ua = " << ua << ", ub = " << ub << endl;
@@ -1720,84 +1654,84 @@
 
 bool Cell::LinePieceIntersectsP(const Vector n1, const Vector n2) const
 {
-    
+
     // Check whether the polygon will self-intersect if moving_node_ind
     // were displaced to new_pos
-    
+
     // Compare the two new edges against each other edge
-    
+
     // O(2*N)
-    
+
     // method used for segment intersection:
     // http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/
-    
+
     /*Vector neighbor_of_moving_node[2];
-    
+
     //cerr << "list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);\n";
     list<Node *>::const_iterator moving_node_ind_pos = find (nodes.begin(),nodes.end(),moving_node_ind);
-    
+
     list<Node *>::const_iterator nb = moving_node_ind_pos;
     //cerr << "Done\n";
     nb++;
     if (nb == nodes.end()) {
         nb = nodes.begin();
     }
-    
+
     neighbor_of_moving_node[0]=*(*nb);
-    
+
     nb=moving_node_ind_pos;
     if (nb == nodes.begin()) {
         nb = nodes.end();
     }
     nb--;
-    
+
     neighbor_of_moving_node[1]=*( *nb );
     */
-    
+
     for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) {
         list<Node *>::const_iterator nb=i;
         nb++;
         if (nb == nodes.end()) {
             nb = nodes.begin();
         }
-        
+
        /* if (*i == moving_node_ind || *nb == moving_node_ind) {
             // do not compare to self
             continue;
         }*/
-        
+
         Vector v3 = *(*i);
         Vector v4 = *(*nb);
-        
+
         double denominator =
         (v4.y - v3.y)*(n1.x - n2.x) - (v4.x - v3.x)*(n1.y - n2.y);
-        
+
         /* double ua =
          ((v4.x - v3.x)*(new_pos.y - v3.y) - (v4.y - v3.y)*(new_pos.x -v3.x))/denominator;
          double ub =
          ((neighbor_of_moving_node[j].x - new_pos.x)*(new_pos.y-v3.y) - (neighbor_of_moving_node[j].y- new_pos.y)*(new_pos.x - v3.x))/denominator;*/
         double numera = ((v4.x - v3.x)*(n1.y - v3.y) - (v4.y - v3.y)*(n1.x -v3.x));
         double numerb = ((n2.x - n1.x)*(n1.y-v3.y) - (n2.y- n1.y)*(n1.x - v3.x));
-        
+
         /* Are the wall elements coincident? */
         if (fabs(numera) < TINY && fabs(numerb) < TINY && fabs(denominator) < TINY) {
             return true;
         }
-        
+
         /* Are the wall elements parallel? */
         if (fabs(denominator) < TINY) {
             continue;
         }
         double ua = numera / denominator;
         double ub = numerb / denominator;
-        
-        
+
+
         //if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {
         if ( ( 0 < ua && ua < 1. ) && ( 0 < ub && ub < 1.) ) {
             //cerr << "ua = " << ua << ", ub = " << ub << endl;
             return true;
         }
-        
+
     }
     return false;
 }
@@ -1810,7 +1744,7 @@
   // Compare the line against each edge
   // method used: http://astronomy.swin.edu.au/~pbourke/geometry/lineline2d/
 
-  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++) 
+  for (list<Node *>::const_iterator i=nodes.begin(); i!=nodes.end(); i++)
     {
       Vector v3 = *(*i);
       list<Node *>::const_iterator nb=i;
@@ -1820,12 +1754,12 @@
       }
       Vector v4 = *(*nb);
 
-      double denominator = 
+      double denominator =
 	(v4.y - v3.y)*(v2.x - v1.x) - (v4.x - v3.x)*(v2.y - v1.y);
 
-      double ua = 
+      double ua =
 	((v4.x - v3.x)*(v1.y - v3.y) - (v4.y - v3.y)*(v1.x -v3.x))/denominator;
-      double ub = 
+      double ub =
 	((v2.x - v1.x)*(v1.y-v3.y) - (v2.y- v1.y)*(v1.x - v3.x))/denominator;
 
       if ( ( TINY < ua && ua < 1.-TINY ) && ( TINY < ub && ub < 1.-TINY ) ) {
@@ -1868,7 +1802,7 @@
   // previous one in list
   list<Node *>::const_iterator nb = (--corner_points.end());
 
-  // loop over list, 
+  // loop over list,
   for (list<Node *>::const_iterator i=corner_points.begin(); i!=corner_points.end(); ( i++, nb++) ) {
 
     if (nb==corner_points.end()) nb=corner_points.begin();
@@ -1894,13 +1828,13 @@
     for (list<Cell *>::const_iterator j=owning_cells.begin(); j!=owning_cells.end(); ( j++, prevj++) ) {
       if (prevj==owning_cells.end())
 	prevj=owning_cells.begin();
-      if (*j==*prevj) 
+      if (*j==*prevj)
 	duplicates.push_back(*j);
     }
 
     if (duplicates.size()==3) { // ignore cell boundary (this occurs only after the first division, I think)
       vector<Cell *>::iterator dup_it = find_if(duplicates.begin(),duplicates.end(),mem_fn(&Cell::BoundaryPolP) );
-      if (dup_it!=duplicates.end()) 
+      if (dup_it!=duplicates.end())
 	duplicates.erase(dup_it);
       else {
 	return;
@@ -1978,7 +1912,7 @@
 #endif
 
       flux[c] += phi;
-    }    
+    }
   }
 }
 
@@ -1993,7 +1927,7 @@
 
   // Draw the cell on a QCanvas object
 
-  if (DeadP()) { 
+  if (DeadP()) {
 #ifdef QDEBUG
     qDebug() << "Cell " << index << " not drawn, because dead." << endl;
 #endif
@@ -2118,7 +2052,7 @@
     item ->setPos(((offset[0]+i->x)*factor), ((offset[1]+i->y)*factor) );
       c->addItem(item);
           item->show();
-      
+
   }
 }
 
@@ -2129,19 +2063,19 @@
 
 // Draw any text in the cell's center
 void Cell::DrawText(QGraphicsScene *c, const QString &text) const {
-    
+
     Vector centroid = Centroid();
     QGraphicsSimpleTextItem *ctext = new QGraphicsSimpleTextItem ( text, 0);
    // ctext->setPen( QPen(QColor(par.textcolor)) );
     ctext->setBrush( QBrush(QColor(par.textcolor)) );
     ctext->setZValue(20);
     ctext->setFont( QFont( "Helvetica", par.cellnumsize, QFont::Normal) );
-    
+
     ctext ->setPos(((offset[0]+centroid.x)*factor),
                    ((offset[1]+centroid.y)*factor) );
     c->addItem(ctext);
     ctext->show();
-    
+
 }
 
 
@@ -2166,13 +2100,13 @@
   line->setZValue(2);
 
   line->setLine( ( (offset[0]+from.x)*factor ),
-		 ( (offset[1]+from.y)*factor ), 
+		 ( (offset[1]+from.y)*factor ),
 		 ( (offset[0]+to.x)*factor ),
 		 ( (offset[1]+to.y)*factor ) );
   line->setZValue(10);
     c->addItem(line);
   line->show();
-    
+
 }
 
 void Cell::DrawStrain(QGraphicsScene *c) const {
@@ -2201,7 +2135,7 @@
   arrow->setZValue(2);
 
   arrow->setLine( ( (offset[0]+from.x)*factor ),
-		  ( (offset[1]+from.y)*factor ), 
+		  ( (offset[1]+from.y)*factor ),
 		  ( (offset[0]+to.x)*factor ),
 		  ( (offset[1]+to.y)*factor ) );
   arrow->setZValue(10);
@@ -2249,14 +2183,14 @@
     // Now, walk to the second node of the edge in the list of nodes
     for (list<Node *>::const_iterator n=++first_node_edge; n!=second_node_edge_plus_1; ++n ) {
       if (n==nodes.end())
-	n=nodes.begin(); /* wrap around */ 
-      list<Node *>::const_iterator prev_n = n; 
+	n=nodes.begin(); /* wrap around */
+      list<Node *>::const_iterator prev_n = n;
       if (prev_n==nodes.begin())
 	prev_n=nodes.end();
       --prev_n;
 
-      // Note that Node derives from a Vector, so we can do vector calculus as defined in vector.h 
-      sum_length += (*(*prev_n) - *(*n)).Norm(); 
+      // Note that Node derives from a Vector, so we can do vector calculus as defined in vector.h
+      sum_length += (*(*prev_n) - *(*n)).Norm();
 
       //cerr << "Node " << *prev_n << " to " << *n << ", cumulative length = " << sum_length << endl;
     }
@@ -2372,4 +2306,5 @@
 double Cell::elastic_limit() {
 	return this->m->elastic_limit;
 }
+
 /* finis */
Index: src/Library/parameter.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  This file is part of the Virtual Leaf.\n *\n *  VirtualLeaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  VirtualLeaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n// WARNING: This file is automatically generated by make_parameter_source.pl.\n// Do not edit. All edits will be discarded.\n\n#include \"parameter.h\"\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cerrno>\n#include <iostream>\n#include <sstream>\n#include \"output.h\"\n#include \"parse.h\"\n#include \"xmlwrite.h\"\n#include \"warning.h\"\n#include <QLocale>\n#include <QDir>\n#include <QStringList>\n\nusing namespace std;\n\nstatic const std::string _module_id(\"$Id$\");\n\nParameter::Parameter() {\n  arrowcolor = strdup(\"white\");\n  arrowsize = 100;\n  textcolor = strdup(\"red\");\n  cellnumsize = 1;\n  nodenumsize = 1;\n  node_mag = 1.0;\n  outlinewidth = 1.0;\n  cell_outline_color = strdup(\"forestgreen\");\n  resize_stride = 0;\n  export_interval = 0;\n  export_fn_prefix = strdup(\"cell.\");\n  storage_stride = 10;\n  xml_storage_stride = 500;\n  datadir = strdup(\".\");\n  datadir = AppendHomeDirIfPathRelative(datadir);\n  T = 1.0;\n  lambda_length = 100.;\n  yielding_threshold = 4.;\n  lambda_celllength = 0.;\n  target_length = 60.;\n  cell_expansion_rate = 1.;\n  cell_div_expansion_rate = 0.;\n  auxin_dependent_growth = true;\n  ode_accuracy = 1e-4;\n  mc_stepsize = 0.4;\n  mc_cell_stepsize = 0.2;\n  energy_threshold = 1000.;\n  bend_lambda = 0.;\n  alignment_lambda = 0.;\n  rel_cell_div_threshold = 2.;\n  rel_perimeter_stiffness = 2;\n  collapse_node_threshold = 0.05;\n  morphogen_div_threshold = 0.2;\n  morphogen_expansion_threshold = 0.01;\n  copy_wall = true;\n  source = 0.;\n  D = new double[15];\n  D[0] = 0.;\n  D[1] = 0.0;\n  D[2] = 0.0;\n  D[3] = 0.;\n  D[4] = 0.;\n  D[5] = 0.;\n  D[6] = 0.;\n  D[7] = 0.;\n  D[8] = 0.;\n  D[9] = 0.;\n  D[10] = 0.;\n  D[11] = 0.;\n  D[12] = 0.;\n  D[13] = 0.;\n  D[14] = 0.;\n  initval = new double[15];\n  initval[0] = 0.;\n  initval[1] = 0.;\n  initval[2] = 0.;\n  initval[3] = 0.;\n  initval[4] = 0.;\n  initval[5] = 0.;\n  initval[6] = 0.;\n  initval[7] = 0.;\n  initval[8] = 0.;\n  initval[9] = 0.;\n  initval[10] = 0.;\n  initval[11] = 0.;\n  initval[12] = 0.;\n  initval[13] = 0.;\n  initval[14] = 0.;\n  k1 = 1.;\n  k2 = 0.3;\n  r = 1.;\n  kr = 1.;\n  km = 1.;\n  Pi_tot = 1.;\n  transport = 0.036;\n  ka = 1;\n  pin_prod = 0.001;\n  pin_prod_in_epidermis = 0.1;\n  pin_breakdown = 0.001;\n  pin_breakdown_internal = 0.001;\n  aux1prod = 0.001;\n  aux1prodmeso = 0.;\n  aux1decay = 0.001;\n  aux1decaymeso = 0.1;\n  aux1transport = 0.036;\n  aux_cons = 0.;\n  aux_breakdown = 0.;\n  kaux1 = 1;\n  kap = 1;\n  leaf_tip_source = 0.001;\n  sam_efflux = 0.0001;\n  sam_auxin = 10.;\n  sam_auxin_breakdown = 0;\n  van3prod = 0.002;\n  van3autokat = 0.1;\n  van3sat = 10;\n  k2van3 = 0.3;\n  dt = 0.1;\n  rd_dt = 1.0;\n  movie = false;\n  nit = 100000;\n  maxt = 1000.;\n  rseed = -1;\n  constituous_expansion_limit = 16;\n  vessel_inh_level = 1;\n  vessel_expansion_rate = 0.25;\n  d = 0.;\n  e = 0.;\n  f = 0.;\n  c = 0.;\n  mu = 0.;\n  nu = 0.;\n  rho0 = 0.;\n  rho1 = 0.;\n  c0 = 0.;\n  gamma = 0.;\n  eps = 0.;\n  betaN = 0.;\n  gammaN = 0.;\n  betaD = 0.;\n  gammaD = 0.;\n  betaR = 0.;\n  gammaR = 0.;\n  tau = 0.;\n  kt = 0.;\n  kc = 0.;\n  krs = 0.;\n  k = new double[15];\n  k[0] = 0.;\n  k[1] = 0.0;\n  k[2] = 0.0;\n  k[3] = 0.;\n  k[4] = 0.;\n  k[5] = 0.;\n  k[6] = 0.;\n  k[7] = 0.;\n  k[8] = 0.;\n  k[9] = 0.;\n  k[10] = 0.;\n  k[11] = 0.;\n  k[12] = 0.;\n  k[13] = 0.;\n  k[14] = 0.;\n  i1 = 0;\n  i2 = 0;\n  b4 = false;\n  dir1 = strdup(\".\");\n  dir2 = strdup(\".\");\n  division_axis_type = 0;\n}\n\nParameter::~Parameter() {\n    \n// destruct parameter object\n// free string parameter\nCleanUp();\n}\n\nvoid Parameter::CleanUp(void) {\n  if (arrowcolor) \n     free(arrowcolor);\n  if (textcolor) \n     free(textcolor);\n  if (cell_outline_color) \n     free(cell_outline_color);\n  if (export_fn_prefix) \n     free(export_fn_prefix);\n  if (datadir) \n     free(datadir);\n  if (D) \n     free(D);\n  if (initval) \n     free(initval);\n  if (k) \n     free(k);\n  if (dir1) \n     free(dir1);\n  if (dir2) \n     free(dir2);\n\n}\n\nvoid Parameter::Read(const char *filename) {\n    \n  static bool ReadP=false;\n\n  if (ReadP) {\n\n    //throw \"Run Time Error in parameter.cpp: Please Read parameter file only once!!\";\n    CleanUp();\n\t\n  } else\n    ReadP=true;\n\n  FILE *fp=OpenReadFile(filename);\n\n\n  arrowcolor = sgetpar(fp, \"arrowcolor\", \"white\", true);\n  arrowsize = fgetpar(fp, \"arrowsize\", 100, true);\n  textcolor = sgetpar(fp, \"textcolor\", \"red\", true);\n  cellnumsize = igetpar(fp, \"cellnumsize\", 1, true);\n  nodenumsize = igetpar(fp, \"nodenumsize\", 1, true);\n  node_mag = fgetpar(fp, \"node_mag\", 1.0, true);\n  outlinewidth = fgetpar(fp, \"outlinewidth\", 1.0, true);\n  cell_outline_color = sgetpar(fp, \"cell_outline_color\", \"forestgreen\", true);\n  resize_stride = igetpar(fp, \"resize_stride\", 0, true);\n  export_interval = igetpar(fp, \"export_interval\", 0, true);\n  export_fn_prefix = sgetpar(fp, \"export_fn_prefix\", \"cell.\", true);\n  storage_stride = igetpar(fp, \"storage_stride\", 10, true);\n  xml_storage_stride = igetpar(fp, \"xml_storage_stride\", 500, true);\n  datadir = sgetpar(fp, \"datadir\", \".\", true);\n  datadir = AppendHomeDirIfPathRelative(datadir);\n  if (strcmp(datadir, \".\"))\n    MakeDir(datadir);\n  T = fgetpar(fp, \"T\", 1.0, true);\n  lambda_length = fgetpar(fp, \"lambda_length\", 100., true);\n  yielding_threshold = fgetpar(fp, \"yielding_threshold\", 4., true);\n  lambda_celllength = fgetpar(fp, \"lambda_celllength\", 0., true);\n  target_length = fgetpar(fp, \"target_length\", 60., true);\n  cell_expansion_rate = fgetpar(fp, \"cell_expansion_rate\", 1., true);\n  cell_div_expansion_rate = fgetpar(fp, \"cell_div_expansion_rate\", 0., true);\n  auxin_dependent_growth = bgetpar(fp, \"auxin_dependent_growth\", true, true);\n  ode_accuracy = fgetpar(fp, \"ode_accuracy\", 1e-4, true);\n  mc_stepsize = fgetpar(fp, \"mc_stepsize\", 0.4, true);\n  mc_cell_stepsize = fgetpar(fp, \"mc_cell_stepsize\", 0.2, true);\n  energy_threshold = fgetpar(fp, \"energy_threshold\", 1000., true);\n  bend_lambda = fgetpar(fp, \"bend_lambda\", 0., true);\n  alignment_lambda = fgetpar(fp, \"alignment_lambda\", 0., true);\n  rel_cell_div_threshold = fgetpar(fp, \"rel_cell_div_threshold\", 2., true);\n  rel_perimeter_stiffness = fgetpar(fp, \"rel_perimeter_stiffness\", 2, true);\n  collapse_node_threshold = fgetpar(fp, \"collapse_node_threshold\", 0.05, true);\n  morphogen_div_threshold = fgetpar(fp, \"morphogen_div_threshold\", 0.2, true);\n  morphogen_expansion_threshold = fgetpar(fp, \"morphogen_expansion_threshold\", 0.01, true);\n  copy_wall = bgetpar(fp, \"copy_wall\", true, true);\n  source = fgetpar(fp, \"source\", 0., true);\n  D = dgetparlist(fp, \"D\", 15, true);\n  initval = dgetparlist(fp, \"initval\", 15, true);\n  k1 = fgetpar(fp, \"k1\", 1., true);\n  k2 = fgetpar(fp, \"k2\", 0.3, true);\n  r = fgetpar(fp, \"r\", 1., true);\n  kr = fgetpar(fp, \"kr\", 1., true);\n  km = fgetpar(fp, \"km\", 1., true);\n  Pi_tot = fgetpar(fp, \"Pi_tot\", 1., true);\n  transport = fgetpar(fp, \"transport\", 0.036, true);\n  ka = fgetpar(fp, \"ka\", 1, true);\n  pin_prod = fgetpar(fp, \"pin_prod\", 0.001, true);\n  pin_prod_in_epidermis = fgetpar(fp, \"pin_prod_in_epidermis\", 0.1, true);\n  pin_breakdown = fgetpar(fp, \"pin_breakdown\", 0.001, true);\n  pin_breakdown_internal = fgetpar(fp, \"pin_breakdown_internal\", 0.001, true);\n  aux1prod = fgetpar(fp, \"aux1prod\", 0.001, true);\n  aux1prodmeso = fgetpar(fp, \"aux1prodmeso\", 0., true);\n  aux1decay = fgetpar(fp, \"aux1decay\", 0.001, true);\n  aux1decaymeso = fgetpar(fp, \"aux1decaymeso\", 0.1, true);\n  aux1transport = fgetpar(fp, \"aux1transport\", 0.036, true);\n  aux_cons = fgetpar(fp, \"aux_cons\", 0., true);\n  aux_breakdown = fgetpar(fp, \"aux_breakdown\", 0., true);\n  kaux1 = fgetpar(fp, \"kaux1\", 1, true);\n  kap = fgetpar(fp, \"kap\", 1, true);\n  leaf_tip_source = fgetpar(fp, \"leaf_tip_source\", 0.001, true);\n  sam_efflux = fgetpar(fp, \"sam_efflux\", 0.0001, true);\n  sam_auxin = fgetpar(fp, \"sam_auxin\", 10., true);\n  sam_auxin_breakdown = fgetpar(fp, \"sam_auxin_breakdown\", 0, true);\n  van3prod = fgetpar(fp, \"van3prod\", 0.002, true);\n  van3autokat = fgetpar(fp, \"van3autokat\", 0.1, true);\n  van3sat = fgetpar(fp, \"van3sat\", 10, true);\n  k2van3 = fgetpar(fp, \"k2van3\", 0.3, true);\n  dt = fgetpar(fp, \"dt\", 0.1, true);\n  rd_dt = fgetpar(fp, \"rd_dt\", 1.0, true);\n  movie = bgetpar(fp, \"movie\", false, true);\n  nit = igetpar(fp, \"nit\", 100000, true);\n  maxt = fgetpar(fp, \"maxt\", 1000., true);\n  rseed = igetpar(fp, \"rseed\", -1, true);\n  constituous_expansion_limit = igetpar(fp, \"constituous_expansion_limit\", 16, true);\n  vessel_inh_level = fgetpar(fp, \"vessel_inh_level\", 1, true);\n  vessel_expansion_rate = fgetpar(fp, \"vessel_expansion_rate\", 0.25, true);\n  d = fgetpar(fp, \"d\", 0., true);\n  e = fgetpar(fp, \"e\", 0., true);\n  f = fgetpar(fp, \"f\", 0., true);\n  c = fgetpar(fp, \"c\", 0., true);\n  mu = fgetpar(fp, \"mu\", 0., true);\n  nu = fgetpar(fp, \"nu\", 0., true);\n  rho0 = fgetpar(fp, \"rho0\", 0., true);\n  rho1 = fgetpar(fp, \"rho1\", 0., true);\n  c0 = fgetpar(fp, \"c0\", 0., true);\n  gamma = fgetpar(fp, \"gamma\", 0., true);\n  eps = fgetpar(fp, \"eps\", 0., true);\n  betaN = fgetpar(fp, \"betaN\", 0., true);\n  gammaN = fgetpar(fp, \"gammaN\", 0., true);\n  betaD = fgetpar(fp, \"betaD\", 0., true);\n  gammaD = fgetpar(fp, \"gammaD\", 0., true);\n  betaR = fgetpar(fp, \"betaR\", 0., true);\n  gammaR = fgetpar(fp, \"gammaR\", 0., true);\n  tau = fgetpar(fp, \"tau\", 0., true);\n  kt = fgetpar(fp, \"kt\", 0., true);\n  kc = fgetpar(fp, \"kc\", 0., true);\n  krs = fgetpar(fp, \"krs\", 0., true);\n  k = dgetparlist(fp, \"k\", 15, true);\n  i1 = igetpar(fp, \"i1\", 0, true);\n  i2 = fgetpar(fp, \"i2\", 0, true);\n  b4 = bgetpar(fp, \"b4\", false, true);\n  dir1 = sgetpar(fp, \"dir1\", \".\", true);\n  if (strcmp(dir1, \".\"))\n    MakeDir(dir1);\n  dir2 = sgetpar(fp, \"dir2\", \".\", true);\n  if (strcmp(dir2, \".\"))\n    MakeDir(dir2);\n  division_axis_type = igetpar(fp, \"division_axis_type\", 0, true);\n}\n\nconst char *sbool(const bool &p) {\n\n  const char *true_str=\"true\";\n  const char *false_str=\"false\";\n  if (p)\n    return true_str;\n  else\n    return false_str;\n}\n\nvoid Parameter::Write(ostream &os) const {\n\n\n  if (arrowcolor) \n  os << \" arrowcolor = \" << arrowcolor << endl;\n  os << \" arrowsize = \" << arrowsize << endl;\n\n  if (textcolor) \n  os << \" textcolor = \" << textcolor << endl;\n  os << \" cellnumsize = \" << cellnumsize << endl;\n  os << \" nodenumsize = \" << nodenumsize << endl;\n  os << \" node_mag = \" << node_mag << endl;\n  os << \" outlinewidth = \" << outlinewidth << endl;\n\n  if (cell_outline_color) \n  os << \" cell_outline_color = \" << cell_outline_color << endl;\n  os << \" resize_stride = \" << resize_stride << endl;\n  os << \" export_interval = \" << export_interval << endl;\n\n  if (export_fn_prefix) \n  os << \" export_fn_prefix = \" << export_fn_prefix << endl;\n  os << \" storage_stride = \" << storage_stride << endl;\n  os << \" xml_storage_stride = \" << xml_storage_stride << endl;\n  if (datadir) {\n                                     QDir dataDir = QDir::home().relativeFilePath(datadir);\n                                     os << \" datadir = \" << dataDir.dirName().toStdString() << endl;\n                                 }\n                                 else {\n                                     os << \"datadir = .\" << endl;\n                                 }\n  os << \" T = \" << T << endl;\n  os << \" lambda_length = \" << lambda_length << endl;\n  os << \" yielding_threshold = \" << yielding_threshold << endl;\n  os << \" lambda_celllength = \" << lambda_celllength << endl;\n  os << \" target_length = \" << target_length << endl;\n  os << \" cell_expansion_rate = \" << cell_expansion_rate << endl;\n  os << \" cell_div_expansion_rate = \" << cell_div_expansion_rate << endl;\n  os << \" auxin_dependent_growth = \" << sbool(auxin_dependent_growth) << endl;\n  os << \" ode_accuracy = \" << ode_accuracy << endl;\n  os << \" mc_stepsize = \" << mc_stepsize << endl;\n  os << \" mc_cell_stepsize = \" << mc_cell_stepsize << endl;\n  os << \" energy_threshold = \" << energy_threshold << endl;\n  os << \" bend_lambda = \" << bend_lambda << endl;\n  os << \" alignment_lambda = \" << alignment_lambda << endl;\n  os << \" rel_cell_div_threshold = \" << rel_cell_div_threshold << endl;\n  os << \" rel_perimeter_stiffness = \" << rel_perimeter_stiffness << endl;\n  os << \" collapse_node_threshold = \" << collapse_node_threshold << endl;\n  os << \" morphogen_div_threshold = \" << morphogen_div_threshold << endl;\n  os << \" morphogen_expansion_threshold = \" << morphogen_expansion_threshold << endl;\n  os << \" copy_wall = \" << sbool(copy_wall) << endl;\n  os << \" source = \" << source << endl;\n  os << \" D = \"<< D[0] << \", \" << D[1] << \", \" << D[2] << \", \" << D[3] << \", \" << D[4] << \", \" << D[5] << \", \" << D[6] << \", \" << D[7] << \", \" << D[8] << \", \" << D[9] << \", \" << D[10] << \", \" << D[11] << \", \" << D[12] << \", \" << D[13] << \", \" << D[14] << endl;\n  os << \" initval = \"<< initval[0] << \", \" << initval[1] << \", \" << initval[2] << \", \" << initval[3] << \", \" << initval[4] << \", \" << initval[5] << \", \" << initval[6] << \", \" << initval[7] << \", \" << initval[8] << \", \" << initval[9] << \", \" << initval[10] << \", \" << initval[11] << \", \" << initval[12] << \", \" << initval[13] << \", \" << initval[14] << endl;\n  os << \" k1 = \" << k1 << endl;\n  os << \" k2 = \" << k2 << endl;\n  os << \" r = \" << r << endl;\n  os << \" kr = \" << kr << endl;\n  os << \" km = \" << km << endl;\n  os << \" Pi_tot = \" << Pi_tot << endl;\n  os << \" transport = \" << transport << endl;\n  os << \" ka = \" << ka << endl;\n  os << \" pin_prod = \" << pin_prod << endl;\n  os << \" pin_prod_in_epidermis = \" << pin_prod_in_epidermis << endl;\n  os << \" pin_breakdown = \" << pin_breakdown << endl;\n  os << \" pin_breakdown_internal = \" << pin_breakdown_internal << endl;\n  os << \" aux1prod = \" << aux1prod << endl;\n  os << \" aux1prodmeso = \" << aux1prodmeso << endl;\n  os << \" aux1decay = \" << aux1decay << endl;\n  os << \" aux1decaymeso = \" << aux1decaymeso << endl;\n  os << \" aux1transport = \" << aux1transport << endl;\n  os << \" aux_cons = \" << aux_cons << endl;\n  os << \" aux_breakdown = \" << aux_breakdown << endl;\n  os << \" kaux1 = \" << kaux1 << endl;\n  os << \" kap = \" << kap << endl;\n  os << \" leaf_tip_source = \" << leaf_tip_source << endl;\n  os << \" sam_efflux = \" << sam_efflux << endl;\n  os << \" sam_auxin = \" << sam_auxin << endl;\n  os << \" sam_auxin_breakdown = \" << sam_auxin_breakdown << endl;\n  os << \" van3prod = \" << van3prod << endl;\n  os << \" van3autokat = \" << van3autokat << endl;\n  os << \" van3sat = \" << van3sat << endl;\n  os << \" k2van3 = \" << k2van3 << endl;\n  os << \" dt = \" << dt << endl;\n  os << \" rd_dt = \" << rd_dt << endl;\n  os << \" movie = \" << sbool(movie) << endl;\n  os << \" nit = \" << nit << endl;\n  os << \" maxt = \" << maxt << endl;\n  os << \" rseed = \" << rseed << endl;\n  os << \" constituous_expansion_limit = \" << constituous_expansion_limit << endl;\n  os << \" vessel_inh_level = \" << vessel_inh_level << endl;\n  os << \" vessel_expansion_rate = \" << vessel_expansion_rate << endl;\n  os << \" d = \" << d << endl;\n  os << \" e = \" << e << endl;\n  os << \" f = \" << f << endl;\n  os << \" c = \" << c << endl;\n  os << \" mu = \" << mu << endl;\n  os << \" nu = \" << nu << endl;\n  os << \" rho0 = \" << rho0 << endl;\n  os << \" rho1 = \" << rho1 << endl;\n  os << \" c0 = \" << c0 << endl;\n  os << \" gamma = \" << gamma << endl;\n  os << \" eps = \" << eps << endl;\n  os << \" betaN = \" << betaN << endl;\n  os << \" gammaN = \" << gammaN << endl;\n  os << \" betaD = \" << betaD << endl;\n  os << \" gammaD = \" << gammaD << endl;\n  os << \" betaR = \" << betaR << endl;\n  os << \" gammaR = \" << gammaR << endl;\n  os << \" tau = \" << tau << endl;\n  os << \" kt = \" << kt << endl;\n  os << \" kc = \" << kc << endl;\n  os << \" krs = \" << krs << endl;\n  os << \" k = \"<< k[0] << \", \" << k[1] << \", \" << k[2] << \", \" << k[3] << \", \" << k[4] << \", \" << k[5] << \", \" << k[6] << \", \" << k[7] << \", \" << k[8] << \", \" << k[9] << \", \" << k[10] << \", \" << k[11] << \", \" << k[12] << \", \" << k[13] << \", \" << k[14] << endl;\n  os << \" i1 = \" << i1 << endl;\n  os << \" i2 = \" << i2 << endl;\n  os << \" b4 = \" << sbool(b4) << endl;\n\n  if (dir1) \n  os << \" dir1 = \" << dir1 << endl;\n\n  if (dir2) \n  os << \" dir2 = \" << dir2 << endl;\n  os << \" division_axis_type = \" << division_axis_type << endl;\n}\n\nvoid Parameter::XMLAdd(QDomDocument &doc, QDomElement &root) const {\n    //xmlNode *xmlparameter = xmlNewChild(root, NULL, BAD_CAST \"parameter\", NULL);\n    QDomElement xmlparameter = doc.createElement(\"parameter\");\n    root.appendChild(xmlparameter);\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"arrowcolor\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (arrowcolor) \n    text << arrowcolor;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"arrowsize\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << arrowsize;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"textcolor\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (textcolor) \n    text << textcolor;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"cellnumsize\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << cellnumsize;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"nodenumsize\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << nodenumsize;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"node_mag\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << node_mag;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"outlinewidth\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << outlinewidth;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"cell_outline_color\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (cell_outline_color) \n    text << cell_outline_color;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"resize_stride\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << resize_stride;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"export_interval\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << export_interval;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"export_fn_prefix\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (export_fn_prefix) \n    text << export_fn_prefix;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"storage_stride\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << storage_stride;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"xml_storage_stride\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << xml_storage_stride;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"datadir\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (datadir) {\n                                     QDir dataDir = QDir::home().relativeFilePath(datadir);\n                                     text << dataDir.dirName().toStdString();\n                                   }\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"T\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << T;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"lambda_length\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << lambda_length;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"yielding_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << yielding_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"lambda_celllength\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << lambda_celllength;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"target_length\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << target_length;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"cell_expansion_rate\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << cell_expansion_rate;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"cell_div_expansion_rate\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << cell_div_expansion_rate;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"auxin_dependent_growth\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\ntext << sbool(auxin_dependent_growth);\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"ode_accuracy\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << ode_accuracy;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"mc_stepsize\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << mc_stepsize;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"mc_cell_stepsize\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << mc_cell_stepsize;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"energy_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << energy_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"bend_lambda\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << bend_lambda;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"alignment_lambda\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << alignment_lambda;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rel_cell_div_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rel_cell_div_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rel_perimeter_stiffness\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rel_perimeter_stiffness;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"collapse_node_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << collapse_node_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"morphogen_div_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << morphogen_div_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"morphogen_expansion_threshold\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << morphogen_expansion_threshold;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"copy_wall\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\ntext << sbool(copy_wall);\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"source\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << source;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"D\" );\n  xmlparameter.appendChild(xmlpar);\n  QDomElement xmlvalarray = doc.createElement(\"valarray\");\n  xmlpar.appendChild(xmlvalarray);\n  {\n    ostringstream text;\n    text << D[0];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[1];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[2];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[3];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[4];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[5];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[6];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[7];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[8];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[9];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[10];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[11];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[12];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[13];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << D[14];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"initval\" );\n  xmlparameter.appendChild(xmlpar);\n  QDomElement xmlvalarray = doc.createElement(\"valarray\");\n  xmlpar.appendChild(xmlvalarray);\n  {\n    ostringstream text;\n    text << initval[0];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[1];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[2];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[3];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[4];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[5];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[6];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[7];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[8];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[9];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[10];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[11];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[12];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[13];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << initval[14];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"k1\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << k1;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"k2\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << k2;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"r\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << r;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"kr\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << kr;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"km\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << km;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"Pi_tot\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << Pi_tot;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"transport\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << transport;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"ka\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << ka;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"pin_prod\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << pin_prod;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"pin_prod_in_epidermis\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << pin_prod_in_epidermis;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"pin_breakdown\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << pin_breakdown;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"pin_breakdown_internal\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << pin_breakdown_internal;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux1prod\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux1prod;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux1prodmeso\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux1prodmeso;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux1decay\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux1decay;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux1decaymeso\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux1decaymeso;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux1transport\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux1transport;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux_cons\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux_cons;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"aux_breakdown\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << aux_breakdown;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"kaux1\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << kaux1;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"kap\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << kap;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"leaf_tip_source\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << leaf_tip_source;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"sam_efflux\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << sam_efflux;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"sam_auxin\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << sam_auxin;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"sam_auxin_breakdown\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << sam_auxin_breakdown;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"van3prod\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << van3prod;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"van3autokat\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << van3autokat;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"van3sat\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << van3sat;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"k2van3\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << k2van3;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"dt\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << dt;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rd_dt\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rd_dt;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"movie\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\ntext << sbool(movie);\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"nit\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << nit;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"maxt\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << maxt;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rseed\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rseed;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"constituous_expansion_limit\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << constituous_expansion_limit;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"vessel_inh_level\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << vessel_inh_level;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"vessel_expansion_rate\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << vessel_expansion_rate;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"d\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << d;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"e\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << e;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"f\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << f;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"c\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << c;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"mu\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << mu;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"nu\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << nu;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rho0\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rho0;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"rho1\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << rho1;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"c0\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << c0;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"gamma\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << gamma;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"eps\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << eps;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"betaN\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << betaN;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"gammaN\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << gammaN;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"betaD\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << betaD;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"gammaD\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << gammaD;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"betaR\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << betaR;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"gammaR\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << gammaR;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"tau\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << tau;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"kt\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << kt;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"kc\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << kc;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"krs\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << krs;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"k\" );\n  xmlparameter.appendChild(xmlpar);\n  QDomElement xmlvalarray = doc.createElement(\"valarray\");\n  xmlpar.appendChild(xmlvalarray);\n  {\n    ostringstream text;\n    text << k[0];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[1];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[2];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[3];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[4];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[5];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[6];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[7];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[8];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[9];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[10];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[11];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[12];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[13];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n  {\n    ostringstream text;\n    text << k[14];\n   QDomElement xmlval = doc.createElement(\"val\");\n   xmlval.setAttribute(\"v\",text.str().c_str());\n   xmlvalarray.appendChild(xmlval);\n  }\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"i1\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << i1;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"i2\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << i2;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"b4\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\ntext << sbool(b4);\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"dir1\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (dir1) \n    text << dir1;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"dir2\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n\n  if (dir2) \n    text << dir2;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n{\n  QDomElement xmlpar = doc.createElement(\"par\");\n  xmlpar.setAttribute(\"name\",\"division_axis_type\" );\n  xmlparameter.appendChild(xmlpar);\n  ostringstream text;\n    text << division_axis_type;\n  xmlpar.setAttribute(\"val\",text.str().c_str());\n}\n}\nvoid Parameter::AssignValToPar(const char *namec, const char *valc) {\n  QLocale standardlocale(QLocale::C);\n  bool ok;\nif (!strcmp(namec, \"arrowcolor\")) {\n  if (arrowcolor) { free(arrowcolor); }\n  arrowcolor=strdup(valc);\n}\nif (!strcmp(namec, \"arrowsize\")) {\n  arrowsize = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'arrowsize' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"textcolor\")) {\n  if (textcolor) { free(textcolor); }\n  textcolor=strdup(valc);\n}\nif (!strcmp(namec, \"cellnumsize\")) {\n  cellnumsize = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'cellnumsize' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"nodenumsize\")) {\n  nodenumsize = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'nodenumsize' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"node_mag\")) {\n  node_mag = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'node_mag' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"outlinewidth\")) {\n  outlinewidth = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'outlinewidth' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"cell_outline_color\")) {\n  if (cell_outline_color) { free(cell_outline_color); }\n  cell_outline_color=strdup(valc);\n}\nif (!strcmp(namec, \"resize_stride\")) {\n  resize_stride = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'resize_stride' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"export_interval\")) {\n  export_interval = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'export_interval' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"export_fn_prefix\")) {\n  if (export_fn_prefix) { free(export_fn_prefix); }\n  export_fn_prefix=strdup(valc);\n}\nif (!strcmp(namec, \"storage_stride\")) {\n  storage_stride = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'storage_stride' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"xml_storage_stride\")) {\n  xml_storage_stride = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'xml_storage_stride' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"datadir\")) {\n  if (datadir) { free(datadir); }\n  datadir=strdup(valc);\n  datadir = AppendHomeDirIfPathRelative(datadir);\n}\nif (!strcmp(namec, \"T\")) {\n  T = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'T' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"lambda_length\")) {\n  lambda_length = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'lambda_length' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"yielding_threshold\")) {\n  yielding_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'yielding_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"lambda_celllength\")) {\n  lambda_celllength = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'lambda_celllength' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"target_length\")) {\n  target_length = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'target_length' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"cell_expansion_rate\")) {\n  cell_expansion_rate = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'cell_expansion_rate' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"cell_div_expansion_rate\")) {\n  cell_div_expansion_rate = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'cell_div_expansion_rate' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"auxin_dependent_growth\")) {\nauxin_dependent_growth = strtobool(valc);\n}\nif (!strcmp(namec, \"ode_accuracy\")) {\n  ode_accuracy = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'ode_accuracy' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"mc_stepsize\")) {\n  mc_stepsize = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'mc_stepsize' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"mc_cell_stepsize\")) {\n  mc_cell_stepsize = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'mc_cell_stepsize' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"energy_threshold\")) {\n  energy_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'energy_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"bend_lambda\")) {\n  bend_lambda = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'bend_lambda' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"alignment_lambda\")) {\n  alignment_lambda = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'alignment_lambda' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rel_cell_div_threshold\")) {\n  rel_cell_div_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'rel_cell_div_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rel_perimeter_stiffness\")) {\n  rel_perimeter_stiffness = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'rel_perimeter_stiffness' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"collapse_node_threshold\")) {\n  collapse_node_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'collapse_node_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"morphogen_div_threshold\")) {\n  morphogen_div_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'morphogen_div_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"morphogen_expansion_threshold\")) {\n  morphogen_expansion_threshold = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'morphogen_expansion_threshold' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"copy_wall\")) {\ncopy_wall = strtobool(valc);\n}\nif (!strcmp(namec, \"source\")) {\n  source = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'source' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"k1\")) {\n  k1 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'k1' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"k2\")) {\n  k2 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'k2' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"r\")) {\n  r = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'r' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"kr\")) {\n  kr = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'kr' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"km\")) {\n  km = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'km' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"Pi_tot\")) {\n  Pi_tot = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'Pi_tot' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"transport\")) {\n  transport = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'transport' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"ka\")) {\n  ka = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'ka' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"pin_prod\")) {\n  pin_prod = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'pin_prod' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"pin_prod_in_epidermis\")) {\n  pin_prod_in_epidermis = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'pin_prod_in_epidermis' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"pin_breakdown\")) {\n  pin_breakdown = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'pin_breakdown' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"pin_breakdown_internal\")) {\n  pin_breakdown_internal = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'pin_breakdown_internal' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux1prod\")) {\n  aux1prod = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux1prod' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux1prodmeso\")) {\n  aux1prodmeso = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux1prodmeso' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux1decay\")) {\n  aux1decay = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux1decay' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux1decaymeso\")) {\n  aux1decaymeso = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux1decaymeso' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux1transport\")) {\n  aux1transport = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux1transport' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux_cons\")) {\n  aux_cons = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux_cons' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"aux_breakdown\")) {\n  aux_breakdown = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'aux_breakdown' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"kaux1\")) {\n  kaux1 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'kaux1' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"kap\")) {\n  kap = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'kap' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"leaf_tip_source\")) {\n  leaf_tip_source = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'leaf_tip_source' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"sam_efflux\")) {\n  sam_efflux = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'sam_efflux' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"sam_auxin\")) {\n  sam_auxin = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'sam_auxin' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"sam_auxin_breakdown\")) {\n  sam_auxin_breakdown = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'sam_auxin_breakdown' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"van3prod\")) {\n  van3prod = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'van3prod' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"van3autokat\")) {\n  van3autokat = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'van3autokat' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"van3sat\")) {\n  van3sat = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'van3sat' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"k2van3\")) {\n  k2van3 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'k2van3' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"dt\")) {\n  dt = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'dt' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rd_dt\")) {\n  rd_dt = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'rd_dt' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"movie\")) {\nmovie = strtobool(valc);\n}\nif (!strcmp(namec, \"nit\")) {\n  nit = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'nit' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"maxt\")) {\n  maxt = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'maxt' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rseed\")) {\n  rseed = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'rseed' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"constituous_expansion_limit\")) {\n  constituous_expansion_limit = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'constituous_expansion_limit' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"vessel_inh_level\")) {\n  vessel_inh_level = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'vessel_inh_level' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"vessel_expansion_rate\")) {\n  vessel_expansion_rate = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'vessel_expansion_rate' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"d\")) {\n  d = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'd' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"e\")) {\n  e = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'e' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"f\")) {\n  f = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'f' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"c\")) {\n  c = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'c' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"mu\")) {\n  mu = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'mu' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"nu\")) {\n  nu = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'nu' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rho0\")) {\n  rho0 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'rho0' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"rho1\")) {\n  rho1 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'rho1' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"c0\")) {\n  c0 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'c0' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"gamma\")) {\n  gamma = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'gamma' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"eps\")) {\n  eps = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'eps' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"betaN\")) {\n  betaN = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'betaN' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"gammaN\")) {\n  gammaN = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'gammaN' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"betaD\")) {\n  betaD = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'betaD' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"gammaD\")) {\n  gammaD = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'gammaD' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"betaR\")) {\n  betaR = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'betaR' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"gammaR\")) {\n  gammaR = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'gammaR' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"tau\")) {\n  tau = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'tau' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"kt\")) {\n  kt = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'kt' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"kc\")) {\n  kc = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'kc' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"krs\")) {\n  krs = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'krs' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"i1\")) {\n  i1 = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'i1' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"i2\")) {\n  i2 = standardlocale.toDouble(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to double while reading parameter 'i2' from XML file.\",valc); }\n}\nif (!strcmp(namec, \"b4\")) {\nb4 = strtobool(valc);\n}\nif (!strcmp(namec, \"dir1\")) {\n  if (dir1) { free(dir1); }\n  dir1=strdup(valc);\n}\nif (!strcmp(namec, \"dir2\")) {\n  if (dir2) { free(dir2); }\n  dir2=strdup(valc);\n}\nif (!strcmp(namec, \"division_axis_type\")) {\n  division_axis_type = standardlocale.toInt(valc, &ok);\n  if (!ok) { MyWarning::error(\"Read error: cannot convert string \\\"%s\\\" to integer while reading parameter 'division_axis_type' from XML file.\",valc); }\n}\n}\nvoid Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {\nif (!strcmp(namec, \"D\")) {\n  int i=0;\n  vector<double>::const_iterator v=valarray.begin();\n  while (v!=valarray.end() && i <= 14 ) {\n     D[i++]=*(v++);\n  }\n}\nif (!strcmp(namec, \"initval\")) {\n  int i=0;\n  vector<double>::const_iterator v=valarray.begin();\n  while (v!=valarray.end() && i <= 14 ) {\n     initval[i++]=*(v++);\n  }\n}\nif (!strcmp(namec, \"k\")) {\n  int i=0;\n  vector<double>::const_iterator v=valarray.begin();\n  while (v!=valarray.end() && i <= 14 ) {\n     k[i++]=*(v++);\n  }\n}\n}\n\nostream &operator<<(ostream &os, Parameter &p) {\n    p.Write(os);\n    return os;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Library/parameter.cpp b/src/Library/parameter.cpp
--- a/src/Library/parameter.cpp	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/Library/parameter.cpp	(date 1746539795121)
@@ -141,6 +141,9 @@
   k2van3 = 0.3;
   dt = 0.1;
   rd_dt = 1.0;
+  elastic_modulus = 50.;
+  elastic_limit = DEFAULT_ELASTIC_LIMIT;
+  compatibility_level = 0xFFFF;
   movie = false;
   nit = 100000;
   maxt = 1000.;
@@ -190,49 +193,48 @@
   b4 = false;
   dir1 = strdup(".");
   dir2 = strdup(".");
-  division_axis_type = 0;
 }
 
 Parameter::~Parameter() {
-    
+
 // destruct parameter object
 // free string parameter
 CleanUp();
 }
 
 void Parameter::CleanUp(void) {
-  if (arrowcolor) 
+  if (arrowcolor)
      free(arrowcolor);
-  if (textcolor) 
+  if (textcolor)
      free(textcolor);
-  if (cell_outline_color) 
+  if (cell_outline_color)
      free(cell_outline_color);
-  if (export_fn_prefix) 
+  if (export_fn_prefix)
      free(export_fn_prefix);
-  if (datadir) 
+  if (datadir)
      free(datadir);
-  if (D) 
+  if (D)
      free(D);
-  if (initval) 
+  if (initval)
      free(initval);
-  if (k) 
+  if (k)
      free(k);
-  if (dir1) 
+  if (dir1)
      free(dir1);
-  if (dir2) 
+  if (dir2)
      free(dir2);
 
 }
 
 void Parameter::Read(const char *filename) {
-    
+
   static bool ReadP=false;
 
   if (ReadP) {
 
     //throw "Run Time Error in parameter.cpp: Please Read parameter file only once!!";
     CleanUp();
-	
+
   } else
     ReadP=true;
 
@@ -310,8 +312,11 @@
   k2van3 = fgetpar(fp, "k2van3", 0.3, true);
   dt = fgetpar(fp, "dt", 0.1, true);
   rd_dt = fgetpar(fp, "rd_dt", 1.0, true);
+  elastic_limit = fgetpar(fp, "elastic_limit", DEFAULT_ELASTIC_LIMIT, true);
+  elastic_modulus = fgetpar(fp, "elastic_modulus", 50., true);
   movie = bgetpar(fp, "movie", false, true);
   nit = igetpar(fp, "nit", 100000, true);
+  compatibility_level = igetpar(fp, "compatibility_level", 0xFFFF, true);
   maxt = fgetpar(fp, "maxt", 1000., true);
   rseed = igetpar(fp, "rseed", -1, true);
   constituous_expansion_limit = igetpar(fp, "constituous_expansion_limit", 16, true);
@@ -340,7 +345,7 @@
   krs = fgetpar(fp, "krs", 0., true);
   k = dgetparlist(fp, "k", 15, true);
   i1 = igetpar(fp, "i1", 0, true);
-  i2 = fgetpar(fp, "i2", 0, true);
+  i2 = igetpar(fp, "i2", 0, true);
   b4 = bgetpar(fp, "b4", false, true);
   dir1 = sgetpar(fp, "dir1", ".", true);
   if (strcmp(dir1, "."))
@@ -348,7 +353,6 @@
   dir2 = sgetpar(fp, "dir2", ".", true);
   if (strcmp(dir2, "."))
     MakeDir(dir2);
-  division_axis_type = igetpar(fp, "division_axis_type", 0, true);
 }
 
 const char *sbool(const bool &p) {
@@ -364,23 +368,23 @@
 void Parameter::Write(ostream &os) const {
 
 
-  if (arrowcolor) 
+  if (arrowcolor)
   os << " arrowcolor = " << arrowcolor << endl;
   os << " arrowsize = " << arrowsize << endl;
 
-  if (textcolor) 
+  if (textcolor)
   os << " textcolor = " << textcolor << endl;
   os << " cellnumsize = " << cellnumsize << endl;
   os << " nodenumsize = " << nodenumsize << endl;
   os << " node_mag = " << node_mag << endl;
   os << " outlinewidth = " << outlinewidth << endl;
 
-  if (cell_outline_color) 
+  if (cell_outline_color)
   os << " cell_outline_color = " << cell_outline_color << endl;
   os << " resize_stride = " << resize_stride << endl;
   os << " export_interval = " << export_interval << endl;
 
-  if (export_fn_prefix) 
+  if (export_fn_prefix)
   os << " export_fn_prefix = " << export_fn_prefix << endl;
   os << " storage_stride = " << storage_stride << endl;
   os << " xml_storage_stride = " << xml_storage_stride << endl;
@@ -445,8 +449,11 @@
   os << " k2van3 = " << k2van3 << endl;
   os << " dt = " << dt << endl;
   os << " rd_dt = " << rd_dt << endl;
+  os << " elastic_limit = " << elastic_limit << endl;
+  os << " elastic_modulus = " << elastic_modulus << endl;
   os << " movie = " << sbool(movie) << endl;
   os << " nit = " << nit << endl;
+  os << " compatibility_level = " << compatibility_level << endl;
   os << " maxt = " << maxt << endl;
   os << " rseed = " << rseed << endl;
   os << " constituous_expansion_limit = " << constituous_expansion_limit << endl;
@@ -478,12 +485,11 @@
   os << " i2 = " << i2 << endl;
   os << " b4 = " << sbool(b4) << endl;
 
-  if (dir1) 
+  if (dir1)
   os << " dir1 = " << dir1 << endl;
 
-  if (dir2) 
+  if (dir2)
   os << " dir2 = " << dir2 << endl;
-  os << " division_axis_type = " << division_axis_type << endl;
 }
 
 void Parameter::XMLAdd(QDomDocument &doc, QDomElement &root) const {
@@ -496,7 +502,7 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (arrowcolor) 
+  if (arrowcolor)
     text << arrowcolor;
   xmlpar.setAttribute("val",text.str().c_str());
 }
@@ -514,7 +520,7 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (textcolor) 
+  if (textcolor)
     text << textcolor;
   xmlpar.setAttribute("val",text.str().c_str());
 }
@@ -556,7 +562,7 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (cell_outline_color) 
+  if (cell_outline_color)
     text << cell_outline_color;
   xmlpar.setAttribute("val",text.str().c_str());
 }
@@ -582,7 +588,7 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (export_fn_prefix) 
+  if (export_fn_prefix)
     text << export_fn_prefix;
   xmlpar.setAttribute("val",text.str().c_str());
 }
@@ -1253,6 +1259,22 @@
   ostringstream text;
     text << rd_dt;
   xmlpar.setAttribute("val",text.str().c_str());
+}
+{
+  QDomElement xmlpar = doc.createElement("par");
+  xmlpar.setAttribute("name","elastic_limit" );
+  xmlparameter.appendChild(xmlpar);
+  ostringstream text;
+    text << elastic_limit;
+  xmlpar.setAttribute("val",text.str().c_str());
+}
+{
+  QDomElement xmlpar = doc.createElement("par");
+  xmlpar.setAttribute("name","elastic_modulus" );
+  xmlparameter.appendChild(xmlpar);
+  ostringstream text;
+    text << elastic_modulus;
+  xmlpar.setAttribute("val",text.str().c_str());
 }
 {
   QDomElement xmlpar = doc.createElement("par");
@@ -1269,6 +1291,14 @@
   ostringstream text;
     text << nit;
   xmlpar.setAttribute("val",text.str().c_str());
+}
+{
+  QDomElement xmlpar = doc.createElement("par");
+  xmlpar.setAttribute("name","compatibility_level" );
+  xmlparameter.appendChild(xmlpar);
+  ostringstream text;
+    text << compatibility_level;
+  xmlpar.setAttribute("val",text.str().c_str());
 }
 {
   QDomElement xmlpar = doc.createElement("par");
@@ -1620,7 +1650,7 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (dir1) 
+  if (dir1)
     text << dir1;
   xmlpar.setAttribute("val",text.str().c_str());
 }
@@ -1630,17 +1660,9 @@
   xmlparameter.appendChild(xmlpar);
   ostringstream text;
 
-  if (dir2) 
+  if (dir2)
     text << dir2;
   xmlpar.setAttribute("val",text.str().c_str());
-}
-{
-  QDomElement xmlpar = doc.createElement("par");
-  xmlpar.setAttribute("name","division_axis_type" );
-  xmlparameter.appendChild(xmlpar);
-  ostringstream text;
-    text << division_axis_type;
-  xmlpar.setAttribute("val",text.str().c_str());
 }
 }
 void Parameter::AssignValToPar(const char *namec, const char *valc) {
@@ -1909,6 +1931,10 @@
   rd_dt = standardlocale.toDouble(valc, &ok);
   if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'rd_dt' from XML file.",valc); }
 }
+if (!strcmp(namec, "elastic_limit")) {
+	elastic_limit = standardlocale.toDouble(valc, &ok);
+  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'elastic_limit' from XML file.",valc); }
+}
 if (!strcmp(namec, "movie")) {
 movie = strtobool(valc);
 }
@@ -1916,6 +1942,10 @@
   nit = standardlocale.toInt(valc, &ok);
   if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'nit' from XML file.",valc); }
 }
+if (!strcmp(namec, "compatibility_level")) {
+  compatibility_level = standardlocale.toInt(valc, &ok);
+  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'compatibility_level' from XML file.",valc); }
+}
 if (!strcmp(namec, "maxt")) {
   maxt = standardlocale.toDouble(valc, &ok);
   if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'maxt' from XML file.",valc); }
@@ -2025,8 +2055,8 @@
   if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'i1' from XML file.",valc); }
 }
 if (!strcmp(namec, "i2")) {
-  i2 = standardlocale.toDouble(valc, &ok);
-  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'i2' from XML file.",valc); }
+  i2 = standardlocale.toInt(valc, &ok);
+  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'i2' from XML file.",valc); }
 }
 if (!strcmp(namec, "b4")) {
 b4 = strtobool(valc);
@@ -2039,10 +2069,6 @@
   if (dir2) { free(dir2); }
   dir2=strdup(valc);
 }
-if (!strcmp(namec, "division_axis_type")) {
-  division_axis_type = standardlocale.toInt(valc, &ok);
-  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'division_axis_type' from XML file.",valc); }
-}
 }
 void Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {
 if (!strcmp(namec, "D")) {
Index: src/Library/parameter.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *\n *  $Id$\n *\n *  This file is part of the Virtual Leaf.\n *\n *  VirtualLeaf is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  VirtualLeaf is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.\n *\n *  Copyright 2010 Roeland Merks.\n *\n */\n\n// WARNING: This file is automatically generated by make_parameter_source.pl. Do not edit.\n// Do not edit. All edits will be discarded.\n\n#ifndef _PARAMETER_H_\n#define _PARAMETER_H_\n#include \"vector.h\"\n#include <vector>\n\n//#include <libxml/parser.h>\n//#include <libxml/tree.h>\n#include <QtXml>\n\n class Parameter {\n\t\t\n public: \n   Parameter();\n   ~Parameter();\n   void CleanUp(void);\n   void Read(const char *filename);\n   void Write(ostream &os) const;\n   void XMLAdd(QDomDocument &doc, QDomElement &root) const;\n   void XMLRead(QDomElement &root);\n   void AssignValToPar(const char *namec, const char *valc);\n   void AssignValArrayToPar(const char *namec, vector<double> valarray);\n  char * arrowcolor;\n  double arrowsize;\n  char * textcolor;\n  int cellnumsize;\n  int nodenumsize;\n  double node_mag;\n  double outlinewidth;\n  char * cell_outline_color;\n  int resize_stride;\n  int export_interval;\n  char * export_fn_prefix;\n  int storage_stride;\n  int xml_storage_stride;\n  char * datadir;\n  double T;\n  double lambda_length;\n  double yielding_threshold;\n  double lambda_celllength;\n  double target_length;\n  double cell_expansion_rate;\n  double cell_div_expansion_rate;\n  bool auxin_dependent_growth;\n  double ode_accuracy;\n  double mc_stepsize;\n  double mc_cell_stepsize;\n  double energy_threshold;\n  double bend_lambda;\n  double alignment_lambda;\n  double rel_cell_div_threshold;\n  double rel_perimeter_stiffness;\n  double collapse_node_threshold;\n  double morphogen_div_threshold;\n  double morphogen_expansion_threshold;\n  bool copy_wall;\n  double source;\n  double * D;\n  double * initval;\n  double k1;\n  double k2;\n  double r;\n  double kr;\n  double km;\n  double Pi_tot;\n  double transport;\n  double ka;\n  double pin_prod;\n  double pin_prod_in_epidermis;\n  double pin_breakdown;\n  double pin_breakdown_internal;\n  double aux1prod;\n  double aux1prodmeso;\n  double aux1decay;\n  double aux1decaymeso;\n  double aux1transport;\n  double aux_cons;\n  double aux_breakdown;\n  double kaux1;\n  double kap;\n  double leaf_tip_source;\n  double sam_efflux;\n  double sam_auxin;\n  double sam_auxin_breakdown;\n  double van3prod;\n  double van3autokat;\n  double van3sat;\n  double k2van3;\n  double dt;\n  double rd_dt;\n  bool movie;\n  int nit;\n  double maxt;\n  int rseed;\n  int constituous_expansion_limit;\n  double vessel_inh_level;\n  double vessel_expansion_rate;\n  double d;\n  double e;\n  double f;\n  double c;\n  double mu;\n  double nu;\n  double rho0;\n  double rho1;\n  double c0;\n  double gamma;\n  double eps;\n  double betaN;\n  double gammaN;\n  double betaD;\n  double gammaD;\n  double betaR;\n  double gammaR;\n  double tau;\n  double kt;\n  double kc;\n  double krs;\n  double * k;\n  int i1;\n  double i2;\n  bool b4;\n  char * dir1;\n  char * dir2;\n  int division_axis_type;\n private:\n };\n\n ostream &operator<<(ostream &os, Parameter &p);\n const char *sbool(const bool &p);\n\n\n#endif\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Library/parameter.h b/src/Library/parameter.h
--- a/src/Library/parameter.h	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ b/src/Library/parameter.h	(date 1746539795130)
@@ -29,13 +29,15 @@
 #include "vector.h"
 #include <vector>
 
+#define DEFAULT_ELASTIC_LIMIT 1.15
+
 //#include <libxml/parser.h>
 //#include <libxml/tree.h>
 #include <QtXml>
 
  class Parameter {
-		
- public: 
+
+ public:
    Parameter();
    ~Parameter();
    void CleanUp(void);
@@ -113,6 +115,9 @@
   double k2van3;
   double dt;
   double rd_dt;
+  double elastic_modulus;
+  double elastic_limit;
+  int compatibility_level;
   bool movie;
   int nit;
   double maxt;
@@ -143,11 +148,10 @@
   double krs;
   double * k;
   int i1;
-  double i2;
+  int i2;
   bool b4;
   char * dir1;
   char * dir2;
-  int division_axis_type;
  private:
  };
 
Index: data/leaves/Cambium_Lebovka.xml
===================================================================
diff --git a/data/leaves/Cambium_Lebovka.xml b/data/leaves/Cambium_Lebovka.xml
deleted file mode 100644
--- a/data/leaves/Cambium_Lebovka.xml	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ /dev/null	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
@@ -1,10776 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<leaf name="C:/nice/VirtualLeaf-v1.0-src/data/leaves/hypo7.xml" date="Thu Feb 25 13:50:42 2016" simtime="208160">
-  <parameter>
-    <par name="arrowcolor" val="white"/>
-    <par name="arrowsize" val="10"/>
-    <par name="textcolor" val="red"/>
-    <par name="cellnumsize" val="1"/>
-    <par name="nodenumsize" val="1"/>
-    <par name="node_mag" val="1"/>
-    <par name="outlinewidth" val="1"/>
-    <par name="cell_outline_color" val="green"/>
-    <par name="resize_stride" val="10"/>
-    <par name="export_interval" val="0"/>
-    <par name="export_fn_prefix" val="cell."/>
-    <par name="storage_stride" val="2000"/>
-    <par name="xml_storage_stride" val="2000"/>
-    <par name="datadir" val=""/>
-    <par name="T" val="1"/>
-    <par name="lambda_length" val="100"/>
-    <par name="yielding_threshold" val="4"/>
-    <par name="lambda_celllength" val="0"/>
-    <par name="target_length" val="60"/>
-    <par name="cell_expansion_rate" val="5"/>
-    <par name="cell_div_expansion_rate" val="10"/>
-    <par name="auxin_dependent_growth" val="true"/>
-    <par name="ode_accuracy" val="0.0001"/>
-    <par name="mc_stepsize" val="0.4"/>
-    <par name="mc_cell_stepsize" val="0.2"/>
-    <par name="energy_threshold" val="1000"/>
-    <par name="bend_lambda" val="0"/>
-    <par name="alignment_lambda" val="0"/>
-    <par name="rel_cell_div_threshold" val="1"/>
-    <par name="rel_perimeter_stiffness" val="2"/>
-    <par name="collapse_node_threshold" val="0.05"/>
-    <par name="morphogen_div_threshold" val="0.2"/>
-    <par name="morphogen_expansion_threshold" val="0.01"/>
-    <par name="copy_wall" val="true"/>
-    <par name="source" val="0"/>
-    <par name="D">
-      <valarray>
-        <val v="0.0002"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </valarray>
-    </par>
-    <par name="initval">
-      <valarray>
-        <val v="0"/>
-        <val v="1"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="1"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </valarray>
-    </par>
-    <par name="k1" val="1"/>
-    <par name="k2" val="0.3"/>
-    <par name="r" val="1"/>
-    <par name="kr" val="1"/>
-    <par name="km" val="1"/>
-    <par name="Pi_tot" val="1"/>
-    <par name="transport" val="0.36"/>
-    <par name="ka" val="1"/>
-    <par name="pin_prod" val="0"/>
-    <par name="pin_prod_in_epidermis" val="0"/>
-    <par name="pin_breakdown" val="0"/>
-    <par name="pin_breakdown_internal" val="0.001"/>
-    <par name="aux1prod" val="0.001"/>
-    <par name="aux1prodmeso" val="0"/>
-    <par name="aux1decay" val="0.001"/>
-    <par name="aux1decaymeso" val="0.1"/>
-    <par name="aux1transport" val="0.036"/>
-    <par name="aux_cons" val="0"/>
-    <par name="aux_breakdown" val="0.0001"/>
-    <par name="kaux1" val="1"/>
-    <par name="kap" val="1"/>
-    <par name="leaf_tip_source" val="0.0001"/>
-    <par name="sam_efflux" val="0.0001"/>
-    <par name="sam_auxin" val="10"/>
-    <par name="sam_auxin_breakdown" val="0"/>
-    <par name="van3prod" val="0.002"/>
-    <par name="van3autokat" val="0.1"/>
-    <par name="van3sat" val="10"/>
-    <par name="k2van3" val="0.3"/>
-    <par name="dt" val="0.1"/>
-    <par name="rd_dt" val="10"/>
-    <par name="movie" val="true"/>
-    <par name="nit" val="100000"/>
-    <par name="maxt" val="1e+006"/>
-    <par name="rseed" val="-1"/>
-    <par name="constituous_expansion_limit" val="16"/>
-    <par name="vessel_inh_level" val="1"/>
-    <par name="vessel_expansion_rate" val="0.25"/>
-    <par name="d" val="0"/>
-    <par name="e" val="0"/>
-    <par name="f" val="0"/>
-    <par name="c" val="0"/>
-    <par name="mu" val="0"/>
-    <par name="nu" val="0"/>
-    <par name="rho0" val="0"/>
-    <par name="rho1" val="0"/>
-    <par name="c0" val="0"/>
-    <par name="gamma" val="0"/>
-    <par name="eps" val="0"/>
-    <par name="k">
-        <valarray>
-        <val v="0.1"/>
-        <val v="1"/>
-        <val v="1"/>
-        <val v="0.1"/>
-        <val v="45e-03"/>
-        <val v="1.7e-02"/>
-        <val v="0.00000001"/>
-        <val v="1e-01"/>
-        <val v="0.1"/>
-        <val v="0.1"/>
-        <val v="1"/>
-        <val v="1"/>
-        <val v="0.1"/>
-        <val v="0.1"/>
-        <val v="1"/>
-      </valarray>
-    </par>
-    <par name="i1" val="5e-03"/>
-    <par name="i2" val="0.001"/>
-    <par name="i3" val="1"/>
-    <par name="i4" val="0.0001"/>
-    <par name="i5" val="7e-15"/>
-    <par name="s1" val=""/>
-    <par name="s2" val=""/>
-    <par name="s3" val=""/>
-    <par name="b1" val="false"/>
-    <par name="b2" val="true"/>
-    <par name="b3" val="false"/>
-    <par name="b4" val="false"/>
-    <par name="dir1" val="."/>
-    <par name="dir2" val="."/>
-  </parameter>
-  <nodes n="375" target_length="3.09017">
-    <node x="60.8388" y="-11.3394" fixed="false" boundary="true" sam="false"/>
-    <node x="42.8663" y="39.5866" fixed="false" boundary="true" sam="false"/>
-    <node x="1.89319" y="62.1575" fixed="false" boundary="true" sam="false"/>
-    <node x="-15.4963" y="57.0851" fixed="false" boundary="true" sam="false"/>
-    <node x="-49.1293" y="31.4662" fixed="false" boundary="true" sam="false"/>
-    <node x="-58.8339" y="17.3831" fixed="false" boundary="true" sam="false"/>
-    <node x="-43.008" y="-43.0754" fixed="false" boundary="true" sam="false"/>
-    <node x="-26.1331" y="-50.4808" fixed="false" boundary="true" sam="false"/>
-    <node x="6.6978" y="-59.3636" fixed="false" boundary="true" sam="false"/>
-    <node x="58.8968" y="-20.9247" fixed="false" boundary="true" sam="false"/>
-    <node x="34.3443" y="44.8276" fixed="false" boundary="true" sam="false"/>
-    <node x="-33.7602" y="-45.602" fixed="false" boundary="true" sam="false"/>
-    <node x="15.6437" y="19.6324" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.61191" y="-8.87065" fixed="false" boundary="false" sam="false"/>
-    <node x="48.3646" y="-37.1468" fixed="false" boundary="true" sam="false"/>
-    <node x="52.3773" y="-28.2464" fixed="false" boundary="true" sam="false"/>
-    <node x="5.14119" y="-8.36722" fixed="false" boundary="false" sam="false"/>
-    <node x="45.4414" y="-23.4042" fixed="false" boundary="false" sam="false"/>
-    <node x="22.269" y="-28.6255" fixed="false" boundary="false" sam="false"/>
-    <node x="-51.9489" y="23.117" fixed="false" boundary="true" sam="false"/>
-    <node x="7.79338" y="11.4032" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.0825" y="15.9803" fixed="false" boundary="false" sam="false"/>
-    <node x="-24.0665" y="13.8336" fixed="false" boundary="false" sam="false"/>
-    <node x="-9.78475" y="-54.3602" fixed="false" boundary="true" sam="false"/>
-    <node x="27.8518" y="51.5838" fixed="false" boundary="true" sam="false"/>
-    <node x="-23.2146" y="53.2866" fixed="false" boundary="true" sam="false"/>
-    <node x="-49.6976" y="-36.196" fixed="false" boundary="true" sam="false"/>
-    <node x="-6.91047" y="57.9706" fixed="false" boundary="true" sam="false"/>
-    <node x="-1.96903" y="17.9907" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.46663" y="44.6754" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.26511" y="28.7964" fixed="false" boundary="false" sam="false"/>
-    <node x="54.5108" y="7.92979" fixed="false" boundary="true" sam="false"/>
-    <node x="11.4004" y="-1.53138" fixed="false" boundary="false" sam="false"/>
-    <node x="46.7694" y="8.81646" fixed="false" boundary="false" sam="false"/>
-    <node x="21.2796" y="-5.533" fixed="false" boundary="false" sam="false"/>
-    <node x="-2.01716" y="-55.1531" fixed="false" boundary="true" sam="false"/>
-    <node x="7.71806" y="-19.8787" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.10067" y="-47.6935" fixed="false" boundary="false" sam="false"/>
-    <node x="4.55151" y="-22.7761" fixed="false" boundary="false" sam="false"/>
-    <node x="-26.4718" y="-14.8387" fixed="false" boundary="false" sam="false"/>
-    <node x="-44.7298" y="18.1905" fixed="false" boundary="false" sam="false"/>
-    <node x="-32.6936" y="-6.00335" fixed="false" boundary="false" sam="false"/>
-    <node x="-40.8787" y="13.5075" fixed="false" boundary="false" sam="false"/>
-    <node x="33.6236" y="-50.0297" fixed="false" boundary="true" sam="false"/>
-    <node x="52.0834" y="23.8892" fixed="false" boundary="true" sam="false"/>
-    <node x="29.2259" y="39.1768" fixed="false" boundary="false" sam="false"/>
-    <node x="-30.4177" y="-38.3411" fixed="false" boundary="false" sam="false"/>
-    <node x="-62.3094" y="9.06109" fixed="false" boundary="true" sam="false"/>
-    <node x="-55.3466" y="-18.6129" fixed="false" boundary="true" sam="false"/>
-    <node x="-37.8693" y="-4.45581" fixed="false" boundary="false" sam="false"/>
-    <node x="-48.3718" y="-15.4163" fixed="false" boundary="false" sam="false"/>
-    <node x="-42.3758" y="-10.5668" fixed="false" boundary="false" sam="false"/>
-    <node x="-35.1466" y="41.2807" fixed="false" boundary="true" sam="false"/>
-    <node x="-12.0516" y="19.8749" fixed="false" boundary="false" sam="false"/>
-    <node x="-21.5795" y="28.2758" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.9645" y="25.1356" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.3308" y="-30.7458" fixed="false" boundary="false" sam="false"/>
-    <node x="2.32778" y="-26.4442" fixed="false" boundary="false" sam="false"/>
-    <node x="-24.5126" y="-27.4614" fixed="false" boundary="false" sam="false"/>
-    <node x="-11.5443" y="-30.9253" fixed="false" boundary="false" sam="false"/>
-    <node x="20.4388" y="29.639" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.31398" y="50.0223" fixed="false" boundary="false" sam="false"/>
-    <node x="11.7579" y="32.8518" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.38202" y="45.3749" fixed="false" boundary="false" sam="false"/>
-    <node x="38.7835" y="-18.1151" fixed="false" boundary="false" sam="false"/>
-    <node x="31.3215" y="-2.78182" fixed="false" boundary="false" sam="false"/>
-    <node x="33.1009" y="-8.6218" fixed="false" boundary="false" sam="false"/>
-    <node x="-4.00928" y="-8.3309" fixed="false" boundary="false" sam="false"/>
-    <node x="-19.0307" y="13.7814" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.65186" y="-6.30703" fixed="false" boundary="false" sam="false"/>
-    <node x="-19.5521" y="10.3454" fixed="false" boundary="false" sam="false"/>
-    <node x="24.8321" y="32.7964" fixed="false" boundary="false" sam="false"/>
-    <node x="39.138" y="7.37701" fixed="false" boundary="false" sam="false"/>
-    <node x="27.4779" y="22.7177" fixed="false" boundary="false" sam="false"/>
-    <node x="27.6195" y="15.3846" fixed="false" boundary="false" sam="false"/>
-    <node x="24.0174" y="-52.6581" fixed="false" boundary="true" sam="false"/>
-    <node x="18.7438" y="-32.4451" fixed="false" boundary="false" sam="false"/>
-    <node x="19.4101" y="-44.8928" fixed="false" boundary="false" sam="false"/>
-    <node x="18.3166" y="-38.767" fixed="false" boundary="false" sam="false"/>
-    <node x="11.516" y="61.0577" fixed="false" boundary="true" sam="false"/>
-    <node x="-61.1774" y="-10.2691" fixed="false" boundary="true" sam="false"/>
-    <node x="54.4128" y="16.0668" fixed="false" boundary="true" sam="false"/>
-    <node x="1.01454" y="15.711" fixed="false" boundary="false" sam="false"/>
-    <node x="-43.2602" y="37.8796" fixed="false" boundary="true" sam="false"/>
-    <node x="16.2507" y="-58.3597" fixed="false" boundary="true" sam="false"/>
-    <node x="6.10475" y="-12.3987" fixed="false" boundary="false" sam="false"/>
-    <node x="19.2835" y="55.1445" fixed="false" boundary="true" sam="false"/>
-    <node x="9.91872" y="42.5885" fixed="false" boundary="false" sam="false"/>
-    <node x="15.2133" y="48.4096" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.5346" y="34.3602" fixed="false" boundary="false" sam="false"/>
-    <node x="-29.0789" y="46.8595" fixed="false" boundary="true" sam="false"/>
-    <node x="-21.5793" y="39.1647" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.5087" y="42.749" fixed="false" boundary="false" sam="false"/>
-    <node x="47.729" y="30.8201" fixed="false" boundary="true" sam="false"/>
-    <node x="32.4561" y="20.8046" fixed="false" boundary="false" sam="false"/>
-    <node x="43.9627" y="25.7962" fixed="false" boundary="false" sam="false"/>
-    <node x="38.6179" y="22.2207" fixed="false" boundary="false" sam="false"/>
-    <node x="-51.7054" y="-26.9188" fixed="false" boundary="true" sam="false"/>
-    <node x="-30.5091" y="-24.9354" fixed="false" boundary="false" sam="false"/>
-    <node x="-44.7918" y="-24.7335" fixed="false" boundary="false" sam="false"/>
-    <node x="-37.6779" y="-24.1567" fixed="false" boundary="false" sam="false"/>
-    <node x="-34.3664" y="17.2079" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.3078" y="35.5777" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.2438" y="20.9358" fixed="false" boundary="false" sam="false"/>
-    <node x="-29.9299" y="30.7403" fixed="false" boundary="false" sam="false"/>
-    <node x="57.4842" y="-2.1187" fixed="false" boundary="true" sam="false"/>
-    <node x="37.9993" y="-12.1589" fixed="false" boundary="false" sam="false"/>
-    <node x="50.9729" y="-5.34313" fixed="false" boundary="false" sam="false"/>
-    <node x="44.441" y="-8.71575" fixed="false" boundary="false" sam="false"/>
-    <node x="-9.20715" y="-27.8236" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.67767" y="-11.1407" fixed="false" boundary="false" sam="false"/>
-    <node x="-11.8348" y="-22.2607" fixed="false" boundary="false" sam="false"/>
-    <node x="24.6751" y="-5.78735" fixed="false" boundary="false" sam="false"/>
-    <node x="11.496" y="-20.1706" fixed="false" boundary="false" sam="false"/>
-    <node x="24.7371" y="-12.3953" fixed="false" boundary="false" sam="false"/>
-    <node x="18.1385" y="-16.7098" fixed="false" boundary="false" sam="false"/>
-    <node x="2.60583" y="-41.067" fixed="false" boundary="false" sam="false"/>
-    <node x="8.59692" y="-40.3666" fixed="false" boundary="false" sam="false"/>
-    <node x="14.4028" y="-41.6168" fixed="false" boundary="false" sam="false"/>
-    <node x="-20.7338" y="7.01673" fixed="false" boundary="false" sam="false"/>
-    <node x="-35.9659" y="-1.6962" fixed="false" boundary="false" sam="false"/>
-    <node x="-23.9386" y="5.24389" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.1254" y="-51.8557" fixed="false" boundary="true" sam="false"/>
-    <node x="-12.6733" y="-34.5827" fixed="false" boundary="false" sam="false"/>
-    <node x="-14.0387" y="-46.6268" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.5472" y="-40.7172" fixed="false" boundary="false" sam="false"/>
-    <node x="40.8373" y="-43.1467" fixed="false" boundary="true" sam="false"/>
-    <node x="27.4535" y="-27.3071" fixed="false" boundary="false" sam="false"/>
-    <node x="36.5118" y="-37.7357" fixed="false" boundary="false" sam="false"/>
-    <node x="32.126" y="-32.4546" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.11421" y="23.7601" fixed="false" boundary="false" sam="false"/>
-    <node x="9.45409" y="37.1332" fixed="false" boundary="false" sam="false"/>
-    <node x="2.07932" y="22.9236" fixed="false" boundary="false" sam="false"/>
-    <node x="4.46601" y="29.3698" fixed="false" boundary="false" sam="false"/>
-    <node x="-40.4566" y="2.05126" fixed="false" boundary="false" sam="false"/>
-    <node x="-61.5193" y="-0.0494062" fixed="false" boundary="true" sam="false"/>
-    <node x="-47.5502" y="2.43542" fixed="false" boundary="false" sam="false"/>
-    <node x="-54.6621" y="1.80201" fixed="false" boundary="false" sam="false"/>
-    <node x="3.63115" y="13.0443" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.5525" y="-0.0546716" fixed="false" boundary="false" sam="false"/>
-    <node x="-0.301973" y="12.8186" fixed="false" boundary="false" sam="false"/>
-    <node x="-11.8627" y="3.778" fixed="false" boundary="false" sam="false"/>
-    <node x="10.8759" y="13.9379" fixed="false" boundary="false" sam="false"/>
-    <node x="34.8659" y="7.49328" fixed="false" boundary="false" sam="false"/>
-    <node x="20.0334" y="6.58755" fixed="false" boundary="false" sam="false"/>
-    <node x="31.683" y="6.51237" fixed="false" boundary="false" sam="false"/>
-    <node x="-18.0137" y="29.1191" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.2596" y="35.8987" fixed="false" boundary="false" sam="false"/>
-    <node x="-16.4853" y="32.423" fixed="false" boundary="false" sam="false"/>
-    <node x="28.267" y="-21.4814" fixed="false" boundary="false" sam="false"/>
-    <node x="21.8253" y="-17.4914" fixed="false" boundary="false" sam="false"/>
-    <node x="24.6706" y="-19.8768" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.498" y="-11.6638" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.2494" y="-29.9909" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.9099" y="-20.9917" fixed="false" boundary="false" sam="false"/>
-    <node x="-16.2612" y="-27.0074" fixed="false" boundary="false" sam="false"/>
-    <node x="-14.3875" y="-10.2513" fixed="false" boundary="false" sam="false"/>
-    <node x="-26.9743" y="-0.926496" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.874" y="-5.28042" fixed="false" boundary="false" sam="false"/>
-    <node x="-24.0634" y="-3.21671" fixed="false" boundary="false" sam="false"/>
-    <node x="-39.451" y="16.0296" fixed="false" boundary="false" sam="false"/>
-    <node x="-26.4608" y="2.6601" fixed="false" boundary="false" sam="false"/>
-    <node x="-37.396" y="13.459" fixed="false" boundary="false" sam="false"/>
-    <node x="-32.9598" y="8.97725" fixed="false" boundary="false" sam="false"/>
-    <node x="-21.4518" y="15.9612" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.4489" y="31.7256" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.3967" y="19.0403" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.5347" y="25.0239" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.5533" y="19.4398" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.0856" y="29.3161" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.381" y="26.964" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.5618" y="22.9104" fixed="false" boundary="false" sam="false"/>
-    <node x="-8.5119" y="28.7802" fixed="false" boundary="false" sam="false"/>
-    <node x="-8.24891" y="25.2998" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.46686" y="39.3237" fixed="false" boundary="false" sam="false"/>
-    <node x="7.07205" y="34.0783" fixed="false" boundary="false" sam="false"/>
-    <node x="-2.15882" y="37.0483" fixed="false" boundary="false" sam="false"/>
-    <node x="3.57134" y="33.0068" fixed="false" boundary="false" sam="false"/>
-    <node x="12.8926" y="17.2096" fixed="false" boundary="false" sam="false"/>
-    <node x="6.30363" y="23.7009" fixed="false" boundary="false" sam="false"/>
-    <node x="12.0453" y="20.5156" fixed="false" boundary="false" sam="false"/>
-    <node x="28.4565" y="11.6572" fixed="false" boundary="false" sam="false"/>
-    <node x="25.9364" y="13.6018" fixed="false" boundary="false" sam="false"/>
-    <node x="22.9096" y="14.6653" fixed="false" boundary="false" sam="false"/>
-    <node x="17.3093" y="8.22078" fixed="false" boundary="false" sam="false"/>
-    <node x="25.0428" y="-2.71772" fixed="false" boundary="false" sam="false"/>
-    <node x="22.1022" y="-1.99485" fixed="false" boundary="false" sam="false"/>
-    <node x="33.0193" y="-18.1531" fixed="false" boundary="false" sam="false"/>
-    <node x="25.7791" y="-9.34092" fixed="false" boundary="false" sam="false"/>
-    <node x="33.3197" y="-13.8067" fixed="false" boundary="false" sam="false"/>
-    <node x="28.9623" y="-9.44664" fixed="false" boundary="false" sam="false"/>
-    <node x="15.5855" y="-25.3318" fixed="false" boundary="false" sam="false"/>
-    <node x="21.5743" y="-21.6704" fixed="false" boundary="false" sam="false"/>
-    <node x="16.4184" y="-28.9335" fixed="false" boundary="false" sam="false"/>
-    <node x="3.29042" y="-35.4037" fixed="false" boundary="false" sam="false"/>
-    <node x="12.5473" y="-28.2789" fixed="false" boundary="false" sam="false"/>
-    <node x="5.63445" y="-32.1267" fixed="false" boundary="false" sam="false"/>
-    <node x="8.14278" y="-16.027" fixed="false" boundary="false" sam="false"/>
-    <node x="-8.53032" y="-17.032" fixed="false" boundary="false" sam="false"/>
-    <node x="2.61334" y="-17.6199" fixed="false" boundary="false" sam="false"/>
-    <node x="-4.52568" y="-19.9084" fixed="false" boundary="false" sam="false"/>
-    <node x="22.7561" y="-8.55021" fixed="false" boundary="false" sam="false"/>
-    <node x="11.9014" y="-15.4462" fixed="false" boundary="false" sam="false"/>
-    <node x="20.4731" y="-10.8676" fixed="false" boundary="false" sam="false"/>
-    <node x="11.1366" y="2.99876" fixed="false" boundary="false" sam="false"/>
-    <node x="16.9015" y="5.16003" fixed="false" boundary="false" sam="false"/>
-    <node x="13.9961" y="4.14331" fixed="false" boundary="false" sam="false"/>
-    <node x="4.60066" y="20.857" fixed="false" boundary="false" sam="false"/>
-    <node x="6.76761" y="14.6019" fixed="false" boundary="false" sam="false"/>
-    <node x="-8.83419" y="18.6346" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.523" y="4.76407" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.7653" y="14.1106" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.894" y="7.45958" fixed="false" boundary="false" sam="false"/>
-    <node x="-26.2098" y="11.3337" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.4061" y="5.2325" fixed="false" boundary="false" sam="false"/>
-    <node x="-27.7074" y="8.43713" fixed="false" boundary="false" sam="false"/>
-    <node x="-29.9572" y="-2.49694" fixed="false" boundary="false" sam="false"/>
-    <node x="-20.8903" y="-12.023" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.5303" y="-7.40033" fixed="false" boundary="false" sam="false"/>
-    <node x="-32.9984" y="-0.321358" fixed="false" boundary="false" sam="false"/>
-    <node x="-37.829" y="12.9578" fixed="false" boundary="false" sam="false"/>
-    <node x="-36.7826" y="9.48456" fixed="false" boundary="false" sam="false"/>
-    <node x="-23.0902" y="-14.6814" fixed="false" boundary="false" sam="false"/>
-    <node x="-19.6623" y="-27.0951" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.0699" y="-21.3164" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.4731" y="-19.1903" fixed="false" boundary="false" sam="false"/>
-    <node x="-16.8155" y="-14.8659" fixed="false" boundary="false" sam="false"/>
-    <node x="-14.9482" y="-17.3176" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.79921" y="-25.907" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.28749" y="-19.9418" fixed="false" boundary="false" sam="false"/>
-    <node x="-2.57735" y="-22.8468" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.84214" y="-20.2705" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.79415" y="-26.1344" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.91501" y="-23.5446" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.13066" y="-14.0517" fixed="false" boundary="false" sam="false"/>
-    <node x="5.00179" y="-15.4316" fixed="false" boundary="false" sam="false"/>
-    <node x="2.28009" y="-13.8741" fixed="false" boundary="false" sam="false"/>
-    <node x="12.2008" y="-23.9078" fixed="false" boundary="false" sam="false"/>
-    <node x="3.41922" y="-30.6141" fixed="false" boundary="false" sam="false"/>
-    <node x="6.15617" y="-28.0542" fixed="false" boundary="false" sam="false"/>
-    <node x="27.9808" y="-4.26391" fixed="false" boundary="false" sam="false"/>
-    <node x="26.8379" y="1.94235" fixed="false" boundary="false" sam="false"/>
-    <node x="26.6721" y="-1.25842" fixed="false" boundary="false" sam="false"/>
-    <node x="22.3051" y="8.70893" fixed="false" boundary="false" sam="false"/>
-    <node x="21.8681" y="11.7627" fixed="false" boundary="false" sam="false"/>
-    <node x="28.8634" y="18.9303" fixed="false" boundary="false" sam="false"/>
-    <node x="19.0241" y="26.1707" fixed="false" boundary="false" sam="false"/>
-    <node x="23.1719" y="21.1761" fixed="false" boundary="false" sam="false"/>
-    <node x="16.9895" y="23.0321" fixed="false" boundary="false" sam="false"/>
-    <node x="7.26522" y="30.9108" fixed="false" boundary="false" sam="false"/>
-    <node x="14.131" y="24.5443" fixed="false" boundary="false" sam="false"/>
-    <node x="-8.20729" y="35.794" fixed="false" boundary="false" sam="false"/>
-    <node x="4.18277" y="26.298" fixed="false" boundary="false" sam="false"/>
-    <node x="-6.63673" y="32.9609" fixed="false" boundary="false" sam="false"/>
-    <node x="1.65459" y="28.2289" fixed="false" boundary="false" sam="false"/>
-    <node x="-27.053" y="28.1244" fixed="false" boundary="false" sam="false"/>
-    <node x="-27.7218" y="21.3181" fixed="false" boundary="false" sam="false"/>
-    <node x="8.74994" y="-29.4987" fixed="false" boundary="false" sam="false"/>
-    <node x="9.31226" y="-26.3197" fixed="false" boundary="false" sam="false"/>
-    <node x="14.6421" y="-18.18" fixed="false" boundary="false" sam="false"/>
-    <node x="18.4393" y="-23.2118" fixed="false" boundary="false" sam="false"/>
-    <node x="16.9938" y="-20.3484" fixed="false" boundary="false" sam="false"/>
-    <node x="24.5306" y="-15.5841" fixed="false" boundary="false" sam="false"/>
-    <node x="30.9301" y="-15.7704" fixed="false" boundary="false" sam="false"/>
-    <node x="27.77" y="-15.6165" fixed="false" boundary="false" sam="false"/>
-    <node x="31.6059" y="-11.1983" fixed="false" boundary="false" sam="false"/>
-    <node x="34.0333" y="3.14807" fixed="false" boundary="false" sam="false"/>
-    <node x="29.2638" y="4.20578" fixed="false" boundary="false" sam="false"/>
-    <node x="31.2362" y="1.64385" fixed="false" boundary="false" sam="false"/>
-    <node x="25.0883" y="7.26215" fixed="false" boundary="false" sam="false"/>
-    <node x="31.0482" y="8.89114" fixed="false" boundary="false" sam="false"/>
-    <node x="27.8318" y="8.75717" fixed="false" boundary="false" sam="false"/>
-    <node x="18.7727" y="18.4832" fixed="false" boundary="false" sam="false"/>
-    <node x="25.4951" y="18.9213" fixed="false" boundary="false" sam="false"/>
-    <node x="22.1941" y="18.4824" fixed="false" boundary="false" sam="false"/>
-    <node x="24.651" y="27.4272" fixed="false" boundary="false" sam="false"/>
-    <node x="20.9547" y="23.5376" fixed="false" boundary="false" sam="false"/>
-    <node x="23.9877" y="24.3124" fixed="false" boundary="false" sam="false"/>
-    <node x="15.7428" y="30.1083" fixed="false" boundary="false" sam="false"/>
-    <node x="9.86213" y="28.9544" fixed="false" boundary="false" sam="false"/>
-    <node x="12.9992" y="28.8229" fixed="false" boundary="false" sam="false"/>
-    <node x="3.70472" y="42.1691" fixed="false" boundary="false" sam="false"/>
-    <node x="1.13951" y="39.1587" fixed="false" boundary="false" sam="false"/>
-    <node x="0.0744656" y="34.0956" fixed="false" boundary="false" sam="false"/>
-    <node x="-3.92023" y="31.2718" fixed="false" boundary="false" sam="false"/>
-    <node x="-0.815304" y="31.158" fixed="false" boundary="false" sam="false"/>
-    <node x="9.47143" y="22.5502" fixed="false" boundary="false" sam="false"/>
-    <node x="12.3022" y="27.1094" fixed="false" boundary="false" sam="false"/>
-    <node x="9.64366" y="25.7642" fixed="false" boundary="false" sam="false"/>
-    <node x="-2.69065" y="26.7222" fixed="false" boundary="false" sam="false"/>
-    <node x="-1.31869" y="29.4968" fixed="false" boundary="false" sam="false"/>
-    <node x="-3.2202" y="21.1627" fixed="false" boundary="false" sam="false"/>
-    <node x="-6.08395" y="22.8337" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.4645" y="31.5783" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.2951" y="27.2315" fixed="false" boundary="false" sam="false"/>
-    <node x="-12.8501" y="29.3211" fixed="false" boundary="false" sam="false"/>
-    <node x="-18.1899" y="21.5593" fixed="false" boundary="false" sam="false"/>
-    <node x="-16.5802" y="24.3916" fixed="false" boundary="false" sam="false"/>
-    <node x="-23.3059" y="22.3001" fixed="false" boundary="false" sam="false"/>
-    <node x="-20.6048" y="23.8968" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.434" y="17.9551" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.266" y="17.5817" fixed="false" boundary="false" sam="false"/>
-    <node x="-29.81" y="25.6299" fixed="false" boundary="false" sam="false"/>
-    <node x="-26.9136" y="24.6205" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.9138" y="13.3629" fixed="false" boundary="false" sam="false"/>
-    <node x="-34.8331" y="11.5576" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.762" y="12.0509" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.3553" y="6.28911" fixed="false" boundary="false" sam="false"/>
-    <node x="-34.9125" y="2.67029" fixed="false" boundary="false" sam="false"/>
-    <node x="-31.7992" y="3.14313" fixed="false" boundary="false" sam="false"/>
-    <node x="-39.1289" y="7.70483" fixed="false" boundary="false" sam="false"/>
-    <node x="-36.5" y="5.88702" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.565" y="-9.50414" fixed="false" boundary="false" sam="false"/>
-    <node x="-28.4326" y="-5.89969" fixed="false" boundary="false" sam="false"/>
-    <node x="-20.4988" y="-3.57756" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.8757" y="-9.35375" fixed="false" boundary="false" sam="false"/>
-    <node x="-21.2807" y="-6.6748" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.3251" y="-18.0031" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.3303" y="-18.0088" fixed="false" boundary="false" sam="false"/>
-    <node x="-19.8297" y="-19.8884" fixed="false" boundary="false" sam="false"/>
-    <node x="-27.1662" y="-20.6009" fixed="false" boundary="false" sam="false"/>
-    <node x="-22.1585" y="-24.6697" fixed="false" boundary="false" sam="false"/>
-    <node x="-25.2152" y="-23.3478" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.12" y="-24.0158" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.9349" y="-25.2701" fixed="false" boundary="false" sam="false"/>
-    <node x="-13.9242" y="-24.7527" fixed="false" boundary="false" sam="false"/>
-    <node x="7.39924" y="-23.8904" fixed="false" boundary="false" sam="false"/>
-    <node x="1.94456" y="-20.7383" fixed="false" boundary="false" sam="false"/>
-    <node x="-7.53763" y="10.138" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.0887" y="15.6561" fixed="false" boundary="false" sam="false"/>
-    <node x="-9.74403" y="12.4967" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.6215" y="1.4598" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.4503" y="-1.60284" fixed="false" boundary="false" sam="false"/>
-    <node x="-23.3701" y="9.20328" fixed="false" boundary="false" sam="false"/>
-    <node x="-17.2155" y="16.5405" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.855" y="13.6943" fixed="false" boundary="false" sam="false"/>
-    <node x="-11.4833" y="-16.1698" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.9437" y="-9.86269" fixed="false" boundary="false" sam="false"/>
-    <node x="-11.5915" y="-12.9943" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.5952" y="-7.34564" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.6437" y="-3.62755" fixed="false" boundary="false" sam="false"/>
-    <node x="-13.4773" y="-5.01463" fixed="false" boundary="false" sam="false"/>
-    <node x="0.615766" y="-8.49973" fixed="false" boundary="false" sam="false"/>
-    <node x="-0.871853" y="-13.5544" fixed="false" boundary="false" sam="false"/>
-    <node x="1.37886" y="-11.4143" fixed="false" boundary="false" sam="false"/>
-    <node x="9.04624" y="-5.42429" fixed="false" boundary="false" sam="false"/>
-    <node x="14.9619" y="-13.1264" fixed="false" boundary="false" sam="false"/>
-    <node x="12.5696" y="-6.65359" fixed="false" boundary="false" sam="false"/>
-    <node x="14.735" y="-3.00868" fixed="false" boundary="false" sam="false"/>
-    <node x="17.7614" y="2.25418" fixed="false" boundary="false" sam="false"/>
-    <node x="17.0216" y="-0.754602" fixed="false" boundary="false" sam="false"/>
-    <node x="13.5879" y="12.0095" fixed="false" boundary="false" sam="false"/>
-    <node x="9.93332" y="7.29886" fixed="false" boundary="false" sam="false"/>
-    <node x="12.9292" y="8.79615" fixed="false" boundary="false" sam="false"/>
-    <node x="6.44575" y="17.9625" fixed="false" boundary="false" sam="false"/>
-    <node x="9.77621" y="18.2113" fixed="false" boundary="false" sam="false"/>
-    <node x="2.15993" y="18.7417" fixed="false" boundary="false" sam="false"/>
-    <node x="-4.11112" y="12.0141" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.38636" y="18.1911" fixed="false" boundary="false" sam="false"/>
-    <node x="-5.06911" y="15.0813" fixed="false" boundary="false" sam="false"/>
-    <node x="-15.0801" y="10.6027" fixed="false" boundary="false" sam="false"/>
-    <node x="-10.1014" y="7.31336" fixed="false" boundary="false" sam="false"/>
-    <node x="-13.1066" y="8.17187" fixed="false" boundary="false" sam="false"/>
-    <node x="17.8728" y="-4.63827" fixed="false" boundary="false" sam="false"/>
-    <node x="15.1261" y="-9.40036" fixed="false" boundary="false" sam="false"/>
-    <node x="17.9808" y="-7.82746" fixed="false" boundary="false" sam="false"/>
-    <node x="18.186" y="-13.4035" fixed="false" boundary="false" sam="false"/>
-    <node x="-3.95311" y="-14.4065" fixed="false" boundary="false" sam="false"/>
-    <node x="-2.03975" y="-16.8892" fixed="false" boundary="false" sam="false"/>
-    <node x="24.5815" y="4.18143" fixed="false" boundary="false" sam="false"/>
-    <node x="20.1281" y="0.270825" fixed="false" boundary="false" sam="false"/>
-    <node x="21.8238" y="2.7789" fixed="false" boundary="false" sam="false"/>
-    <node x="19.89" y="15.4933" fixed="false" boundary="false" sam="false"/>
-    <node x="16.6479" y="11.2616" fixed="false" boundary="false" sam="false"/>
-    <node x="17.0259" y="14.37" fixed="false" boundary="false" sam="false"/>
-  </nodes>
-  <cells n="115" offsetx="0" offsety="0" magnification="1" base_area="293.893" nchem="8">
-    <cell index="0" area="32.5155" target_area="54.0973" target_length="60" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="228"/>
-      <node n="230"/>
-      <node n="229"/>
-      <node n="200"/>
-      <node n="231"/>
-      <node n="233"/>
-      <node n="232"/>
-      <wall w="73"/>
-      <wall w="74"/>
-      <wall w="80"/>
-      <wall w="76"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="1" area="75.8069" target_area="107.726" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="3">
-      <node n="283"/>
-      <node n="177"/>
-      <node n="175"/>
-      <node n="131"/>
-      <node n="87"/>
-      <node n="281"/>
-      <node n="282"/>
-      <node n="176"/>
-      <wall w="6"/>
-      <wall w="139"/>
-      <wall w="48"/>
-      <wall w="142"/>
-      <wall w="143"/>
-      <wall w="149"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="2" area="34.2582" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="192"/>
-      <node n="151"/>
-      <node n="150"/>
-      <node n="115"/>
-      <node n="259"/>
-      <node n="261"/>
-      <node n="260"/>
-      <wall w="104"/>
-      <wall w="52"/>
-      <wall w="97"/>
-      <wall w="98"/>
-      <wall w="304"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="3" area="350.267" target_area="431.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="80"/>
-      <node n="48"/>
-      <node n="50"/>
-      <node n="51"/>
-      <node n="49"/>
-      <node n="134"/>
-      <node n="136"/>
-      <node n="137"/>
-      <node n="135"/>
-      <wall w="0"/>
-      <wall w="1"/>
-      <wall w="194"/>
-      <wall w="37"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="4" area="180.175" target_area="218.577" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="6" cell_type="2">
-      <node n="91"/>
-      <node n="92"/>
-      <node n="90"/>
-      <node n="52"/>
-      <node n="102"/>
-      <node n="165"/>
-      <node n="169"/>
-      <node n="54"/>
-      <node n="146"/>
-      <node n="148"/>
-      <node n="147"/>
-      <wall w="2"/>
-      <wall w="9"/>
-      <wall w="20"/>
-      <wall w="169"/>
-      <wall w="164"/>
-      <wall w="43"/>
-      <wall w="45"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="5" area="399.447" target_area="434.653" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="245"/>
-      <node n="74"/>
-      <node n="181"/>
-      <node n="270"/>
-      <node n="143"/>
-      <node n="72"/>
-      <node n="33"/>
-      <node n="31"/>
-      <node n="81"/>
-      <node n="44"/>
-      <node n="93"/>
-      <node n="95"/>
-      <node n="96"/>
-      <node n="94"/>
-      <wall w="25"/>
-      <wall w="117"/>
-      <wall w="12"/>
-      <wall w="13"/>
-      <wall w="121"/>
-      <wall w="126"/>
-      <wall w="87"/>
-      <wall w="119"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="6" area="174.868" target_area="215.764" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="6" cell_type="3">
-      <node n="116"/>
-      <node n="117"/>
-      <node n="118"/>
-      <node n="77"/>
-      <node n="78"/>
-      <node n="76"/>
-      <node n="193"/>
-      <node n="195"/>
-      <node n="257"/>
-      <node n="196"/>
-      <node n="194"/>
-      <wall w="4"/>
-      <wall w="26"/>
-      <wall w="55"/>
-      <wall w="56"/>
-      <wall w="57"/>
-      <wall w="95"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="7" area="32.8289" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="215"/>
-      <node n="214"/>
-      <node n="161"/>
-      <node n="121"/>
-      <node n="119"/>
-      <node n="333"/>
-      <node n="213"/>
-      <wall w="240"/>
-      <wall w="42"/>
-      <wall w="65"/>
-      <wall w="242"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="8" area="384.752" target_area="436.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="320"/>
-      <node n="39"/>
-      <node n="312"/>
-      <node n="41"/>
-      <node n="49"/>
-      <node n="51"/>
-      <node n="50"/>
-      <node n="48"/>
-      <node n="97"/>
-      <node n="99"/>
-      <node n="100"/>
-      <node n="98"/>
-      <wall w="1"/>
-      <wall w="67"/>
-      <wall w="16"/>
-      <wall w="218"/>
-      <wall w="17"/>
-      <wall w="201"/>
-      <wall w="213"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="9" area="381.32" target_area="437.153" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="52"/>
-      <node n="83"/>
-      <node n="4"/>
-      <node n="19"/>
-      <node n="40"/>
-      <node n="160"/>
-      <node n="101"/>
-      <node n="103"/>
-      <node n="302"/>
-      <node n="104"/>
-      <node n="102"/>
-      <wall w="3"/>
-      <wall w="38"/>
-      <wall w="185"/>
-      <wall w="20"/>
-      <wall w="21"/>
-      <wall w="70"/>
-      <wall w="182"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="10" area="374.767" target_area="432.778" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="153"/>
-      <node n="223"/>
-      <node n="58"/>
-      <node n="56"/>
-      <node n="46"/>
-      <node n="11"/>
-      <node n="7"/>
-      <node n="122"/>
-      <node n="124"/>
-      <node n="125"/>
-      <node n="123"/>
-      <wall w="18"/>
-      <wall w="29"/>
-      <wall w="225"/>
-      <wall w="30"/>
-      <wall w="40"/>
-      <wall w="219"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="11" area="383.78" target_area="438.403" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="131"/>
-      <node n="62"/>
-      <node n="278"/>
-      <node n="60"/>
-      <node n="71"/>
-      <node n="45"/>
-      <node n="10"/>
-      <node n="24"/>
-      <node n="86"/>
-      <node n="88"/>
-      <node n="87"/>
-      <wall w="132"/>
-      <wall w="15"/>
-      <wall w="5"/>
-      <wall w="6"/>
-      <wall w="7"/>
-      <wall w="140"/>
-      <wall w="135"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="12" area="360.805" target_area="435.903" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="64"/>
-      <node n="17"/>
-      <node n="15"/>
-      <node n="9"/>
-      <node n="0"/>
-      <node n="105"/>
-      <node n="107"/>
-      <node n="108"/>
-      <node n="106"/>
-      <wall w="36"/>
-      <wall w="22"/>
-      <wall w="50"/>
-      <wall w="23"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="13" area="404.046" target_area="430.278" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="5" cell_type="0">
-      <node n="340"/>
-      <node n="69"/>
-      <node n="67"/>
-      <node n="342"/>
-      <node n="16"/>
-      <node n="345"/>
-      <node n="32"/>
-      <node n="204"/>
-      <node n="352"/>
-      <node n="20"/>
-      <node n="138"/>
-      <node n="140"/>
-      <node n="357"/>
-      <node n="328"/>
-      <node n="361"/>
-      <node n="141"/>
-      <node n="139"/>
-      <wall w="62"/>
-      <wall w="264"/>
-      <wall w="60"/>
-      <wall w="260"/>
-      <wall w="41"/>
-      <wall w="288"/>
-      <wall w="58"/>
-      <wall w="236"/>
-      <wall w="257"/>
-      <wall w="258"/>
-      <wall w="295"/>
-      <wall w="269"/>
-      <wall w="284"/>
-      <wall w="286"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="14" area="39.8669" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="184"/>
-      <node n="144"/>
-      <node n="243"/>
-      <node n="244"/>
-      <node n="183"/>
-      <node n="372"/>
-      <node n="374"/>
-      <node n="373"/>
-      <wall w="49"/>
-      <wall w="315"/>
-      <wall w="85"/>
-      <wall w="319"/>
-      <wall w="320"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="15" area="363.445" target_area="431.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="18"/>
-      <node n="76"/>
-      <node n="78"/>
-      <node n="77"/>
-      <node n="75"/>
-      <node n="43"/>
-      <node n="126"/>
-      <node n="128"/>
-      <node n="129"/>
-      <node n="127"/>
-      <wall w="4"/>
-      <wall w="53"/>
-      <wall w="28"/>
-      <wall w="33"/>
-      <wall w="34"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="16" area="361.528" target_area="438.403" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="79"/>
-      <node n="2"/>
-      <node n="27"/>
-      <node n="61"/>
-      <node n="63"/>
-      <node n="281"/>
-      <node n="87"/>
-      <node n="88"/>
-      <node n="86"/>
-      <wall w="7"/>
-      <wall w="144"/>
-      <wall w="8"/>
-      <wall w="10"/>
-      <wall w="142"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="17" area="388.75" target_area="437.153" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="251"/>
-      <node n="174"/>
-      <node n="29"/>
-      <node n="61"/>
-      <node n="27"/>
-      <node n="3"/>
-      <node n="25"/>
-      <node n="90"/>
-      <node n="92"/>
-      <node n="91"/>
-      <node n="147"/>
-      <node n="89"/>
-      <wall w="9"/>
-      <wall w="10"/>
-      <wall w="90"/>
-      <wall w="11"/>
-      <wall w="165"/>
-      <wall w="145"/>
-      <wall w="147"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="18" area="362.725" target_area="434.653" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="1"/>
-      <node n="10"/>
-      <node n="45"/>
-      <node n="71"/>
-      <node n="275"/>
-      <node n="73"/>
-      <node n="94"/>
-      <node n="96"/>
-      <node n="95"/>
-      <node n="93"/>
-      <wall w="13"/>
-      <wall w="14"/>
-      <wall w="15"/>
-      <wall w="86"/>
-      <wall w="134"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="19" area="361.858" target_area="436.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="26"/>
-      <node n="6"/>
-      <node n="11"/>
-      <node n="46"/>
-      <node n="56"/>
-      <node n="98"/>
-      <node n="100"/>
-      <node n="99"/>
-      <node n="97"/>
-      <wall w="17"/>
-      <wall w="18"/>
-      <wall w="19"/>
-      <wall w="217"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="20" area="19.8131" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="255"/>
-      <node n="165"/>
-      <node n="102"/>
-      <node n="104"/>
-      <node n="302"/>
-      <node n="303"/>
-      <wall w="21"/>
-      <wall w="43"/>
-      <wall w="44"/>
-      <wall w="177"/>
-      <wall w="180"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="21" area="361.094" target_area="435.903" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="31"/>
-      <node n="33"/>
-      <node n="72"/>
-      <node n="266"/>
-      <node n="65"/>
-      <node n="66"/>
-      <node n="106"/>
-      <node n="108"/>
-      <node n="107"/>
-      <node n="105"/>
-      <wall w="23"/>
-      <wall w="112"/>
-      <wall w="24"/>
-      <wall w="84"/>
-      <wall w="25"/>
-      <wall w="108"/>
-      <wall w="118"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="22" area="40.8482" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="111"/>
-      <node n="225"/>
-      <node n="227"/>
-      <node n="226"/>
-      <node n="317"/>
-      <node n="154"/>
-      <node n="323"/>
-      <node n="325"/>
-      <node n="324"/>
-      <wall w="71"/>
-      <wall w="211"/>
-      <wall w="220"/>
-      <wall w="221"/>
-      <wall w="222"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="23" area="44.1339" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="346"/>
-      <node n="366"/>
-      <node n="203"/>
-      <node n="201"/>
-      <node n="112"/>
-      <node n="34"/>
-      <node n="363"/>
-      <node n="365"/>
-      <node n="364"/>
-      <wall w="114"/>
-      <wall w="300"/>
-      <wall w="262"/>
-      <wall w="292"/>
-      <wall w="293"/>
-      <wall w="298"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="24" area="357.557" target_area="431.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="37"/>
-      <node n="35"/>
-      <node n="8"/>
-      <node n="84"/>
-      <node n="75"/>
-      <node n="77"/>
-      <node n="118"/>
-      <node n="117"/>
-      <node n="116"/>
-      <wall w="26"/>
-      <wall w="27"/>
-      <wall w="32"/>
-      <wall w="28"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="25" area="42.0525" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="217"/>
-      <node n="152"/>
-      <node n="156"/>
-      <node n="339"/>
-      <node n="158"/>
-      <node n="314"/>
-      <node n="316"/>
-      <node n="315"/>
-      <wall w="72"/>
-      <wall w="208"/>
-      <wall w="199"/>
-      <wall w="202"/>
-      <wall w="203"/>
-      <wall w="256"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="26" area="404.017" target_area="432.778" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="23"/>
-      <node n="35"/>
-      <node n="37"/>
-      <node n="116"/>
-      <node n="194"/>
-      <node n="238"/>
-      <node n="57"/>
-      <node n="228"/>
-      <node n="232"/>
-      <node n="109"/>
-      <node n="59"/>
-      <node n="123"/>
-      <node n="125"/>
-      <node n="124"/>
-      <node n="122"/>
-      <wall w="30"/>
-      <wall w="75"/>
-      <wall w="31"/>
-      <wall w="229"/>
-      <wall w="224"/>
-      <wall w="32"/>
-      <wall w="56"/>
-      <wall w="73"/>
-      <wall w="78"/>
-      <wall w="81"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="27" area="365.977" target_area="431.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="14"/>
-      <node n="15"/>
-      <node n="17"/>
-      <node n="64"/>
-      <node n="187"/>
-      <node n="149"/>
-      <node n="127"/>
-      <node n="129"/>
-      <node n="128"/>
-      <node n="126"/>
-      <wall w="34"/>
-      <wall w="35"/>
-      <wall w="36"/>
-      <wall w="54"/>
-      <wall w="105"/>
-      <wall w="51"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="28" area="26.3875" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="208"/>
-      <node n="20"/>
-      <node n="142"/>
-      <node n="178"/>
-      <node n="355"/>
-      <node n="354"/>
-      <wall w="268"/>
-      <wall w="321"/>
-      <wall w="61"/>
-      <wall w="270"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="29" area="367.045" target_area="431.528" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="5" cell_type="2">
-      <node n="310"/>
-      <node n="42"/>
-      <node n="40"/>
-      <node n="19"/>
-      <node n="5"/>
-      <node n="47"/>
-      <node n="135"/>
-      <node n="137"/>
-      <node n="136"/>
-      <node n="134"/>
-      <wall w="37"/>
-      <wall w="38"/>
-      <wall w="69"/>
-      <wall w="39"/>
-      <wall w="197"/>
-      <chem n="8">
-        <val v="2"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="30" area="39.0349" target_area="53.7848" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="328"/>
-      <node n="330"/>
-      <node n="329"/>
-      <node n="211"/>
-      <node n="335"/>
-      <node n="360"/>
-      <node n="362"/>
-      <node n="361"/>
-      <wall w="235"/>
-      <wall w="245"/>
-      <wall w="285"/>
-      <wall w="286"/>
-      <wall w="287"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="31" area="40.3593" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="204"/>
-      <node n="206"/>
-      <node n="205"/>
-      <node n="184"/>
-      <node n="373"/>
-      <node n="351"/>
-      <node n="353"/>
-      <node n="352"/>
-      <wall w="49"/>
-      <wall w="313"/>
-      <wall w="58"/>
-      <wall w="59"/>
-      <wall w="267"/>
-      <wall w="326"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="32" area="33.3199" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="55"/>
-      <node n="171"/>
-      <node n="173"/>
-      <node n="172"/>
-      <node n="293"/>
-      <node n="295"/>
-      <node n="294"/>
-      <wall w="46"/>
-      <wall w="91"/>
-      <wall w="160"/>
-      <wall w="158"/>
-      <wall w="163"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="33" area="42.6361" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="189"/>
-      <node n="265"/>
-      <node n="190"/>
-      <node n="188"/>
-      <node n="114"/>
-      <node n="262"/>
-      <node n="264"/>
-      <node n="263"/>
-      <wall w="111"/>
-      <wall w="303"/>
-      <wall w="103"/>
-      <wall w="109"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="34" area="41.6951" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="224"/>
-      <node n="321"/>
-      <node n="223"/>
-      <node n="153"/>
-      <node n="155"/>
-      <node n="323"/>
-      <node n="154"/>
-      <node n="317"/>
-      <node n="319"/>
-      <node n="318"/>
-      <wall w="226"/>
-      <wall w="40"/>
-      <wall w="216"/>
-      <wall w="207"/>
-      <wall w="214"/>
-      <wall w="220"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="35" area="41.9595" target_area="54.0973" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="139"/>
-      <node n="331"/>
-      <node n="332"/>
-      <node n="314"/>
-      <node n="158"/>
-      <node n="339"/>
-      <node n="341"/>
-      <node n="340"/>
-      <wall w="41"/>
-      <wall w="202"/>
-      <wall w="291"/>
-      <wall w="238"/>
-      <wall w="253"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="36" area="42.5076" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="219"/>
-      <node n="216"/>
-      <node n="157"/>
-      <node n="161"/>
-      <node n="214"/>
-      <node n="307"/>
-      <node n="309"/>
-      <node n="308"/>
-      <wall w="42"/>
-      <wall w="204"/>
-      <wall w="241"/>
-      <wall w="66"/>
-      <wall w="68"/>
-      <wall w="193"/>
-      <wall w="188"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="37" area="26.6787" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="170"/>
-      <node n="169"/>
-      <node n="165"/>
-      <node n="255"/>
-      <node n="167"/>
-      <node n="298"/>
-      <node n="299"/>
-      <wall w="44"/>
-      <wall w="45"/>
-      <wall w="168"/>
-      <wall w="178"/>
-      <wall w="171"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="38" area="34.1436" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="168"/>
-      <node n="53"/>
-      <node n="171"/>
-      <node n="55"/>
-      <node n="294"/>
-      <node n="297"/>
-      <node n="296"/>
-      <wall w="47"/>
-      <wall w="63"/>
-      <wall w="46"/>
-      <wall w="173"/>
-      <wall w="167"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="39" area="39.9605" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="171"/>
-      <node n="53"/>
-      <node n="209"/>
-      <node n="358"/>
-      <node n="28"/>
-      <node n="291"/>
-      <node n="292"/>
-      <node n="173"/>
-      <wall w="276"/>
-      <wall w="281"/>
-      <wall w="47"/>
-      <wall w="64"/>
-      <wall w="158"/>
-      <wall w="159"/>
-      <wall w="279"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="40" area="40.9315" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="290"/>
-      <node n="254"/>
-      <node n="252"/>
-      <node n="133"/>
-      <node n="249"/>
-      <node n="175"/>
-      <node n="177"/>
-      <node n="283"/>
-      <node n="285"/>
-      <node n="284"/>
-      <wall w="48"/>
-      <wall w="141"/>
-      <wall w="88"/>
-      <wall w="156"/>
-      <wall w="146"/>
-      <wall w="154"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="41" area="37.6634" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="279"/>
-      <node n="249"/>
-      <node n="133"/>
-      <node n="252"/>
-      <node n="179"/>
-      <node n="286"/>
-      <node n="288"/>
-      <node n="287"/>
-      <wall w="272"/>
-      <wall w="88"/>
-      <wall w="138"/>
-      <wall w="157"/>
-      <wall w="136"/>
-      <wall w="151"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="42" area="38.2896" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="247"/>
-      <node n="276"/>
-      <node n="246"/>
-      <node n="248"/>
-      <node n="12"/>
-      <node n="272"/>
-      <node n="274"/>
-      <node n="273"/>
-      <wall w="323"/>
-      <wall w="152"/>
-      <wall w="131"/>
-      <wall w="89"/>
-      <wall w="125"/>
-      <wall w="129"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="43" area="39.1015" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="186"/>
-      <node n="185"/>
-      <node n="112"/>
-      <node n="240"/>
-      <node n="242"/>
-      <node n="241"/>
-      <node n="369"/>
-      <node n="371"/>
-      <node n="370"/>
-      <wall w="113"/>
-      <wall w="123"/>
-      <wall w="83"/>
-      <wall w="311"/>
-      <wall w="312"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="44" area="48.4711" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="189"/>
-      <node n="263"/>
-      <node n="187"/>
-      <node n="64"/>
-      <node n="106"/>
-      <node n="66"/>
-      <node n="265"/>
-      <wall w="50"/>
-      <wall w="51"/>
-      <wall w="107"/>
-      <wall w="108"/>
-      <wall w="109"/>
-      <wall w="110"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="45" area="88.1313" target_area="108.351" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="3">
-      <node n="193"/>
-      <node n="76"/>
-      <node n="18"/>
-      <node n="127"/>
-      <node n="149"/>
-      <node n="151"/>
-      <node n="192"/>
-      <node n="260"/>
-      <node n="191"/>
-      <wall w="52"/>
-      <wall w="53"/>
-      <wall w="54"/>
-      <wall w="94"/>
-      <wall w="106"/>
-      <wall w="55"/>
-      <wall w="102"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="46" area="20.495" target_area="53.941" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="239"/>
-      <node n="238"/>
-      <node n="194"/>
-      <node n="196"/>
-      <node n="257"/>
-      <node n="258"/>
-      <wall w="57"/>
-      <wall w="81"/>
-      <wall w="228"/>
-      <wall w="93"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="47" area="34.8763" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="236"/>
-      <node n="235"/>
-      <node n="197"/>
-      <node n="85"/>
-      <node n="16"/>
-      <node n="342"/>
-      <node n="344"/>
-      <node n="343"/>
-      <wall w="263"/>
-      <wall w="234"/>
-      <wall w="307"/>
-      <wall w="258"/>
-      <wall w="259"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="48" area="44.4252" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="1">
-      <node n="346"/>
-      <node n="202"/>
-      <node n="197"/>
-      <node n="36"/>
-      <node n="113"/>
-      <node n="259"/>
-      <node n="115"/>
-      <node n="366"/>
-      <wall w="100"/>
-      <wall w="82"/>
-      <wall w="233"/>
-      <wall w="97"/>
-      <wall w="265"/>
-      <wall w="298"/>
-      <wall w="299"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="49" area="38.0381" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="205"/>
-      <node n="206"/>
-      <node n="204"/>
-      <node n="32"/>
-      <node n="348"/>
-      <node n="350"/>
-      <node n="349"/>
-      <wall w="59"/>
-      <wall w="294"/>
-      <wall w="60"/>
-      <wall w="314"/>
-      <wall w="266"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="50" area="33.948" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="138"/>
-      <node n="20"/>
-      <node n="208"/>
-      <node n="354"/>
-      <node n="207"/>
-      <node n="356"/>
-      <node n="82"/>
-      <wall w="61"/>
-      <wall w="62"/>
-      <wall w="282"/>
-      <wall w="274"/>
-      <wall w="275"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="51" area="35.8203" target_area="53.785" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="1">
-      <node n="211"/>
-      <node n="329"/>
-      <node n="209"/>
-      <node n="53"/>
-      <node n="168"/>
-      <node n="334"/>
-      <node n="335"/>
-      <wall w="63"/>
-      <wall w="172"/>
-      <wall w="64"/>
-      <wall w="237"/>
-      <wall w="245"/>
-      <wall w="246"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="52" area="37.7827" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="163"/>
-      <node n="307"/>
-      <node n="214"/>
-      <node n="215"/>
-      <node n="213"/>
-      <node n="304"/>
-      <node n="306"/>
-      <node n="305"/>
-      <wall w="65"/>
-      <wall w="92"/>
-      <wall w="66"/>
-      <wall w="184"/>
-      <wall w="190"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="53" area="40.5638" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="216"/>
-      <node n="219"/>
-      <node n="120"/>
-      <node n="49"/>
-      <node n="41"/>
-      <node n="312"/>
-      <node n="313"/>
-      <wall w="67"/>
-      <wall w="68"/>
-      <wall w="195"/>
-      <wall w="205"/>
-      <wall w="198"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="54" area="30.2825" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="221"/>
-      <node n="220"/>
-      <node n="160"/>
-      <node n="40"/>
-      <node n="42"/>
-      <node n="310"/>
-      <node n="311"/>
-      <wall w="69"/>
-      <wall w="70"/>
-      <wall w="191"/>
-      <wall w="192"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="55" area="38.5383" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="224"/>
-      <node n="318"/>
-      <node n="222"/>
-      <node n="39"/>
-      <node n="320"/>
-      <node n="322"/>
-      <node n="321"/>
-      <wall w="200"/>
-      <wall w="212"/>
-      <wall w="213"/>
-      <wall w="214"/>
-      <wall w="215"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="56" area="38.889" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="156"/>
-      <node n="152"/>
-      <node n="226"/>
-      <node n="227"/>
-      <node n="225"/>
-      <node n="336"/>
-      <node n="338"/>
-      <node n="337"/>
-      <wall w="71"/>
-      <wall w="72"/>
-      <wall w="254"/>
-      <wall w="77"/>
-      <wall w="210"/>
-      <wall w="250"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="57" area="31.6659" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="229"/>
-      <node n="230"/>
-      <node n="228"/>
-      <node n="57"/>
-      <node n="38"/>
-      <node n="327"/>
-      <wall w="74"/>
-      <wall w="75"/>
-      <wall w="308"/>
-      <wall w="230"/>
-      <wall w="231"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="58" area="42.1194" target_area="54.0973" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="198"/>
-      <node n="336"/>
-      <node n="225"/>
-      <node n="111"/>
-      <node n="324"/>
-      <node n="109"/>
-      <node n="232"/>
-      <node n="233"/>
-      <node n="231"/>
-      <wall w="76"/>
-      <wall w="223"/>
-      <wall w="79"/>
-      <wall w="77"/>
-      <wall w="78"/>
-      <wall w="221"/>
-      <wall w="252"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="59" area="33.2225" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="234"/>
-      <node n="198"/>
-      <node n="231"/>
-      <node n="200"/>
-      <node n="229"/>
-      <node n="368"/>
-      <node n="367"/>
-      <wall w="79"/>
-      <wall w="251"/>
-      <wall w="80"/>
-      <wall w="305"/>
-      <wall w="306"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="60" area="28.2961" target_area="53.941" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="237"/>
-      <node n="113"/>
-      <node n="36"/>
-      <node n="38"/>
-      <node n="326"/>
-      <node n="258"/>
-      <wall w="232"/>
-      <wall w="82"/>
-      <wall w="99"/>
-      <wall w="96"/>
-      <wall w="227"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="61" area="34.8705" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="241"/>
-      <node n="242"/>
-      <node n="240"/>
-      <node n="65"/>
-      <node n="266"/>
-      <node n="268"/>
-      <node n="267"/>
-      <wall w="83"/>
-      <wall w="84"/>
-      <wall w="115"/>
-      <wall w="124"/>
-      <wall w="116"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="62" area="37.942" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="181"/>
-      <node n="182"/>
-      <node n="183"/>
-      <node n="244"/>
-      <node n="243"/>
-      <node n="269"/>
-      <node n="271"/>
-      <node n="270"/>
-      <wall w="85"/>
-      <wall w="127"/>
-      <wall w="316"/>
-      <wall w="119"/>
-      <wall w="120"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="63" area="37.6604" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="247"/>
-      <node n="273"/>
-      <node n="245"/>
-      <node n="94"/>
-      <node n="73"/>
-      <node n="275"/>
-      <node n="277"/>
-      <node n="276"/>
-      <wall w="86"/>
-      <wall w="87"/>
-      <wall w="128"/>
-      <wall w="129"/>
-      <wall w="130"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="64" area="38.5927" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="287"/>
-      <node n="250"/>
-      <node n="248"/>
-      <node n="246"/>
-      <node n="60"/>
-      <node n="278"/>
-      <node n="280"/>
-      <node n="279"/>
-      <wall w="133"/>
-      <wall w="89"/>
-      <wall w="135"/>
-      <wall w="136"/>
-      <wall w="137"/>
-      <wall w="153"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="65" area="41.3937" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="284"/>
-      <node n="253"/>
-      <node n="251"/>
-      <node n="89"/>
-      <node n="293"/>
-      <node n="172"/>
-      <node n="30"/>
-      <node n="289"/>
-      <node n="290"/>
-      <wall w="90"/>
-      <wall w="91"/>
-      <wall w="150"/>
-      <wall w="162"/>
-      <wall w="154"/>
-      <wall w="155"/>
-      <wall w="166"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="66" area="39.1741" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="21"/>
-      <node n="304"/>
-      <node n="213"/>
-      <node n="22"/>
-      <node n="164"/>
-      <node n="166"/>
-      <node n="301"/>
-      <node n="300"/>
-      <wall w="244"/>
-      <wall w="92"/>
-      <wall w="175"/>
-      <wall w="181"/>
-      <wall w="176"/>
-      <wall w="187"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="67" area="26.2731" target_area="53.941" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="195"/>
-      <node n="193"/>
-      <node n="191"/>
-      <node n="237"/>
-      <node n="258"/>
-      <node n="257"/>
-      <wall w="93"/>
-      <wall w="94"/>
-      <wall w="101"/>
-      <wall w="95"/>
-      <wall w="96"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="68" area="31.0167" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="113"/>
-      <node n="237"/>
-      <node n="191"/>
-      <node n="260"/>
-      <node n="261"/>
-      <node n="259"/>
-      <wall w="98"/>
-      <wall w="99"/>
-      <wall w="100"/>
-      <wall w="101"/>
-      <wall w="102"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="69" area="41.4053" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="150"/>
-      <node n="151"/>
-      <node n="149"/>
-      <node n="187"/>
-      <node n="263"/>
-      <node n="264"/>
-      <node n="262"/>
-      <wall w="103"/>
-      <wall w="104"/>
-      <wall w="105"/>
-      <wall w="301"/>
-      <wall w="106"/>
-      <wall w="107"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="70" area="46.7639" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="65"/>
-      <node n="240"/>
-      <node n="112"/>
-      <node n="201"/>
-      <node n="188"/>
-      <node n="190"/>
-      <node n="265"/>
-      <node n="66"/>
-      <wall w="110"/>
-      <wall w="111"/>
-      <wall w="112"/>
-      <wall w="113"/>
-      <wall w="302"/>
-      <wall w="114"/>
-      <wall w="115"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="71" area="27.683" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="72"/>
-      <node n="143"/>
-      <node n="145"/>
-      <node n="267"/>
-      <node n="268"/>
-      <node n="266"/>
-      <wall w="116"/>
-      <wall w="122"/>
-      <wall w="117"/>
-      <wall w="118"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="72" area="34.9116" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="369"/>
-      <node n="241"/>
-      <node n="267"/>
-      <node n="145"/>
-      <node n="143"/>
-      <node n="270"/>
-      <node n="271"/>
-      <node n="269"/>
-      <wall w="120"/>
-      <wall w="121"/>
-      <wall w="122"/>
-      <wall w="123"/>
-      <wall w="124"/>
-      <wall w="318"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="73" area="39.5732" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="372"/>
-      <node n="183"/>
-      <node n="182"/>
-      <node n="181"/>
-      <node n="74"/>
-      <node n="245"/>
-      <node n="273"/>
-      <node n="274"/>
-      <node n="272"/>
-      <wall w="125"/>
-      <wall w="126"/>
-      <wall w="127"/>
-      <wall w="324"/>
-      <wall w="128"/>
-      <wall w="319"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="74" area="33.4649" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="71"/>
-      <node n="60"/>
-      <node n="246"/>
-      <node n="276"/>
-      <node n="277"/>
-      <node n="275"/>
-      <wall w="130"/>
-      <wall w="131"/>
-      <wall w="132"/>
-      <wall w="133"/>
-      <wall w="134"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="75" area="35.3986" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="62"/>
-      <node n="131"/>
-      <node n="175"/>
-      <node n="249"/>
-      <node n="279"/>
-      <node n="280"/>
-      <node n="278"/>
-      <wall w="137"/>
-      <wall w="138"/>
-      <wall w="139"/>
-      <wall w="140"/>
-      <wall w="141"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="76" area="61.133" target_area="107.726" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="3">
-      <node n="63"/>
-      <node n="61"/>
-      <node n="29"/>
-      <node n="174"/>
-      <node n="176"/>
-      <node n="282"/>
-      <node n="281"/>
-      <wall w="143"/>
-      <wall w="144"/>
-      <wall w="145"/>
-      <wall w="148"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="77" area="41.5045" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="176"/>
-      <node n="174"/>
-      <node n="251"/>
-      <node n="253"/>
-      <node n="284"/>
-      <node n="285"/>
-      <node n="283"/>
-      <wall w="146"/>
-      <wall w="147"/>
-      <wall w="148"/>
-      <wall w="149"/>
-      <wall w="150"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="78" area="38.8823" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="180"/>
-      <node n="178"/>
-      <node n="12"/>
-      <node n="248"/>
-      <node n="250"/>
-      <node n="287"/>
-      <node n="288"/>
-      <node n="286"/>
-      <wall w="151"/>
-      <wall w="322"/>
-      <wall w="152"/>
-      <wall w="273"/>
-      <wall w="153"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="79" area="38.8626" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="130"/>
-      <node n="132"/>
-      <node n="207"/>
-      <node n="179"/>
-      <node n="252"/>
-      <node n="254"/>
-      <node n="290"/>
-      <node n="289"/>
-      <wall w="155"/>
-      <wall w="156"/>
-      <wall w="161"/>
-      <wall w="271"/>
-      <wall w="277"/>
-      <wall w="157"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="80" area="35.2104" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="130"/>
-      <node n="289"/>
-      <node n="30"/>
-      <node n="172"/>
-      <node n="173"/>
-      <node n="292"/>
-      <node n="291"/>
-      <wall w="159"/>
-      <wall w="160"/>
-      <wall w="161"/>
-      <wall w="162"/>
-      <wall w="278"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="81" area="36.4421" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="89"/>
-      <node n="147"/>
-      <node n="148"/>
-      <node n="146"/>
-      <node n="294"/>
-      <node n="295"/>
-      <node n="293"/>
-      <wall w="163"/>
-      <wall w="164"/>
-      <wall w="165"/>
-      <wall w="166"/>
-      <wall w="170"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="82" area="33.5714" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="146"/>
-      <node n="54"/>
-      <node n="169"/>
-      <node n="170"/>
-      <node n="299"/>
-      <node n="296"/>
-      <node n="297"/>
-      <node n="294"/>
-      <wall w="167"/>
-      <wall w="168"/>
-      <wall w="169"/>
-      <wall w="170"/>
-      <wall w="174"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="83" area="42.5684" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="166"/>
-      <node n="164"/>
-      <node n="68"/>
-      <node n="334"/>
-      <node n="168"/>
-      <node n="296"/>
-      <node n="299"/>
-      <node n="298"/>
-      <wall w="171"/>
-      <wall w="243"/>
-      <wall w="172"/>
-      <wall w="173"/>
-      <wall w="179"/>
-      <wall w="174"/>
-      <wall w="175"/>
-      <wall w="249"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="84" area="31.9215" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="298"/>
-      <node n="167"/>
-      <node n="255"/>
-      <node n="303"/>
-      <node n="256"/>
-      <node n="300"/>
-      <node n="301"/>
-      <node n="166"/>
-      <wall w="176"/>
-      <wall w="177"/>
-      <wall w="178"/>
-      <wall w="179"/>
-      <wall w="183"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="85" area="33.7282" target_area="54.644" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="103"/>
-      <node n="101"/>
-      <node n="21"/>
-      <node n="300"/>
-      <node n="256"/>
-      <node n="303"/>
-      <node n="302"/>
-      <wall w="180"/>
-      <wall w="186"/>
-      <wall w="181"/>
-      <wall w="182"/>
-      <wall w="183"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="86" area="36.011" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="21"/>
-      <node n="101"/>
-      <node n="160"/>
-      <node n="162"/>
-      <node n="305"/>
-      <node n="306"/>
-      <node n="304"/>
-      <wall w="184"/>
-      <wall w="185"/>
-      <wall w="186"/>
-      <wall w="187"/>
-      <wall w="189"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="87" area="38.4802" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="163"/>
-      <node n="305"/>
-      <node n="162"/>
-      <node n="160"/>
-      <node n="220"/>
-      <node n="221"/>
-      <node n="311"/>
-      <node n="308"/>
-      <node n="309"/>
-      <node n="307"/>
-      <wall w="188"/>
-      <wall w="189"/>
-      <wall w="190"/>
-      <wall w="196"/>
-      <wall w="191"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="88" area="45.3422" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="134"/>
-      <node n="49"/>
-      <node n="120"/>
-      <node n="219"/>
-      <node n="308"/>
-      <node n="311"/>
-      <node n="310"/>
-      <wall w="192"/>
-      <wall w="193"/>
-      <wall w="194"/>
-      <wall w="195"/>
-      <wall w="196"/>
-      <wall w="197"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="89" area="40.985" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="39"/>
-      <node n="222"/>
-      <node n="217"/>
-      <node n="315"/>
-      <node n="218"/>
-      <node n="313"/>
-      <node n="312"/>
-      <wall w="198"/>
-      <wall w="199"/>
-      <wall w="200"/>
-      <wall w="209"/>
-      <wall w="201"/>
-      <wall w="206"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="90" area="41.4841" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="159"/>
-      <node n="157"/>
-      <node n="216"/>
-      <node n="313"/>
-      <node n="218"/>
-      <node n="315"/>
-      <node n="316"/>
-      <node n="314"/>
-      <wall w="203"/>
-      <wall w="204"/>
-      <wall w="239"/>
-      <wall w="205"/>
-      <wall w="206"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="91" area="37.0272" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="226"/>
-      <node n="152"/>
-      <node n="217"/>
-      <node n="222"/>
-      <node n="318"/>
-      <node n="319"/>
-      <node n="317"/>
-      <wall w="207"/>
-      <wall w="208"/>
-      <wall w="209"/>
-      <wall w="210"/>
-      <wall w="211"/>
-      <wall w="212"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="92" area="47.0975" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="98"/>
-      <node n="56"/>
-      <node n="58"/>
-      <node n="223"/>
-      <node n="321"/>
-      <node n="322"/>
-      <node n="320"/>
-      <wall w="215"/>
-      <wall w="216"/>
-      <wall w="217"/>
-      <wall w="218"/>
-      <wall w="219"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="93" area="40.9906" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="155"/>
-      <node n="153"/>
-      <node n="123"/>
-      <node n="59"/>
-      <node n="109"/>
-      <node n="324"/>
-      <node n="325"/>
-      <node n="323"/>
-      <wall w="222"/>
-      <wall w="223"/>
-      <wall w="224"/>
-      <wall w="225"/>
-      <wall w="226"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="94" area="28.0288" target_area="53.941" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="3">
-      <node n="57"/>
-      <node n="238"/>
-      <node n="239"/>
-      <node n="258"/>
-      <node n="326"/>
-      <node n="38"/>
-      <wall w="227"/>
-      <wall w="228"/>
-      <wall w="229"/>
-      <wall w="230"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="95" area="30.1759" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="36"/>
-      <node n="197"/>
-      <node n="235"/>
-      <node n="199"/>
-      <node n="327"/>
-      <node n="38"/>
-      <wall w="231"/>
-      <wall w="232"/>
-      <wall w="233"/>
-      <wall w="234"/>
-      <wall w="309"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="96" area="35.4752" target_area="53.7848" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="209"/>
-      <node n="329"/>
-      <node n="330"/>
-      <node n="328"/>
-      <node n="357"/>
-      <node n="359"/>
-      <node n="358"/>
-      <wall w="235"/>
-      <wall w="236"/>
-      <wall w="237"/>
-      <wall w="279"/>
-      <wall w="280"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="97" area="81.0561" target_area="108.195" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="1">
-      <node n="210"/>
-      <node n="119"/>
-      <node n="121"/>
-      <node n="161"/>
-      <node n="157"/>
-      <node n="159"/>
-      <node n="314"/>
-      <node n="332"/>
-      <node n="331"/>
-      <wall w="238"/>
-      <wall w="239"/>
-      <wall w="240"/>
-      <wall w="248"/>
-      <wall w="241"/>
-      <wall w="289"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="98" area="34.8391" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="70"/>
-      <node n="68"/>
-      <node n="164"/>
-      <node n="22"/>
-      <node n="213"/>
-      <node n="333"/>
-      <node n="119"/>
-      <wall w="242"/>
-      <wall w="243"/>
-      <wall w="247"/>
-      <wall w="244"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="99" area="37.8304" target_area="53.785" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="1">
-      <node n="68"/>
-      <node n="70"/>
-      <node n="119"/>
-      <node n="210"/>
-      <node n="212"/>
-      <node n="360"/>
-      <node n="335"/>
-      <node n="334"/>
-      <wall w="246"/>
-      <wall w="290"/>
-      <wall w="247"/>
-      <wall w="248"/>
-      <wall w="249"/>
-      <wall w="285"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="100" area="37.302" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="198"/>
-      <node n="234"/>
-      <node n="110"/>
-      <node n="67"/>
-      <node n="13"/>
-      <node n="337"/>
-      <node n="338"/>
-      <node n="336"/>
-      <wall w="250"/>
-      <wall w="251"/>
-      <wall w="261"/>
-      <wall w="252"/>
-      <wall w="255"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="101" area="40.5988" target_area="54.0973" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="156"/>
-      <node n="337"/>
-      <node n="13"/>
-      <node n="67"/>
-      <node n="69"/>
-      <node n="340"/>
-      <node n="341"/>
-      <node n="339"/>
-      <wall w="253"/>
-      <wall w="254"/>
-      <wall w="255"/>
-      <wall w="256"/>
-      <wall w="257"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="102" area="35.3251" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="67"/>
-      <node n="110"/>
-      <node n="234"/>
-      <node n="367"/>
-      <node n="343"/>
-      <node n="344"/>
-      <node n="342"/>
-      <wall w="259"/>
-      <wall w="260"/>
-      <wall w="261"/>
-      <wall w="310"/>
-      <wall w="305"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="103" area="74.9649" target_area="108.351" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="1">
-      <node n="16"/>
-      <node n="85"/>
-      <node n="197"/>
-      <node n="202"/>
-      <node n="346"/>
-      <node n="364"/>
-      <node n="347"/>
-      <node n="345"/>
-      <wall w="262"/>
-      <wall w="263"/>
-      <wall w="264"/>
-      <wall w="265"/>
-      <wall w="297"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="104" area="40.7155" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="363"/>
-      <node n="34"/>
-      <node n="112"/>
-      <node n="185"/>
-      <node n="186"/>
-      <node n="370"/>
-      <node n="349"/>
-      <node n="350"/>
-      <node n="348"/>
-      <wall w="266"/>
-      <wall w="296"/>
-      <wall w="317"/>
-      <wall w="292"/>
-      <wall w="311"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="105" area="23.2696" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="142"/>
-      <node n="20"/>
-      <node n="352"/>
-      <node n="353"/>
-      <node n="351"/>
-      <wall w="267"/>
-      <wall w="268"/>
-      <wall w="325"/>
-      <wall w="269"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="106" area="31.3594" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="180"/>
-      <node n="286"/>
-      <node n="179"/>
-      <node n="207"/>
-      <node n="354"/>
-      <node n="355"/>
-      <node n="178"/>
-      <wall w="270"/>
-      <wall w="271"/>
-      <wall w="272"/>
-      <wall w="273"/>
-      <wall w="274"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="107" area="34.2138" target_area="53.863" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="132"/>
-      <node n="130"/>
-      <node n="291"/>
-      <node n="28"/>
-      <node n="82"/>
-      <node n="356"/>
-      <node n="207"/>
-      <wall w="275"/>
-      <wall w="276"/>
-      <wall w="277"/>
-      <wall w="278"/>
-      <wall w="283"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="108" area="33.3059" target_area="53.7848" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="140"/>
-      <node n="138"/>
-      <node n="82"/>
-      <node n="28"/>
-      <node n="358"/>
-      <node n="359"/>
-      <node n="357"/>
-      <wall w="280"/>
-      <wall w="281"/>
-      <wall w="282"/>
-      <wall w="283"/>
-      <wall w="284"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="109" area="39.9753" target_area="53.7848" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="212"/>
-      <node n="210"/>
-      <node n="331"/>
-      <node n="139"/>
-      <node n="141"/>
-      <node n="361"/>
-      <node n="362"/>
-      <node n="360"/>
-      <wall w="287"/>
-      <wall w="288"/>
-      <wall w="289"/>
-      <wall w="290"/>
-      <wall w="291"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="110" area="37.9608" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="348"/>
-      <node n="32"/>
-      <node n="345"/>
-      <node n="347"/>
-      <node n="364"/>
-      <node n="365"/>
-      <node n="363"/>
-      <wall w="293"/>
-      <wall w="294"/>
-      <wall w="295"/>
-      <wall w="296"/>
-      <wall w="297"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="111" area="44.3211" target_area="54.1755" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="7" cell_type="3">
-      <node n="150"/>
-      <node n="262"/>
-      <node n="114"/>
-      <node n="188"/>
-      <node n="201"/>
-      <node n="203"/>
-      <node n="366"/>
-      <node n="115"/>
-      <wall w="299"/>
-      <wall w="300"/>
-      <wall w="301"/>
-      <wall w="302"/>
-      <wall w="303"/>
-      <wall w="304"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="112" area="35.646" target_area="54.0975" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="327"/>
-      <node n="199"/>
-      <node n="235"/>
-      <node n="236"/>
-      <node n="343"/>
-      <node n="367"/>
-      <node n="368"/>
-      <node n="229"/>
-      <wall w="306"/>
-      <wall w="307"/>
-      <wall w="308"/>
-      <wall w="309"/>
-      <wall w="310"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="113" area="41.2394" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="269"/>
-      <node n="243"/>
-      <node n="144"/>
-      <node n="184"/>
-      <node n="205"/>
-      <node n="349"/>
-      <node n="370"/>
-      <node n="371"/>
-      <node n="369"/>
-      <wall w="312"/>
-      <wall w="313"/>
-      <wall w="314"/>
-      <wall w="315"/>
-      <wall w="316"/>
-      <wall w="317"/>
-      <wall w="318"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <cell index="114" area="42.2989" target_area="53.7065" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="8" cell_type="1">
-      <node n="272"/>
-      <node n="12"/>
-      <node n="178"/>
-      <node n="142"/>
-      <node n="351"/>
-      <node n="373"/>
-      <node n="374"/>
-      <node n="372"/>
-      <wall w="320"/>
-      <wall w="321"/>
-      <wall w="322"/>
-      <wall w="323"/>
-      <wall w="324"/>
-      <wall w="325"/>
-      <wall w="326"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </cell>
-    <boundary_polygon index="-1" area="10788.4" target_area="1" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
-      <node n="0"/>
-      <node n="105"/>
-      <node n="31"/>
-      <node n="81"/>
-      <node n="44"/>
-      <node n="93"/>
-      <node n="1"/>
-      <node n="10"/>
-      <node n="24"/>
-      <node n="86"/>
-      <node n="79"/>
-      <node n="2"/>
-      <node n="27"/>
-      <node n="3"/>
-      <node n="25"/>
-      <node n="90"/>
-      <node n="52"/>
-      <node n="83"/>
-      <node n="4"/>
-      <node n="19"/>
-      <node n="5"/>
-      <node n="47"/>
-      <node n="135"/>
-      <node n="80"/>
-      <node n="48"/>
-      <node n="97"/>
-      <node n="26"/>
-      <node n="6"/>
-      <node n="11"/>
-      <node n="7"/>
-      <node n="122"/>
-      <node n="23"/>
-      <node n="35"/>
-      <node n="8"/>
-      <node n="84"/>
-      <node n="75"/>
-      <node n="43"/>
-      <node n="126"/>
-      <node n="14"/>
-      <node n="15"/>
-      <node n="9"/>
-      <wall w="14"/>
-      <wall w="19"/>
-      <wall w="35"/>
-      <wall w="3"/>
-      <wall w="8"/>
-      <wall w="24"/>
-      <wall w="31"/>
-      <wall w="0"/>
-      <wall w="2"/>
-      <wall w="27"/>
-      <wall w="5"/>
-      <wall w="11"/>
-      <wall w="12"/>
-      <wall w="16"/>
-      <wall w="22"/>
-      <wall w="29"/>
-      <wall w="33"/>
-      <wall w="39"/>
-      <chem n="8">
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </chem>
-    </boundary_polygon>
-  </cells>
-  <walls n="327">
-    <wall index="0" c1="3" c2="-1" n1="135" n2="48" length="20.4046" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="1" c1="3" c2="8" n1="48" n2="49" length="22.977" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="2" c1="4" c2="-1" n1="90" n2="52" length="8.24258" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="3" c1="9" c2="-1" n1="52" n2="19" length="26.3037" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="4" c1="6" c2="15" n1="77" n2="76" length="12.5589" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="5" c1="11" c2="-1" n1="10" n2="86" length="18.6489" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="6" c1="1" c2="11" n1="131" n2="87" length="5.47501" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="7" c1="11" c2="16" n1="86" n2="87" length="15.738" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="8" c1="16" c2="-1" n1="86" n2="27" length="29.1962" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="9" c1="4" c2="17" n1="147" n2="90" length="16.1785" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="10" c1="16" c2="17" n1="27" n2="61" length="8.10706" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="11" c1="17" c2="-1" n1="27" n2="90" length="25.9341" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="12" c1="5" c2="-1" n1="31" n2="93" length="24.4847" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="13" c1="5" c2="18" n1="93" n2="94" length="19.0318" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="14" c1="18" c2="-1" n1="93" n2="10" length="20.0295" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="15" c1="18" c2="11" n1="10" n2="71" length="15.3712" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="16" c1="8" c2="-1" n1="48" n2="97" length="9.06896" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="17" c1="8" c2="19" n1="97" n2="98" length="21.5989" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="18" c1="10" c2="19" n1="56" n2="11" length="15.8701" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="19" c1="19" c2="-1" n1="97" n2="11" length="28.6744" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="20" c1="4" c2="9" n1="52" n2="102" length="6.87454" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="21" c1="9" c2="20" n1="302" n2="102" length="10.1417" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="22" c1="12" c2="-1" n1="15" n2="105" length="29.3957" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="23" c1="12" c2="21" n1="105" n2="106" length="21.9213" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="24" c1="21" c2="-1" n1="105" n2="31" length="10.4792" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="25" c1="21" c2="5" n1="31" n2="72" length="15.558" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="26" c1="6" c2="24" n1="116" n2="77" length="17.9546" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="27" c1="24" c2="-1" n1="35" n2="75" length="28.9191" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="28" c1="24" c2="15" n1="75" n2="77" length="9.02928" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="29" c1="10" c2="-1" n1="11" n2="122" length="18.1661" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="30" c1="10" c2="26" n1="122" n2="123" length="18.3027" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="31" c1="26" c2="-1" n1="122" n2="35" length="15.5641" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="32" c1="26" c2="24" n1="35" n2="116" length="15.1084" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="33" c1="15" c2="-1" n1="75" n2="126" length="19.93" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="34" c1="15" c2="27" n1="126" n2="127" length="20.744" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="35" c1="27" c2="-1" n1="126" n2="15" length="19.3891" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="36" c1="27" c2="12" n1="15" n2="64" length="16.962" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="37" c1="3" c2="29" n1="134" n2="135" length="21.3467" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="38" c1="9" c2="29" n1="19" n2="40" length="8.73991" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="39" c1="29" c2="-1" n1="19" n2="135" length="27.1232" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="40" c1="34" c2="10" n1="223" n2="153" length="5.27814" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="41" c1="35" c2="13" n1="340" n2="139" length="4.05079" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="42" c1="7" c2="36" n1="214" n2="161" length="3.22516" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="43" c1="4" c2="20" n1="102" n2="165" length="4.79713" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="44" c1="20" c2="37" n1="255" n2="165" length="3.86225" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="45" c1="4" c2="37" n1="165" n2="169" length="4.13731" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="46" c1="32" c2="38" n1="294" n2="171" length="6.40925" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="47" c1="39" c2="38" n1="171" n2="53" length="3.38138" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="48" c1="1" c2="40" n1="283" n2="175" length="7.32351" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="49" c1="14" c2="31" n1="373" n2="184" length="3.11192" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="50" c1="44" c2="12" n1="64" n2="106" length="6.00758" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="51" c1="27" c2="44" n1="64" n2="187" length="5.76435" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="52" c1="2" c2="45" n1="260" n2="151" length="7.07169" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="53" c1="15" c2="45" n1="127" n2="76" length="10.5472" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="54" c1="27" c2="45" n1="149" n2="127" length="5.88228" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="55" c1="6" c2="45" n1="76" n2="193" length="4.21176" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="56" c1="26" c2="6" n1="116" n2="194" length="5.7045" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="57" c1="6" c2="46" n1="257" n2="194" length="8.10495" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="58" c1="31" c2="13" n1="352" n2="204" length="4.46528" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="59" c1="31" c2="49" n1="204" n2="205" length="6.15825" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="60" c1="49" c2="13" n1="204" n2="32" length="4.53781" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="61" c1="28" c2="50" n1="354" n2="20" length="6.73514" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="62" c1="50" c2="13" n1="138" n2="20" length="4.47407" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="63" c1="38" c2="51" n1="168" n2="53" length="3.52864" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="64" c1="39" c2="51" n1="53" n2="209" length="3.4482" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="65" c1="7" c2="52" n1="213" n2="214" length="6.54077" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="66" c1="52" c2="36" n1="307" n2="214" length="3.1327" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="67" c1="8" c2="53" n1="312" n2="49" length="10.8151" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="68" c1="36" c2="53" n1="219" n2="216" length="3.73924" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="69" c1="29" c2="54" n1="310" n2="40" length="12.1239" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="70" c1="9" c2="54" n1="40" n2="160" length="5.7039" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="71" c1="22" c2="56" n1="225" n2="226" length="6.18543" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="72" c1="56" c2="25" n1="156" n2="152" length="3.41624" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="73" c1="0" c2="26" n1="232" n2="228" length="4.0014" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="74" c1="0" c2="57" n1="228" n2="229" length="6.33608" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="75" c1="57" c2="26" n1="228" n2="57" length="4.16181" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="76" c1="0" c2="58" n1="231" n2="232" length="6.62233" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="77" c1="58" c2="56" n1="336" n2="225" length="3.17851" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="78" c1="58" c2="26" n1="109" n2="232" length="3.80815" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="79" c1="58" c2="59" n1="231" n2="198" length="3.31074" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="80" c1="0" c2="59" n1="229" n2="231" length="6.57453" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="81" c1="26" c2="46" n1="194" n2="238" length="4.79139" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="82" c1="60" c2="48" n1="113" n2="36" length="3.78916" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="83" c1="43" c2="61" n1="240" n2="241" length="6.48314" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="84" c1="21" c2="61" n1="266" n2="65" length="6.52052" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="85" c1="14" c2="62" n1="243" n2="183" length="6.16863" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="86" c1="18" c2="63" n1="275" n2="94" length="10.8259" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="87" c1="5" c2="63" n1="94" n2="245" length="4.05223" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="88" c1="40" c2="41" n1="252" n2="249" length="6.28013" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="89" c1="42" c2="64" n1="246" n2="248" length="3.74033" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="90" c1="65" c2="17" n1="251" n2="89" length="4.55867" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="91" c1="65" c2="32" n1="293" n2="172" length="3.41205" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="92" c1="66" c2="52" n1="304" n2="213" length="3.38072" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="93" c1="46" c2="67" n1="257" n2="258" length="3.2283" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="94" c1="67" c2="45" n1="193" n2="191" length="3.69673" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="95" c1="6" c2="67" n1="193" n2="257" length="7.91453" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="96" c1="67" c2="60" n1="237" n2="258" length="3.76317" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="97" c1="2" c2="48" n1="115" n2="259" length="3.79298" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="98" c1="2" c2="68" n1="259" n2="260" length="6.40647" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="99" c1="60" c2="68" n1="237" n2="113" length="3.80304" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="100" c1="68" c2="48" n1="259" n2="113" length="3.72302" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="101" c1="67" c2="68" n1="191" n2="237" length="3.67205" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="102" c1="68" c2="45" n1="191" n2="260" length="3.55505" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="103" c1="33" c2="69" n1="262" n2="263" length="6.40344" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="104" c1="2" c2="69" n1="151" n2="150" length="3.71292" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="105" c1="27" c2="69" n1="187" n2="149" length="5.80186" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="106" c1="45" c2="69" n1="149" n2="151" length="3.93816" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="107" c1="69" c2="44" n1="187" n2="263" length="3.16888" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="108" c1="44" c2="21" n1="106" n2="66" length="6.04201" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="109" c1="33" c2="44" n1="263" n2="265" length="6.21398" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="110" c1="44" c2="70" n1="66" n2="265" length="2.97884" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="111" c1="33" c2="70" n1="265" n2="188" length="6.35623" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="112" c1="70" c2="21" n1="66" n2="65" length="6.10505" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="113" c1="70" c2="43" n1="240" n2="112" length="3.63992" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="114" c1="70" c2="23" n1="112" n2="201" length="3.36391" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="115" c1="70" c2="61" n1="65" n2="240" length="3.65465" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="116" c1="61" c2="71" n1="266" n2="267" length="6.40908" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="117" c1="5" c2="71" n1="143" n2="72" length="4.27362" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="118" c1="21" c2="71" n1="72" n2="266" length="6.62888" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="119" c1="5" c2="62" n1="181" n2="270" length="3.7905" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="120" c1="62" c2="72" n1="269" n2="270" length="6.34354" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="121" c1="5" c2="72" n1="270" n2="143" length="4.0656" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="122" c1="72" c2="71" n1="267" n2="143" length="6.67321" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="123" c1="72" c2="43" n1="369" n2="241" length="3.1788" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="124" c1="72" c2="61" n1="241" n2="267" length="3.31791" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="125" c1="42" c2="73" n1="272" n2="273" length="6.7515" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="126" c1="5" c2="73" n1="245" n2="181" length="7.57782" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="127" c1="62" c2="73" n1="181" n2="183" length="6.39138" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="128" c1="73" c2="63" n1="245" n2="273" length="3.36832" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="129" c1="42" c2="63" n1="273" n2="276" length="6.47674" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="130" c1="63" c2="74" n1="275" n2="276" length="6.31499" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="131" c1="42" c2="74" n1="276" n2="246" length="3.265" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="132" c1="74" c2="11" n1="71" n2="60" length="5.41019" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="133" c1="74" c2="64" n1="60" n2="246" length="3.74575" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="134" c1="18" c2="74" n1="71" n2="275" length="5.37227" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="135" c1="64" c2="11" n1="60" n2="278" length="4.71937" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="136" c1="41" c2="64" n1="287" n2="279" length="3.05906" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="137" c1="64" c2="75" n1="278" n2="279" length="6.16962" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="138" c1="41" c2="75" n1="279" n2="249" length="3.25136" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="139" c1="1" c2="75" n1="175" n2="131" length="3.87386" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="140" c1="75" c2="11" n1="278" n2="131" length="9.69997" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="141" c1="40" c2="75" n1="249" n2="175" length="3.17341" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="142" c1="1" c2="16" n1="87" n2="281" length="6.22814" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="143" c1="1" c2="76" n1="281" n2="176" length="7.87079" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="144" c1="76" c2="16" n1="281" n2="61" length="12.1003" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="145" c1="76" c2="17" n1="61" n2="174" length="10.7008" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="146" c1="40" c2="77" n1="283" n2="284" length="6.1764" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="147" c1="77" c2="17" n1="174" n2="251" length="4.46863" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="148" c1="76" c2="77" n1="174" n2="176" length="4.01505" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="149" c1="1" c2="77" n1="176" n2="283" length="3.70213" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="150" c1="77" c2="65" n1="251" n2="284" length="6.43817" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="151" c1="41" c2="78" n1="286" n2="287" length="6.19804" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="152" c1="42" c2="78" n1="248" n2="12" length="3.65634" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="153" c1="78" c2="64" n1="248" n2="287" length="6.38414" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="154" c1="40" c2="65" n1="284" n2="290" length="3.14939" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="155" c1="65" c2="79" n1="289" n2="290" length="3.0952" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="156" c1="40" c2="79" n1="290" n2="252" length="6.41351" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="157" c1="79" c2="41" n1="179" n2="252" length="3.35312" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="158" c1="32" c2="39" n1="171" n2="173" length="3.32546" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="159" c1="39" c2="80" n1="291" n2="173" length="6.59721" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="160" c1="32" c2="80" n1="173" n2="172" length="3.49033" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="161" c1="79" c2="80" n1="289" n2="130" length="3.3555" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="162" c1="65" c2="80" n1="172" n2="289" length="6.5529" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="163" c1="32" c2="81" n1="293" n2="294" length="6.50048" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="164" c1="4" c2="81" n1="146" n2="147" length="7.20123" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="165" c1="81" c2="17" n1="89" n2="147" length="4.96915" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="166" c1="65" c2="81" n1="89" n2="293" length="3.46759" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="167" c1="38" c2="82" n1="294" n2="296" length="6.37491" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="168" c1="37" c2="82" n1="299" n2="169" length="7.12873" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="169" c1="4" c2="82" n1="169" n2="146" length="7.32133" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="170" c1="81" c2="82" n1="146" n2="294" length="3.30967" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="171" c1="37" c2="83" n1="298" n2="299" length="3.13776" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="172" c1="83" c2="51" n1="334" n2="168" length="3.34198" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="173" c1="83" c2="38" n1="168" n2="296" length="3.38287" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="174" c1="83" c2="82" n1="296" n2="299" length="3.36094" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="175" c1="66" c2="83" n1="164" n2="166" length="3.22085" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="176" c1="66" c2="84" n1="166" n2="300" length="6.40868" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="177" c1="20" c2="84" n1="303" n2="255" length="3.5067" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="178" c1="84" c2="37" n1="298" n2="255" length="6.97177" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="179" c1="84" c2="83" n1="166" n2="298" length="3.38421" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="180" c1="20" c2="85" n1="302" n2="303" length="3.06725" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="181" c1="85" c2="66" n1="21" n2="300" length="3.30365" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="182" c1="9" c2="85" n1="101" n2="302" length="9.77108" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="183" c1="85" c2="84" n1="300" n2="303" length="6.83743" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="184" c1="52" c2="86" n1="304" n2="305" length="6.24637" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="185" c1="9" c2="86" n1="160" n2="101" length="5.21936" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="186" c1="85" c2="86" n1="101" n2="21" length="3.50587" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="187" c1="66" c2="86" n1="21" n2="304" length="3.39913" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="188" c1="36" c2="87" n1="307" n2="308" length="6.32607" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="189" c1="86" c2="87" n1="160" n2="305" length="6.48229" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="190" c1="52" c2="87" n1="305" n2="307" length="6.31924" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="191" c1="87" c2="54" n1="160" n2="311" length="10.7098" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="192" c1="54" c2="88" n1="310" n2="311" length="3.19615" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="193" c1="36" c2="88" n1="308" n2="219" length="3.55157" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="194" c1="3" c2="88" n1="49" n2="134" length="7.0026" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="195" c1="88" c2="53" n1="49" n2="219" length="6.62288" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="196" c1="87" c2="88" n1="311" n2="308" length="3.58715" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="197" c1="29" c2="88" n1="134" n2="310" length="5.80739" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="198" c1="53" c2="89" n1="312" n2="313" length="3.60689" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="199" c1="25" c2="89" n1="315" n2="217" length="3.32674" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="200" c1="55" c2="89" n1="222" n2="39" length="3.3853" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="201" c1="8" c2="89" n1="39" n2="312" length="5.7305" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="202" c1="25" c2="35" n1="339" n2="314" length="6.20423" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="203" c1="25" c2="90" n1="314" n2="315" length="6.31225" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="204" c1="36" c2="90" n1="216" n2="157" length="3.37102" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="205" c1="90" c2="53" n1="216" n2="313" length="3.72869" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="206" c1="90" c2="89" n1="313" n2="315" length="6.56314" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="207" c1="34" c2="91" n1="317" n2="318" length="6.26317" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="208" c1="91" c2="25" n1="152" n2="217" length="3.41123" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="209" c1="91" c2="89" n1="217" n2="222" length="3.45062" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="210" c1="56" c2="91" n1="152" n2="226" length="3.27407" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="211" c1="22" c2="91" n1="226" n2="317" length="3.17827" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="212" c1="91" c2="55" n1="222" n2="318" length="3.41308" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="213" c1="55" c2="8" n1="39" n2="320" length="5.80388" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="214" c1="34" c2="55" n1="318" n2="321" length="6.67222" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="215" c1="55" c2="92" n1="320" n2="321" length="6.6995" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="216" c1="34" c2="92" n1="321" n2="223" length="3.48049" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="217" c1="92" c2="19" n1="98" n2="56" length="6.20532" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="218" c1="92" c2="8" n1="320" n2="98" length="5.47387" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="219" c1="92" c2="10" n1="56" n2="223" length="9.9006" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="220" c1="22" c2="34" n1="317" n2="323" length="6.17088" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="221" c1="58" c2="22" n1="225" n2="324" length="6.27712" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="222" c1="22" c2="93" n1="323" n2="324" length="6.31334" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="223" c1="58" c2="93" n1="324" n2="109" length="3.08314" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="224" c1="93" c2="26" n1="123" n2="109" length="7.71135" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="225" c1="93" c2="10" n1="153" n2="123" length="5.26512" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="226" c1="93" c2="34" n1="323" n2="153" length="6.26277" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="227" c1="60" c2="94" n1="38" n2="258" length="6.15011" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="228" c1="46" c2="94" n1="258" n2="238" length="7.34879" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="229" c1="26" c2="94" n1="238" n2="57" length="4.31036" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="230" c1="57" c2="94" n1="57" n2="38" length="4.28954" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="231" c1="57" c2="95" n1="38" n2="327" length="3.30889" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="232" c1="95" c2="60" n1="38" n2="36" length="4.29207" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="233" c1="95" c2="48" n1="36" n2="197" length="3.87506" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="234" c1="95" c2="47" n1="197" n2="235" length="3.19691" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="235" c1="30" c2="96" n1="328" n2="329" length="6.408" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="236" c1="13" c2="96" n1="357" n2="328" length="3.90651" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="237" c1="96" c2="51" n1="209" n2="329" length="3.23181" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="238" c1="35" c2="97" n1="331" n2="314" length="7.19932" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="239" c1="90" c2="97" n1="314" n2="157" length="7.28665" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="240" c1="7" c2="97" n1="161" n2="119" length="7.27315" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="241" c1="36" c2="97" n1="157" n2="161" length="3.62318" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="242" c1="7" c2="98" n1="119" n2="213" length="6.97504" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="243" c1="83" c2="98" n1="164" n2="68" length="3.25779" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="244" c1="66" c2="98" n1="213" n2="164" length="6.66376" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="245" c1="30" c2="51" n1="329" n2="335" length="6.20842" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="246" c1="51" c2="99" n1="334" n2="335" length="3.15465" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="247" c1="98" c2="99" n1="119" n2="68" length="7.00755" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="248" c1="97" c2="99" n1="210" n2="119" length="3.92228" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="249" c1="83" c2="99" n1="68" n2="334" length="3.30264" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="250" c1="56" c2="100" n1="336" n2="337" length="6.37527" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="251" c1="59" c2="100" n1="234" n2="198" length="3.29265" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="252" c1="58" c2="100" n1="198" n2="336" length="3.07626" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="253" c1="35" c2="101" n1="339" n2="340" length="6.30433" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="254" c1="56" c2="101" n1="337" n2="156" length="3.46559" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="255" c1="100" c2="101" n1="67" n2="337" length="7.11921" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="256" c1="25" c2="101" n1="156" n2="339" length="3.14663" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="257" c1="101" c2="13" n1="67" n2="340" length="8.18337" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="258" c1="47" c2="13" n1="16" n2="342" length="4.52736" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="259" c1="47" c2="102" n1="342" n2="343" length="6.11858" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="260" c1="102" c2="13" n1="342" n2="67" length="4.62813" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="261" c1="102" c2="100" n1="67" n2="234" length="6.52125" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="262" c1="23" c2="103" n1="364" n2="346" length="3.72964" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="263" c1="47" c2="103" n1="197" n2="16" length="8.30651" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="264" c1="103" c2="13" n1="345" n2="16" length="4.88981" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="265" c1="103" c2="48" n1="197" n2="346" length="7.64357" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="266" c1="49" c2="104" n1="348" n2="349" length="6.30925" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="267" c1="31" c2="105" n1="351" n2="352" length="6.62934" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="268" c1="105" c2="28" n1="142" n2="20" length="3.99086" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="269" c1="105" c2="13" n1="20" n2="352" length="4.62869" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="270" c1="28" c2="106" n1="178" n2="354" length="6.61319" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="271" c1="79" c2="106" n1="207" n2="179" length="3.31477" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="272" c1="106" c2="41" n1="286" n2="179" length="3.37031" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="273" c1="106" c2="78" n1="178" n2="286" length="6.69371" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="274" c1="106" c2="50" n1="207" n2="354" length="3.43256" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="275" c1="50" c2="107" n1="207" n2="82" length="6.4697" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="276" c1="107" c2="39" n1="291" n2="28" length="3.40982" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="277" c1="79" c2="107" n1="130" n2="207" length="6.56132" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="278" c1="107" c2="80" n1="130" n2="291" length="3.34391" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="279" c1="39" c2="96" n1="209" n2="358" length="3.47623" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="280" c1="96" c2="108" n1="357" n2="358" length="6.33928" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="281" c1="39" c2="108" n1="358" n2="28" length="3.4232" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="282" c1="50" c2="108" n1="82" n2="138" length="3.73606" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="283" c1="107" c2="108" n1="28" n2="82" length="3.75483" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="284" c1="13" c2="108" n1="138" n2="357" length="7.83277" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="285" c1="30" c2="99" n1="335" n2="360" length="3.18717" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="286" c1="13" c2="30" n1="328" n2="361" length="3.81465" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="287" c1="30" c2="109" n1="360" n2="361" length="6.25649" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="288" c1="13" c2="109" n1="361" n2="139" length="7.84403" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="289" c1="97" c2="109" n1="331" n2="210" length="3.81231" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="290" c1="109" c2="99" n1="360" n2="210" length="6.39634" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="291" c1="35" c2="109" n1="139" n2="331" length="3.42239" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="292" c1="23" c2="104" n1="112" n2="363" length="6.92737" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="293" c1="23" c2="110" n1="363" n2="364" length="6.45035" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="294" c1="110" c2="49" n1="348" n2="32" length="3.64719" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="295" c1="110" c2="13" n1="32" n2="345" length="4.54936" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="296" c1="110" c2="104" n1="363" n2="348" length="3.53572" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="297" c1="110" c2="103" n1="345" n2="364" length="7.48408" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="298" c1="23" c2="48" n1="346" n2="366" length="3.23598" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="299" c1="48" c2="111" n1="115" n2="366" length="3.3066" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="300" c1="23" c2="111" n1="366" n2="201" length="6.66799" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="301" c1="69" c2="111" n1="262" n2="150" length="3.31009" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="302" c1="70" c2="111" n1="201" n2="188" length="3.12471" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="303" c1="33" c2="111" n1="188" n2="262" length="6.42268" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="304" c1="2" c2="111" n1="150" n2="115" length="3.76867" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="305" c1="102" c2="59" n1="234" n2="367" length="3.1973" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="306" c1="59" c2="112" n1="229" n2="367" length="6.27835" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="307" c1="47" c2="112" n1="343" n2="235" length="6.30394" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="308" c1="57" c2="112" n1="327" n2="229" length="3.32874" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="309" c1="95" c2="112" n1="235" n2="327" length="6.42863" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="310" c1="102" c2="112" n1="367" n2="343" length="3.19689" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="311" c1="104" c2="43" n1="112" n2="370" length="9.12482" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="312" c1="43" c2="113" n1="369" n2="370" length="6.12132" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="313" c1="31" c2="113" n1="205" n2="184" length="3.0878" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="314" c1="49" c2="113" n1="349" n2="205" length="3.0304" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="315" c1="14" c2="113" n1="184" n2="243" length="6.28432" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="316" c1="62" c2="113" n1="243" n2="269" length="3.13684" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="317" c1="104" c2="113" n1="370" n2="349" length="3.08789" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="318" c1="72" c2="113" n1="269" n2="369" length="3.12214" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="319" c1="14" c2="73" n1="183" n2="372" length="3.131" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="320" c1="14" c2="114" n1="372" n2="373" length="6.20781" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="321" c1="114" c2="28" n1="178" n2="142" length="3.84334" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="322" c1="114" c2="78" n1="12" n2="178" length="3.66582" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="323" c1="114" c2="42" n1="272" n2="12" length="3.33338" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="324" c1="114" c2="73" n1="372" n2="272" length="3.19186" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="325" c1="114" c2="105" n1="142" n2="351" length="3.32775" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-    <wall index="326" c1="114" c2="31" n1="351" n2="373" length="3.15002" viz_flux="0" wall_type="normal">
-      <transporters1>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters1>
-      <transporters2>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-        <val v="0"/>
-      </transporters2>
-    </wall>
-  </walls>
-  <nodesets n="0"/>
-  <settings>
-    <setting name="show_cell_centers" val="false"/>
-    <setting name="show_nodes" val="false"/>
-    <setting name="show_node_numbers" val="false"/>
-    <setting name="show_cell_numbers" val="false"/>
-    <setting name="show_border_cells" val="false"/>
-    <setting name="show_cell_axes" val="false"/>
-    <setting name="show_cell_strain" val="false"/>
-    <setting name="show_fluxes" val="false"/>
-    <setting name="show_walls" val="false"/>
-    <setting name="save_movie_frames" val="false"/>
-    <setting name="show_only_leaf_boundary" val="false"/>
-    <setting name="cell_growth" val="true"/>
-    <setting name="hide_cells" val="false"/>
-    <viewport m11="4.41942" m12="0" m21="0" m22="4.41942" dx="0" dy="0"/>
-  </settings>
-</leaf>
Index: data/leaves/Cambium_Rami.xml
===================================================================
diff --git a/data/leaves/Cambium_Rami.xml b/data/leaves/Cambium_Rami.xml
deleted file mode 100644
--- a/data/leaves/Cambium_Rami.xml	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
+++ /dev/null	(revision c9763b319a64e0a25643e4681bffbcbc9a263036)
@@ -1,2417 +0,0 @@
-<?xml version="1.0" ?>
-<leaf date="Fri May 17 00:28:16 2024" name="/home/ritchie/Desktop/blob_escape.xml" simtime="4720">
-   
-   
-   <parameter>
-      
-      
-      <par val="white" name="arrowcolor"/>
-      
-    
-      
-      <par val="10" name="arrowsize"/>
-      
-      
-      <par val="red" name="textcolor"/>
-      
-      
-      <par val="1" name="cellnumsize"/>
-      
-      
-      <par val="1" name="nodenumsize"/>
-      
-      
-      <par val="1" name="node_mag"/>
-      
-      
-      <par val="1" name="outlinewidth"/>
-      
-      
-      <par val="forestgreen" name="cell_outline_color"/>
-      
-      
-      <par val="10" name="resize_stride"/>
-      
-      
-      <par val="0" name="export_interval"/>
-      
-      
-      <par val="cell." name="export_fn_prefix"/>
-      
-      
-      <par val="100" name="storage_stride"/>
-      
-      
-      <par val="500" name="xml_storage_stride"/>
-      
-      
-      <par val="lateral_root" name="datadir"/>
-      
-      
-      <par val="1" name="T"/>
-      
-      
-      <par val="100" name="lambda_length"/>
-      
-      
-      <par val="4" name="yielding_threshold"/>
-      
-      
-      <par val="0" name="lambda_celllength"/>
-      
-      
-      <par val="60" name="target_length"/>
-      
-      
-      <par val="20" name="cell_expansion_rate"/>
-      
-      
-      <par val="10" name="cell_div_expansion_rate"/>
-      
-      
-      <par val="true" name="auxin_dependent_growth"/>
-      
-      
-      <par val="0.0001" name="ode_accuracy"/>
-      
-      
-      <par val="0.4" name="mc_stepsize"/>
-      
-      
-      <par val="0.2" name="mc_cell_stepsize"/>
-      
-      
-      <par val="1000" name="energy_threshold"/>
-      
-      
-      <par val="0" name="bend_lambda"/>
-      
-      
-      <par val="0" name="alignment_lambda"/>
-      
-      
-      <par val="2" name="rel_cell_div_threshold"/>
-      
-      
-      <par val="2" name="rel_perimeter_stiffness"/>
-      
-      
-      <par val="0.05" name="collapse_node_threshold"/>
-      
-      
-      <par val="0.2" name="morphogen_div_threshold"/>
-      
-      
-      <par val="0.01" name="morphogen_expansion_threshold"/>
-      
-      
-      <par val="true" name="copy_wall"/>
-      
-      
-      <par val="0" name="source"/>
-      
-      
-      <par name="D">
-         
-              
-         <valarray>
-            
-            
-        
-            
-            <val v="1e-06"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-                 
-         </valarray>
-         
-         
-    
-      
-      </par>
-      
-      
-      <par name="initval">
-         
-              
-         <valarray>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="1"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-                 
-         </valarray>
-         
-         
-    
-      
-      </par>
-      
-      
-      <par val="1" name="k1"/>
-      
-      
-      <par val="0.3" name="k2"/>
-      
-      
-      <par val="1" name="r"/>
-      
-      
-      <par val="1" name="kr"/>
-      
-      
-      <par val="1" name="km"/>
-      
-      
-      <par val="1" name="Pi_tot"/>
-      
-      
-      <par val="0.36" name="transport"/>
-      
-      
-      <par val="1" name="ka"/>
-      
-      
-      <par val="0" name="pin_prod"/>
-      
-      
-      <par val="0" name="pin_prod_in_epidermis"/>
-      
-      
-      <par val="0" name="pin_breakdown"/>
-      
-      
-      <par val="0.001" name="pin_breakdown_internal"/>
-      
-      
-      <par val="0.001" name="aux1prod"/>
-      
-      
-      <par val="0" name="aux1prodmeso"/>
-      
-      
-      <par val="0.001" name="aux1decay"/>
-      
-      
-      <par val="0.1" name="aux1decaymeso"/>
-      
-      
-      <par val="0.036" name="aux1transport"/>
-      
-      
-      <par val="0" name="aux_cons"/>
-      
-      
-      <par val="0.0001" name="aux_breakdown"/>
-      
-      
-      <par val="1" name="kaux1"/>
-      
-      
-      <par val="1" name="kap"/>
-      
-      
-      <par val="0.0001" name="leaf_tip_source"/>
-      
-      
-      <par val="0.0001" name="sam_efflux"/>
-      
-      
-      <par val="10" name="sam_auxin"/>
-      
-      
-      <par val="0" name="sam_auxin_breakdown"/>
-      
-      
-      <par val="0.002" name="van3prod"/>
-      
-      
-      <par val="0.1" name="van3autokat"/>
-      
-      
-      <par val="10" name="van3sat"/>
-      
-      
-      <par val="0.3" name="k2van3"/>
-      
-      
-      <par val="0.1" name="dt"/>
-      
-      
-      <par val="10" name="rd_dt"/>
-      
-      
-      <par val="0.174533" name="potential_slide_angle"/>
-      
-      
-      <par val="50" name="elastic_modulus"/>
-      
-      
-      <par val="true" name="movie"/>
-      
-      
-      <par val="100000" name="nit"/>
-      
-      
-      <par val="65535" name="compatibility_level"/>
-      
-      
-      <par val="1e+06" name="maxt"/>
-      
-      
-      <par val="-1" name="rseed"/>
-      
-      
-      <par val="16" name="constituous_expansion_limit"/>
-      
-      
-      <par val="1" name="vessel_inh_level"/>
-      
-      
-      <par val="0.25" name="vessel_expansion_rate"/>
-      
-      
-      <par val="0" name="d"/>
-      
-      
-      <par val="0" name="e"/>
-      
-      
-      <par val="0" name="f"/>
-      
-      
-      <par val="0" name="c"/>
-      
-      
-      <par val="0" name="mu"/>
-      
-      
-      <par val="0" name="nu"/>
-      
-      
-      <par val="0" name="rho0"/>
-      
-      
-      <par val="0" name="rho1"/>
-      
-      
-      <par val="0" name="c0"/>
-      
-      
-      <par val="0" name="gamma"/>
-      
-      
-      <par val="0" name="eps"/>
-      
-      
-      <par val="0" name="betaN"/>
-      
-      
-      <par val="0" name="gammaN"/>
-      
-      
-      <par val="0" name="betaD"/>
-      
-      
-      <par val="0" name="gammaD"/>
-      
-      
-      <par val="0" name="betaR"/>
-      
-      
-      <par val="0" name="gammaR"/>
-      
-      
-      <par val="0" name="tau"/>
-      
-      
-      <par val="0" name="kt"/>
-      
-      
-      <par val="0" name="kc"/>
-      
-      
-      <par val="0" name="krs"/>
-      
-      
-      <par name="k">
-         
-              
-         <valarray>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-            
-        
-            
-            <val v="0"/>
-            
-                 
-         </valarray>
-         
-         
-    
-      
-      </par>
-      
-      
-      <par val="0" name="i1"/>
-      
-      
-      <par val="0" name="i2"/>
-      
-      
-      <par val="false" name="b4"/>
-      
-      
-      <par val="." name="dir1"/>
-      
-      
-      <par val="." name="dir2"/>
-      
-      
-  
-   
-   </parameter>
-   
-   
-  
-   
-   <nodes n="387">
-      <node nr="0" x="218.3835" y="168.569" sam="false" boundary="false" fixed="false"/>
-      <node nr="1" x="222.76399999999998" y="171.00149999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="2" x="226.83149999999998" y="173.92799999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="3" x="230.3405" y="176.42499999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="4" x="234.49949999999998" y="174.66349999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="5" x="237.24399999999997" y="170.911" sam="false" boundary="false" fixed="false"/>
-      <node nr="6" x="238.59749999999994" y="165.949" sam="false" boundary="false" fixed="false"/>
-      <node nr="7" x="240.52449999999993" y="160.75500000000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="8" x="242.53499999999997" y="155.59350000000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="9" x="244.20349999999996" y="150.31350000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="10" x="240.43149999999994" y="146.86850000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="11" x="236.05549999999994" y="144.23150000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="12" x="231.25049999999993" y="142.49600000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="13" x="226.19349999999994" y="141.77400000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="14" x="221.10449999999994" y="142.18500000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="15" x="216.58449999999996" y="143.79400000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="16" x="213.52399999999997" y="147.47850000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="17" x="212.86549999999997" y="153.51850000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="18" x="212.64649999999997" y="159.59050000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="19" x="212.6735" y="165.66750000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="20" x="207.12" y="168.4735" sam="false" boundary="false" fixed="false"/>
-      <node nr="21" x="203.34999999999997" y="170.932" sam="false" boundary="false" fixed="false"/>
-      <node nr="22" x="199.74099999999996" y="173.61999999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="23" x="195.83649999999994" y="175.86849999999993" sam="false" boundary="false" fixed="false"/>
-      <node nr="24" x="191.58749999999992" y="174.24749999999992" sam="false" boundary="false" fixed="false"/>
-      <node nr="25" x="187.57699999999988" y="172.0999999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="26" x="186.2499999999999" y="167.2414999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="27" x="184.70599999999985" y="162.4454999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="28" x="183.29199999999986" y="157.61099999999988" sam="false" boundary="false" fixed="false"/>
-      <node nr="29" x="182.36299999999986" y="152.66349999999986" sam="false" boundary="false" fixed="false"/>
-      <node nr="30" x="182.60849999999982" y="148.43749999999986" sam="false" boundary="true" fixed="false"/>
-      <node nr="31" x="185.90949999999984" y="145.50699999999986" sam="false" boundary="true" fixed="false"/>
-      <node nr="32" x="189.72999999999985" y="143.30299999999988" sam="false" boundary="true" fixed="false"/>
-      <node nr="33" x="193.92449999999982" y="141.92849999999984" sam="false" boundary="true" fixed="false"/>
-      <node nr="34" x="198.29949999999985" y="141.34799999999984" sam="false" boundary="true" fixed="false"/>
-      <node nr="35" x="202.70999999999984" y="141.54199999999983" sam="false" boundary="true" fixed="false"/>
-      <node nr="36" x="207.16499999999985" y="142.60749999999985" sam="false" boundary="true" fixed="false"/>
-      <node nr="37" x="200.8535" y="198.7075" sam="false" boundary="false" fixed="false"/>
-      <node nr="38" x="205.123" y="197.98350000000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="39" x="209.4355" y="197.60150000000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="40" x="213.76549999999997" y="197.616" sam="false" boundary="false" fixed="false"/>
-      <node nr="41" x="218.069" y="198.0815" sam="false" boundary="false" fixed="false"/>
-      <node nr="42" x="222.29" y="199.0445" sam="false" boundary="false" fixed="false"/>
-      <node nr="43" x="224.53449999999998" y="195.2905" sam="false" boundary="false" fixed="false"/>
-      <node nr="44" x="225.948" y="190.95200000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="45" x="227.35500000000002" y="186.42650000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="46" x="228.57900000000004" y="181.8495000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="47" x="198.15100000000004" y="180.85650000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="48" x="199.35600000000002" y="186.90350000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="49" x="200.346" y="192.98800000000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="50" x="245.4135" y="274.2465" sam="false" boundary="false" fixed="false"/>
-      <node nr="51" x="248.21649999999997" y="277.5835000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="52" x="251.09099999999998" y="280.8585" sam="false" boundary="false" fixed="false"/>
-      <node nr="53" x="254.187" y="283.9235" sam="false" boundary="false" fixed="false"/>
-      <node nr="54" x="258.2435000000001" y="285.80400000000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="55" x="262.4240000000001" y="284.1555000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="56" x="266.45950000000016" y="282.17450000000014" sam="false" boundary="false" fixed="false"/>
-      <node nr="57" x="270.28800000000007" y="279.82000000000016" sam="false" boundary="false" fixed="false"/>
-      <node nr="58" x="273.82800000000003" y="277.0520000000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="59" x="274.9195" y="272.70850000000024" sam="false" boundary="false" fixed="false"/>
-      <node nr="60" x="274.93949999999995" y="268.1360000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="61" x="274.5279999999999" y="263.5835000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="62" x="273.46549999999974" y="259.13950000000057" sam="false" boundary="false" fixed="false"/>
-      <node nr="63" x="269.3064999999998" y="257.41400000000067" sam="false" boundary="false" fixed="false"/>
-      <node nr="64" x="265.2604999999999" y="256.02400000000074" sam="false" boundary="false" fixed="false"/>
-      <node nr="65" x="261.24949999999995" y="254.53700000000075" sam="false" boundary="false" fixed="false"/>
-      <node nr="66" x="257.31750000000005" y="252.85200000000071" sam="false" boundary="false" fixed="false"/>
-      <node nr="67" x="253.52550000000002" y="250.8755000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="68" x="251.30299999999994" y="254.53550000000072" sam="false" boundary="false" fixed="false"/>
-      <node nr="69" x="249.66549999999998" y="258.4405000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="70" x="247.39649999999997" y="262.3110000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="71" x="244.7745" y="265.9550000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="72" x="242.2855" y="269.4355000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="73" x="252.4685" y="228.3475" sam="false" boundary="false" fixed="false"/>
-      <node nr="74" x="250.169" y="222.59249999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="75" x="247.3205" y="217.09199999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="76" x="243.6935" y="212.07499999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="77" x="244.20000000000002" y="207.76499999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="78" x="249.01050000000004" y="204.48649999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="79" x="252.74950000000004" y="201.33949999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="80" x="256.4295" y="198.12449999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="81" x="260.714" y="196.565" sam="false" boundary="false" fixed="false"/>
-      <node nr="82" x="265.882" y="198.5145" sam="false" boundary="false" fixed="false"/>
-      <node nr="83" x="270.80400000000003" y="201.02249999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="84" x="275.432" y="204.03549999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="85" x="275.80050000000006" y="210.14399999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="86" x="275.783" y="216.26049999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="87" x="274.79200000000003" y="222.28799999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="88" x="269.9805" y="225.32299999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="89" x="265.81399999999996" y="226.39049999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="90" x="261.62249999999995" y="227.35349999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="91" x="257.39399999999995" y="228.13999999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="92" x="222.0025" y="280.676" sam="false" boundary="false" fixed="false"/>
-      <node nr="93" x="216.105" y="281.53849999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="94" x="210.15125" y="281.53450499999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="95" x="204.31655" y="280.78064499999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="96" x="200.120715" y="282.5328449999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="97" x="198.7925" y="286.89397999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="98" x="197.087" y="291.95998" sam="false" boundary="false" fixed="false"/>
-      <node nr="99" x="195.631" y="297.10497999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="100" x="194.198" y="302.2554799999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="101" x="198.44100000000003" y="306.0534799999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="102" x="203.20800000000006" y="309.1719799999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="103" x="208.33300000000006" y="311.6629799999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="104" x="213.17450000000002" y="312.2534799999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="105" x="217.31300000000002" y="309.88147999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="106" x="221.16100000000003" y="307.27497999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="107" x="224.68650000000002" y="304.25347999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="108" x="225.525" y="298.28948" sam="false" boundary="false" fixed="false"/>
-      <node nr="109" x="224.84050000000002" y="294.08648000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="110" x="224.18750000000003" y="289.87948000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="111" x="223.60500000000002" y="285.66148000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="112" x="253.64949999999996" y="246.59149999999988" sam="false" boundary="false" fixed="false"/>
-      <node nr="113" x="253.99849999999984" y="242.24499999999972" sam="false" boundary="false" fixed="false"/>
-      <node nr="114" x="254.0409999999998" y="237.88849999999962" sam="false" boundary="false" fixed="false"/>
-      <node nr="115" x="253.6504999999999" y="233.62949999999978" sam="false" boundary="false" fixed="false"/>
-      <node nr="116" x="276.79650000000004" y="226.06400000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="117" x="280.1655000000002" y="228.70850000000016" sam="false" boundary="false" fixed="false"/>
-      <node nr="118" x="281.4695" y="232.90200000000013" sam="false" boundary="false" fixed="false"/>
-      <node nr="119" x="282.10699999999997" y="237.26400000000012" sam="false" boundary="false" fixed="false"/>
-      <node nr="120" x="282.31399999999996" y="241.66900000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="121" x="282.2034999999999" y="246.0775" sam="false" boundary="false" fixed="false"/>
-      <node nr="122" x="281.88199999999995" y="250.47849999999983" sam="false" boundary="false" fixed="false"/>
-      <node nr="123" x="279.2355000000002" y="253.79100499999979" sam="false" boundary="false" fixed="false"/>
-      <node nr="124" x="170.666" y="230.407" sam="false" boundary="false" fixed="false"/>
-      <node nr="125" x="170.1045" y="236.0035" sam="false" boundary="false" fixed="false"/>
-      <node nr="126" x="169.8925" y="241.62199999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="127" x="170.40500000000003" y="247.2175" sam="false" boundary="false" fixed="false"/>
-      <node nr="128" x="167.57300000000004" y="250.868" sam="false" boundary="false" fixed="false"/>
-      <node nr="129" x="163.27300000000002" y="251.54299999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="130" x="158.4325" y="252.60899999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="131" x="153.637" y="253.865" sam="false" boundary="false" fixed="false"/>
-      <node nr="132" x="148.814" y="255.014" sam="false" boundary="false" fixed="false"/>
-      <node nr="133" x="144.97799999999998" y="252.38500000000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="134" x="142.52249999999998" y="248.3135" sam="false" boundary="false" fixed="false"/>
-      <node nr="135" x="141.9185" y="242.458" sam="false" boundary="false" fixed="false"/>
-      <node nr="136" x="141.673" y="236.57899999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="137" x="142.15200000000002" y="230.71699999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="138" x="144.50200000000004" y="226.38649999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="139" x="148.2345" y="223.43699999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="140" x="152.803" y="222.779" sam="false" boundary="false" fixed="false"/>
-      <node nr="141" x="158.27299999999997" y="224.8105" sam="false" boundary="false" fixed="false"/>
-      <node nr="142" x="163.7025" y="226.9475" sam="false" boundary="false" fixed="false"/>
-      <node nr="143" x="172.0265" y="226.3525" sam="false" boundary="false" fixed="false"/>
-      <node nr="144" x="173.73100000000002" y="222.3425" sam="false" boundary="false" fixed="false"/>
-      <node nr="145" x="175.79600000000002" y="218.5065" sam="false" boundary="false" fixed="false"/>
-      <node nr="146" x="178.161" y="214.92549999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="147" x="181.027" y="211.33499999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="148" x="179.46799999999996" y="207.05199999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="149" x="176.49399999999997" y="203.43049999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="150" x="173.31599999999997" y="199.98399999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="151" x="170.22099999999998" y="196.811" sam="false" boundary="false" fixed="false"/>
-      <node nr="152" x="167.0065" y="193.763" sam="false" boundary="false" fixed="false"/>
-      <node nr="153" x="162.6205" y="194.61400000000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="154" x="158.17049999999998" y="196.58450000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="155" x="153.89449999999997" y="198.90550000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="156" x="149.96399999999997" y="201.76950000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="157" x="149.07849999999996" y="206.18950000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="158" x="148.96999999999997" y="210.90400000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="159" x="149.31499999999997" y="215.60250000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="160" x="180.83" y="268.309" sam="false" boundary="false" fixed="false"/>
-      <node nr="161" x="176.96300000000002" y="263.611" sam="false" boundary="false" fixed="false"/>
-      <node nr="162" x="173.98950000000002" y="258.294" sam="false" boundary="false" fixed="false"/>
-      <node nr="163" x="171.61800000000005" y="252.67949999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="164" x="148.53950000000006" y="259.5204999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="165" x="147.91950000000008" y="265.64499999999987" sam="false" boundary="false" fixed="false"/>
-      <node nr="166" x="148.0620000000001" y="271.79949999999985" sam="false" boundary="false" fixed="false"/>
-      <node nr="167" x="150.1905000000001" y="276.8579999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="168" x="154.92700000000008" y="279.64099999999985" sam="false" boundary="false" fixed="false"/>
-      <node nr="169" x="159.92000000000007" y="281.92899999999986" sam="false" boundary="false" fixed="false"/>
-      <node nr="170" x="165.20750000000007" y="283.3969999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="171" x="169.49350000000007" y="280.0579999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="172" x="173.47000000000006" y="276.34699999999987" sam="false" boundary="false" fixed="false"/>
-      <node nr="173" x="177.64650000000006" y="272.86949999999985" sam="false" boundary="false" fixed="false"/>
-      <node nr="174" x="184.46099999999998" y="271.6435" sam="false" boundary="false" fixed="false"/>
-      <node nr="175" x="188.244" y="274.4235000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="176" x="192.212" y="276.91550000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="177" x="196.69199999999998" y="279.05250000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="178" x="189.78099999999986" y="303.78650000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="179" x="184.52499999999984" y="304.071" sam="false" boundary="false" fixed="false"/>
-      <node nr="180" x="179.37349999999984" y="302.02450000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="181" x="174.39999999999984" y="299.5820000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="182" x="169.78949999999983" y="296.5135000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="183" x="166.0604749999998" y="291.81369" sam="false" boundary="false" fixed="false"/>
-      <node nr="184" x="256.187" y="289.68100000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="185" x="255.618" y="294.0760000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="186" x="252.2765" y="297.2355000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="187" x="247.2765" y="300.5735000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="188" x="242.026" y="303.50250000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="189" x="237.709" y="305.68000000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="190" x="233.33212500000005" y="305.07749000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="191" x="229.41944000000007" y="303.4087900000002" sam="false" boundary="false" fixed="false"/>
-      <node nr="192" x="226.13250000000005" y="279.3800550000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="193" x="230.32200000000003" y="277.7285550000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="194" x="234.19950000000003" y="275.46755500000035" sam="false" boundary="false" fixed="false"/>
-      <node nr="195" x="238.26500000000001" y="272.5800550000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="196" x="183.58199999999994" y="175.32049999999992" sam="false" boundary="false" fixed="false"/>
-      <node nr="197" x="179.74849999999992" y="177.36549999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="198" x="176.05649999999991" y="179.65599999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="199" x="172.51299999999992" y="182.16949999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="200" x="169.1214999999999" y="184.88399999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="201" x="167.9079999999999" y="189.16949999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="202" x="184.27649999999994" y="208.46149999999992" sam="false" boundary="false" fixed="false"/>
-      <node nr="203" x="187.59899999999996" y="205.65999999999988" sam="false" boundary="false" fixed="false"/>
-      <node nr="204" x="191.49399999999994" y="203.25749999999988" sam="false" boundary="false" fixed="false"/>
-      <node nr="205" x="195.60049999999995" y="201.23149999999987" sam="false" boundary="false" fixed="false"/>
-      <node nr="206" x="239.4865" y="207.7885" sam="false" boundary="false" fixed="false"/>
-      <node nr="207" x="234.724" y="204.3285" sam="false" boundary="false" fixed="false"/>
-      <node nr="208" x="229.591" y="201.44899999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="209" x="239.5275000000001" y="175.935" sam="false" boundary="false" fixed="false"/>
-      <node nr="210" x="244.4300000000001" y="177.932" sam="false" boundary="false" fixed="false"/>
-      <node nr="211" x="249.1815000000001" y="180.25799999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="212" x="253.5990000000001" y="183.16349999999997" sam="false" boundary="false" fixed="false"/>
-      <node nr="213" x="257.13050000000015" y="186.04999999999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="214" x="257.7715000000002" y="190.392" sam="false" boundary="false" fixed="false"/>
-      <node nr="215" x="165.37150000000003" y="182.79100000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="216" x="162.36100000000002" y="179.55700000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="217" x="158.63500000000002" y="175.21300000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="218" x="155.13350000000003" y="170.68650000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="219" x="151.971" y="165.91850000000008" sam="false" boundary="true" fixed="false"/>
-      <node nr="220" x="154.09550000000002" y="161.28400000000008" sam="false" boundary="true" fixed="false"/>
-      <node nr="221" x="157.25300000000001" y="157.27950000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="222" x="161.2255" y="154.08000000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="223" x="166.10700000000003" y="151.43800000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="224" x="171.65400000000002" y="149.85750000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="225" x="177.40650000000002" y="149.37950000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="226" x="248.56050000000005" y="150.31600000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="227" x="254.32300000000006" y="150.71100000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="228" x="259.8210000000001" y="152.48850000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="229" x="264.7950000000001" y="155.43300000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="230" x="269.04750000000007" y="159.34800000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="231" x="271.6455000000001" y="162.78700000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="232" x="273.6665000000001" y="166.52650000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="233" x="270.6155000000001" y="170.82500000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="234" x="267.2170000000001" y="173.9975000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="235" x="263.9460000000001" y="177.3015000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="236" x="260.7505000000001" y="180.67950000000008" sam="false" boundary="false" fixed="false"/>
-      <node nr="237" x="259.00699999999995" y="297.118" sam="false" boundary="false" fixed="false"/>
-      <node nr="238" x="262.31399999999996" y="300.66599999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="239" x="265.80799999999994" y="305.1099999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="240" x="269.2885" y="309.56499999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="241" x="271.73" y="313.08799999999997" sam="false" boundary="true" fixed="false"/>
-      <node nr="242" x="269.9765000000001" y="317.1635" sam="false" boundary="true" fixed="false"/>
-      <node nr="243" x="265.7305000000001" y="322.5835" sam="false" boundary="true" fixed="false"/>
-      <node nr="244" x="261.16000000000014" y="325.9415" sam="false" boundary="true" fixed="false"/>
-      <node nr="245" x="255.99900000000017" y="328.29400000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="246" x="250.46350000000015" y="329.52500000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="247" x="244.79350000000014" y="329.52600000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="248" x="241.92600000000013" y="325.7315000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="249" x="241.04600000000013" y="320.99700000000007" sam="false" boundary="false" fixed="false"/>
-      <node nr="250" x="239.8500000000001" y="316.33150000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="251" x="238.3270000000001" y="311.76300000000003" sam="false" boundary="false" fixed="false"/>
-      <node nr="252" x="240.25850000000005" y="331.2610950000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="253" x="235.28100000000003" y="334.8025950000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="254" x="229.57800000000003" y="336.9855950000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="255" x="223.50300000000001" y="337.5940950000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="256" x="218.27" y="336.97109500000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="257" x="213.3535" y="335.01259500000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="258" x="211.28449999999998" y="329.7625950000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="259" x="211.65949999999998" y="323.66809500000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="260" x="211.88449999999997" y="317.56659500000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="261" x="186.4865" y="308.3690000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="262" x="185.1885" y="312.9770000000001" sam="false" boundary="false" fixed="false"/>
-      <node nr="263" x="183.579" y="317.48800000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="264" x="181.80550000000002" y="321.937" sam="false" boundary="false" fixed="false"/>
-      <node nr="265" x="180.00600000000003" y="326.37550000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="266" x="181.3545" y="330.78049999999996" sam="false" boundary="true" fixed="false"/>
-      <node nr="267" x="185.545" y="333.8005" sam="false" boundary="true" fixed="false"/>
-      <node nr="268" x="190.22899999999998" y="335.98" sam="false" boundary="true" fixed="false"/>
-      <node nr="269" x="195.24899999999997" y="337.19100000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="270" x="200.01149999999996" y="337.19399999999996" sam="false" boundary="true" fixed="false"/>
-      <node nr="271" x="204.66399999999996" y="336.337" sam="false" boundary="true" fixed="false"/>
-      <node nr="272" x="208.99599999999995" y="334.45449999999994" sam="false" boundary="true" fixed="false"/>
-      <node nr="273" x="175.78463500000007" y="328.7498449999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="274" x="171.42880000000008" y="328.5844899999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="275" x="167.16735000000008" y="327.6778799999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="276" x="163.1145550000001" y="326.09484499999974" sam="false" boundary="true" fixed="false"/>
-      <node nr="277" x="159.36684500000013" y="323.8987049999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="278" x="156.01911000000013" y="321.14621999999974" sam="false" boundary="true" fixed="false"/>
-      <node nr="279" x="153.15398500000015" y="317.9545149999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="280" x="150.75619000000017" y="314.26327999999984" sam="false" boundary="true" fixed="false"/>
-      <node nr="281" x="151.05413000000019" y="309.6418099999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="282" x="154.45390500000016" y="306.8124449999998" sam="false" boundary="false" fixed="false"/>
-      <node nr="283" x="157.65862000000016" y="303.7067049999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="284" x="160.80892000000017" y="300.60897499999993" sam="false" boundary="false" fixed="false"/>
-      <node nr="285" x="163.8429050000002" y="297.40169499999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="286" x="285.56899999999956" y="252.8670000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="287" x="289.7394999999996" y="253.77600000000044" sam="false" boundary="false" fixed="false"/>
-      <node nr="288" x="293.89749999999964" y="254.73500000000047" sam="false" boundary="false" fixed="false"/>
-      <node nr="289" x="298.0014999999997" y="255.90600000000046" sam="false" boundary="false" fixed="false"/>
-      <node nr="290" x="301.9834999999997" y="257.44050000000044" sam="false" boundary="true" fixed="false"/>
-      <node nr="291" x="305.2479999999995" y="260.1375000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="292" x="306.11649999999946" y="264.41500000000013" sam="false" boundary="true" fixed="false"/>
-      <node nr="293" x="306.26899999999944" y="268.6960000000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="294" x="305.35349999999937" y="273.15900000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="295" x="303.5789999999994" y="277.38650000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="296" x="301.0314999999993" y="281.19950000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="297" x="297.8119999999993" y="284.46600000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="298" x="294.0209999999993" y="287.0485" sam="false" boundary="true" fixed="false"/>
-      <node nr="299" x="289.8334999999993" y="285.1169999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="300" x="286.0544999999993" y="282.6339999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="301" x="282.20199999999926" y="280.26599999999985" sam="false" boundary="false" fixed="false"/>
-      <node nr="302" x="278.2774999999993" y="278.0189999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="303" x="284.24912" y="227.49508500000033" sam="false" boundary="false" fixed="false"/>
-      <node nr="304" x="288.506405" y="226.41735500000027" sam="false" boundary="false" fixed="false"/>
-      <node nr="305" x="292.96934" y="225.61547000000024" sam="false" boundary="false" fixed="false"/>
-      <node nr="306" x="297.4347900000001" y="224.82937000000027" sam="false" boundary="false" fixed="false"/>
-      <node nr="307" x="301.9042550000002" y="224.06210500000026" sam="false" boundary="false" fixed="false"/>
-      <node nr="308" x="306.21685500000024" y="224.7606350000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="309" x="308.6439150000003" y="228.53331000000026" sam="false" boundary="true" fixed="false"/>
-      <node nr="310" x="310.3278200000002" y="232.69242000000028" sam="false" boundary="true" fixed="false"/>
-      <node nr="311" x="311.1258400000002" y="237.19824500000033" sam="false" boundary="true" fixed="false"/>
-      <node nr="312" x="311.27725000000015" y="241.5324950000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="313" x="310.6743150000001" y="245.82856000000035" sam="false" boundary="true" fixed="false"/>
-      <node nr="314" x="309.4082400000001" y="249.97494000000037" sam="false" boundary="true" fixed="false"/>
-      <node nr="315" x="307.5734950000001" y="253.89679000000038" sam="false" boundary="true" fixed="false"/>
-      <node nr="316" x="139.2455" y="226.524" sam="false" boundary="false" fixed="false"/>
-      <node nr="317" x="135.0465" y="225.60999999999999" sam="false" boundary="false" fixed="false"/>
-      <node nr="318" x="130.85000000000002" y="224.682" sam="false" boundary="false" fixed="false"/>
-      <node nr="319" x="126.70700000000001" y="223.5445" sam="false" boundary="false" fixed="false"/>
-      <node nr="320" x="122.69600000000001" y="222.011" sam="false" boundary="false" fixed="false"/>
-      <node nr="321" x="118.91350000000001" y="219.8745" sam="false" boundary="true" fixed="false"/>
-      <node nr="322" x="118.10400000000003" y="215.42550000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="323" x="117.96700000000003" y="209.63350000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="324" x="119.20950000000003" y="204.73800000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="325" x="121.50350000000003" y="200.23650000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="326" x="124.66800000000003" y="196.29750000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="327" x="128.55200000000005" y="193.06450000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="328" x="132.946" y="193.16600000000005" sam="false" boundary="false" fixed="false"/>
-      <node nr="329" x="137.4265" y="196.28700000000006" sam="false" boundary="false" fixed="false"/>
-      <node nr="330" x="142.1025" y="199.11250000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="331" x="116.81100000000004" y="223.95899999999995" sam="false" boundary="true" fixed="false"/>
-      <node nr="332" x="114.59400000000002" y="227.91099999999994" sam="false" boundary="true" fixed="false"/>
-      <node nr="333" x="112.82500000000002" y="233.42199999999994" sam="false" boundary="true" fixed="false"/>
-      <node nr="334" x="112.29700000000003" y="239.18749999999994" sam="false" boundary="true" fixed="false"/>
-      <node nr="335" x="113.01500000000003" y="244.93099999999995" sam="false" boundary="true" fixed="false"/>
-      <node nr="336" x="114.99850000000002" y="250.36699999999996" sam="false" boundary="true" fixed="false"/>
-      <node nr="337" x="117.4865" y="254.22199999999998" sam="false" boundary="true" fixed="false"/>
-      <node nr="338" x="123.2945" y="254.53649999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="339" x="129.4355" y="253.52949999999996" sam="false" boundary="false" fixed="false"/>
-      <node nr="340" x="135.516" y="252.20149999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="341" x="146.55399000000006" y="310.27000000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="342" x="141.90599000000006" y="308.27600000000007" sam="false" boundary="true" fixed="false"/>
-      <node nr="343" x="137.70749000000004" y="305.47150000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="344" x="134.29399000000004" y="301.74800000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="345" x="131.76449000000002" y="297.37500000000006" sam="false" boundary="true" fixed="false"/>
-      <node nr="346" x="130.16649" y="292.58000000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="347" x="129.47699" y="288.332" sam="false" boundary="true" fixed="false"/>
-      <node nr="348" x="132.73199000000002" y="284.7175" sam="false" boundary="false" fixed="false"/>
-      <node nr="349" x="136.83399" y="282.746" sam="false" boundary="false" fixed="false"/>
-      <node nr="350" x="140.82448999999997" y="280.55499999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="351" x="144.77498999999997" y="278.29299999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="352" x="117.35800000000002" y="259.1610000000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="353" x="116.92750000000002" y="264.30900000000014" sam="false" boundary="true" fixed="false"/>
-      <node nr="354" x="117.47150000000003" y="269.4465000000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="355" x="119.01800000000003" y="274.3725000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="356" x="121.46800000000005" y="278.4565000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="357" x="124.59800000000004" y="282.0040000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="358" x="147.19150000000005" y="168.0065" sam="false" boundary="true" fixed="false"/>
-      <node nr="359" x="142.58250000000004" y="170.34" sam="false" boundary="true" fixed="false"/>
-      <node nr="360" x="138.49750000000003" y="173.502" sam="false" boundary="true" fixed="false"/>
-      <node nr="361" x="135.13100000000003" y="177.417" sam="false" boundary="true" fixed="false"/>
-      <node nr="362" x="133.12050000000002" y="181.3435" sam="false" boundary="true" fixed="false"/>
-      <node nr="363" x="131.69150000000005" y="185.85200000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="364" x="277.36150000000004" y="168.89549999999997" sam="false" boundary="true" fixed="false"/>
-      <node nr="365" x="281.497" y="170.42749999999995" sam="false" boundary="true" fixed="false"/>
-      <node nr="366" x="285.18950000000007" y="172.84499999999997" sam="false" boundary="true" fixed="false"/>
-      <node nr="367" x="288.33250000000004" y="175.94499999999996" sam="false" boundary="true" fixed="false"/>
-      <node nr="368" x="290.86400000000003" y="179.56249999999994" sam="false" boundary="true" fixed="false"/>
-      <node nr="369" x="292.71500000000003" y="183.57049999999995" sam="false" boundary="true" fixed="false"/>
-      <node nr="370" x="293.892" y="188.30499999999995" sam="false" boundary="true" fixed="false"/>
-      <node nr="371" x="294.13249999999994" y="193.17099999999996" sam="false" boundary="true" fixed="false"/>
-      <node nr="372" x="288.58699999999993" y="195.74849999999995" sam="false" boundary="false" fixed="false"/>
-      <node nr="373" x="283.1789999999999" y="198.60599999999994" sam="false" boundary="false" fixed="false"/>
-      <node nr="374" x="306.15000000000003" y="219.46100000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="375" x="306.51849999999996" y="213.27700000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="376" x="305.46549999999996" y="207.17350000000005" sam="false" boundary="true" fixed="false"/>
-      <node nr="377" x="303.22499999999997" y="202.18200000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="378" x="299.92849999999993" y="197.89600000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="379" x="279.6914999999999" y="201.14500000000004" sam="false" boundary="false" fixed="false"/>
-      <node nr="380" x="275.9275" y="311.4855000000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="381" x="280.03" y="309.79900000000004" sam="false" boundary="true" fixed="false"/>
-      <node nr="382" x="283.8124999999999" y="307.4825000000001" sam="false" boundary="true" fixed="false"/>
-      <node nr="383" x="287.1499999999999" y="304.5635000000002" sam="false" boundary="true" fixed="false"/>
-      <node nr="384" x="289.819" y="301.1865000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="385" x="291.65200000000004" y="297.2160000000003" sam="false" boundary="true" fixed="false"/>
-      <node nr="386" x="292.5575" y="292.93300000000033" sam="false" boundary="true" fixed="false"/>
-   </nodes>
-   <cells n="31" magnfication="1" nchem="0" offsetx="0" offsety="0" base_area="965.8072328712353">
-      <cell boundary="0" cell_type="0" target_area="785.8336618749973" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="0" source="false" pin_fixed="false" area="785.8336618749973" fixed="false" div_counter="0">
-         <node n="0"/>
-         <node n="19"/>
-         <node n="18"/>
-         <node n="17"/>
-         <node n="16"/>
-         <node n="15"/>
-         <node n="14"/>
-         <node n="13"/>
-         <node n="12"/>
-         <node n="11"/>
-         <node n="10"/>
-         <node n="9"/>
-         <node n="8"/>
-         <node n="7"/>
-         <node n="6"/>
-         <node n="5"/>
-         <node n="4"/>
-         <node n="3"/>
-         <node n="2"/>
-         <node n="1"/>
-         <wall w="0"/>
-         <wall w="1"/>
-         <wall w="2"/>
-         <wall w="3"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="818.246203125006" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="1" source="false" pin_fixed="false" area="818.246203125006" fixed="false" div_counter="0">
-         <node n="20"/>
-         <node n="21"/>
-         <node n="22"/>
-         <node n="23"/>
-         <node n="24"/>
-         <node n="25"/>
-         <node n="26"/>
-         <node n="27"/>
-         <node n="28"/>
-         <node n="29"/>
-         <node n="30"/>
-         <node n="31"/>
-         <node n="32"/>
-         <node n="33"/>
-         <node n="34"/>
-         <node n="35"/>
-         <node n="36"/>
-         <node n="16"/>
-         <node n="15"/>
-         <node n="16"/>
-         <node n="17"/>
-         <node n="18"/>
-         <node n="19"/>
-         <wall w="3"/>
-         <wall w="4"/>
-         <wall w="5"/>
-         <wall w="6"/>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="802.9907981250008" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="2" source="false" pin_fixed="false" area="802.9907981250008" fixed="false" div_counter="0">
-         <node n="37"/>
-         <node n="49"/>
-         <node n="48"/>
-         <node n="47"/>
-         <node n="23"/>
-         <node n="22"/>
-         <node n="21"/>
-         <node n="20"/>
-         <node n="19"/>
-         <node n="0"/>
-         <node n="1"/>
-         <node n="2"/>
-         <node n="3"/>
-         <node n="46"/>
-         <node n="45"/>
-         <node n="44"/>
-         <node n="43"/>
-         <node n="42"/>
-         <node n="41"/>
-         <node n="40"/>
-         <node n="39"/>
-         <node n="38"/>
-         <wall w="0"/>
-         <wall w="4"/>
-         <wall w="7"/>
-         <wall w="8"/>
-         <wall w="9"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="749.3733358749803" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="3" source="false" pin_fixed="false" area="749.3733358749803" fixed="false" div_counter="0">
-         <node n="50"/>
-         <node n="72"/>
-         <node n="71"/>
-         <node n="70"/>
-         <node n="69"/>
-         <node n="68"/>
-         <node n="67"/>
-         <node n="66"/>
-         <node n="65"/>
-         <node n="64"/>
-         <node n="63"/>
-         <node n="62"/>
-         <node n="61"/>
-         <node n="60"/>
-         <node n="59"/>
-         <node n="58"/>
-         <node n="57"/>
-         <node n="56"/>
-         <node n="55"/>
-         <node n="54"/>
-         <node n="53"/>
-         <node n="52"/>
-         <node n="51"/>
-         <wall w="10"/>
-         <wall w="11"/>
-         <wall w="12"/>
-         <wall w="13"/>
-         <wall w="14"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="745.17889425" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="4" source="false" pin_fixed="false" area="745.17889425" fixed="false" div_counter="0">
-         <node n="73"/>
-         <node n="74"/>
-         <node n="75"/>
-         <node n="76"/>
-         <node n="77"/>
-         <node n="78"/>
-         <node n="79"/>
-         <node n="80"/>
-         <node n="81"/>
-         <node n="82"/>
-         <node n="83"/>
-         <node n="84"/>
-         <node n="85"/>
-         <node n="86"/>
-         <node n="87"/>
-         <node n="88"/>
-         <node n="89"/>
-         <node n="90"/>
-         <node n="91"/>
-         <wall w="15"/>
-         <wall w="16"/>
-         <wall w="17"/>
-         <wall w="18"/>
-         <wall w="19"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="762.3499630723619" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="5" source="false" pin_fixed="false" area="762.3499630723619" fixed="false" div_counter="0">
-         <node n="92"/>
-         <node n="111"/>
-         <node n="110"/>
-         <node n="109"/>
-         <node n="108"/>
-         <node n="107"/>
-         <node n="106"/>
-         <node n="105"/>
-         <node n="104"/>
-         <node n="103"/>
-         <node n="102"/>
-         <node n="101"/>
-         <node n="100"/>
-         <node n="99"/>
-         <node n="98"/>
-         <node n="97"/>
-         <node n="96"/>
-         <node n="95"/>
-         <node n="94"/>
-         <node n="93"/>
-         <wall w="20"/>
-         <wall w="21"/>
-         <wall w="22"/>
-         <wall w="23"/>
-         <wall w="24"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="810.0971982912666" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="6" source="false" pin_fixed="false" area="810.0971982912666" fixed="false" div_counter="0">
-         <node n="67"/>
-         <node n="112"/>
-         <node n="113"/>
-         <node n="114"/>
-         <node n="115"/>
-         <node n="73"/>
-         <node n="91"/>
-         <node n="90"/>
-         <node n="89"/>
-         <node n="88"/>
-         <node n="87"/>
-         <node n="116"/>
-         <node n="117"/>
-         <node n="118"/>
-         <node n="119"/>
-         <node n="120"/>
-         <node n="121"/>
-         <node n="122"/>
-         <node n="123"/>
-         <node n="62"/>
-         <node n="63"/>
-         <node n="64"/>
-         <node n="65"/>
-         <node n="66"/>
-         <wall w="13"/>
-         <wall w="19"/>
-         <wall w="25"/>
-         <wall w="26"/>
-         <wall w="27"/>
-         <wall w="28"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="747.7255643750002" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="7" source="false" pin_fixed="false" area="747.7255643750002" fixed="false" div_counter="0">
-         <node n="124"/>
-         <node n="125"/>
-         <node n="126"/>
-         <node n="127"/>
-         <node n="128"/>
-         <node n="129"/>
-         <node n="130"/>
-         <node n="131"/>
-         <node n="132"/>
-         <node n="133"/>
-         <node n="134"/>
-         <node n="135"/>
-         <node n="136"/>
-         <node n="137"/>
-         <node n="138"/>
-         <node n="139"/>
-         <node n="140"/>
-         <node n="141"/>
-         <node n="142"/>
-         <wall w="29"/>
-         <wall w="30"/>
-         <wall w="31"/>
-         <wall w="32"/>
-         <wall w="33"/>
-         <wall w="34"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="792.5648499999996" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="8" source="false" pin_fixed="false" area="792.5648499999996" fixed="false" div_counter="0">
-         <node n="124"/>
-         <node n="142"/>
-         <node n="141"/>
-         <node n="140"/>
-         <node n="139"/>
-         <node n="159"/>
-         <node n="158"/>
-         <node n="157"/>
-         <node n="156"/>
-         <node n="155"/>
-         <node n="154"/>
-         <node n="153"/>
-         <node n="152"/>
-         <node n="151"/>
-         <node n="150"/>
-         <node n="149"/>
-         <node n="148"/>
-         <node n="147"/>
-         <node n="146"/>
-         <node n="145"/>
-         <node n="144"/>
-         <node n="143"/>
-         <wall w="34"/>
-         <wall w="35"/>
-         <wall w="36"/>
-         <wall w="37"/>
-         <wall w="38"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="764.6376389999953" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="9" source="false" pin_fixed="false" area="764.6376389999953" fixed="false" div_counter="0">
-         <node n="160"/>
-         <node n="173"/>
-         <node n="172"/>
-         <node n="171"/>
-         <node n="170"/>
-         <node n="169"/>
-         <node n="168"/>
-         <node n="167"/>
-         <node n="166"/>
-         <node n="165"/>
-         <node n="164"/>
-         <node n="132"/>
-         <node n="131"/>
-         <node n="130"/>
-         <node n="129"/>
-         <node n="128"/>
-         <node n="127"/>
-         <node n="163"/>
-         <node n="162"/>
-         <node n="161"/>
-         <wall w="30"/>
-         <wall w="39"/>
-         <wall w="40"/>
-         <wall w="41"/>
-         <wall w="42"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="802.3298131541035" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="10" source="false" pin_fixed="false" area="802.3298131541035" fixed="false" div_counter="0">
-         <node n="160"/>
-         <node n="174"/>
-         <node n="175"/>
-         <node n="176"/>
-         <node n="177"/>
-         <node n="96"/>
-         <node n="97"/>
-         <node n="98"/>
-         <node n="99"/>
-         <node n="100"/>
-         <node n="178"/>
-         <node n="179"/>
-         <node n="180"/>
-         <node n="181"/>
-         <node n="182"/>
-         <node n="183"/>
-         <node n="170"/>
-         <node n="171"/>
-         <node n="172"/>
-         <node n="173"/>
-         <wall w="21"/>
-         <wall w="42"/>
-         <wall w="43"/>
-         <wall w="44"/>
-         <wall w="45"/>
-         <wall w="46"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="812.4487645084192" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="11" source="false" pin_fixed="false" area="812.4487645084192" fixed="false" div_counter="0">
-         <node n="54"/>
-         <node n="184"/>
-         <node n="185"/>
-         <node n="186"/>
-         <node n="187"/>
-         <node n="188"/>
-         <node n="189"/>
-         <node n="190"/>
-         <node n="191"/>
-         <node n="107"/>
-         <node n="108"/>
-         <node n="109"/>
-         <node n="110"/>
-         <node n="111"/>
-         <node n="92"/>
-         <node n="192"/>
-         <node n="193"/>
-         <node n="194"/>
-         <node n="195"/>
-         <node n="72"/>
-         <node n="50"/>
-         <node n="51"/>
-         <node n="52"/>
-         <node n="53"/>
-         <wall w="10"/>
-         <wall w="24"/>
-         <wall w="47"/>
-         <wall w="48"/>
-         <wall w="49"/>
-         <wall w="50"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="814.4101535000012" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="12" source="false" pin_fixed="false" area="814.4101535000012" fixed="false" div_counter="0">
-         <node n="49"/>
-         <node n="37"/>
-         <node n="205"/>
-         <node n="204"/>
-         <node n="203"/>
-         <node n="202"/>
-         <node n="147"/>
-         <node n="148"/>
-         <node n="149"/>
-         <node n="150"/>
-         <node n="151"/>
-         <node n="152"/>
-         <node n="201"/>
-         <node n="200"/>
-         <node n="199"/>
-         <node n="198"/>
-         <node n="197"/>
-         <node n="196"/>
-         <node n="25"/>
-         <node n="24"/>
-         <node n="23"/>
-         <node n="47"/>
-         <node n="48"/>
-         <wall w="5"/>
-         <wall w="9"/>
-         <wall w="36"/>
-         <wall w="51"/>
-         <wall w="52"/>
-         <wall w="53"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="3" target_area="808.6614455000021" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="13" source="false" pin_fixed="false" area="808.6614455000021" fixed="false" div_counter="0">
-         <node n="76"/>
-         <node n="206"/>
-         <node n="207"/>
-         <node n="208"/>
-         <node n="42"/>
-         <node n="43"/>
-         <node n="44"/>
-         <node n="45"/>
-         <node n="46"/>
-         <node n="3"/>
-         <node n="4"/>
-         <node n="209"/>
-         <node n="210"/>
-         <node n="211"/>
-         <node n="212"/>
-         <node n="213"/>
-         <node n="214"/>
-         <node n="81"/>
-         <node n="80"/>
-         <node n="79"/>
-         <node n="78"/>
-         <node n="77"/>
-         <wall w="1"/>
-         <wall w="8"/>
-         <wall w="16"/>
-         <wall w="54"/>
-         <wall w="55"/>
-         <wall w="56"/>
-         <chem n="2">
-            <val v="2.251808"/>
-            <val v="0.481961"/>
-         </chem>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="827.438891999994" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="14" source="false" pin_fixed="false" area="827.438891999994" fixed="false" div_counter="0">
-         <node n="25"/>
-         <node n="196"/>
-         <node n="197"/>
-         <node n="198"/>
-         <node n="199"/>
-         <node n="200"/>
-         <node n="215"/>
-         <node n="216"/>
-         <node n="217"/>
-         <node n="218"/>
-         <node n="219"/>
-         <node n="220"/>
-         <node n="221"/>
-         <node n="222"/>
-         <node n="223"/>
-         <node n="224"/>
-         <node n="225"/>
-         <node n="30"/>
-         <node n="29"/>
-         <node n="28"/>
-         <node n="27"/>
-         <node n="26"/>
-         <wall w="6"/>
-         <wall w="51"/>
-         <wall w="57"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="833.0448551250029" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="15" source="false" pin_fixed="false" area="833.0448551250029" fixed="false" div_counter="0">
-         <node n="212"/>
-         <node n="211"/>
-         <node n="210"/>
-         <node n="209"/>
-         <node n="4"/>
-         <node n="5"/>
-         <node n="6"/>
-         <node n="7"/>
-         <node n="8"/>
-         <node n="9"/>
-         <node n="226"/>
-         <node n="227"/>
-         <node n="228"/>
-         <node n="229"/>
-         <node n="230"/>
-         <node n="231"/>
-         <node n="232"/>
-         <node n="233"/>
-         <node n="234"/>
-         <node n="235"/>
-         <node n="236"/>
-         <node n="213"/>
-         <wall w="2"/>
-         <wall w="55"/>
-         <wall w="58"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="782.859040874999" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="16" source="false" pin_fixed="false" area="782.859040874999" fixed="false" div_counter="0">
-         <node n="188"/>
-         <node n="187"/>
-         <node n="186"/>
-         <node n="185"/>
-         <node n="237"/>
-         <node n="238"/>
-         <node n="239"/>
-         <node n="240"/>
-         <node n="241"/>
-         <node n="242"/>
-         <node n="243"/>
-         <node n="244"/>
-         <node n="245"/>
-         <node n="246"/>
-         <node n="247"/>
-         <node n="248"/>
-         <node n="249"/>
-         <node n="250"/>
-         <node n="251"/>
-         <node n="189"/>
-         <wall w="48"/>
-         <wall w="59"/>
-         <wall w="60"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="832.3605757178302" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="17" source="false" pin_fixed="false" area="832.3605757178302" fixed="false" div_counter="0">
-         <node n="104"/>
-         <node n="105"/>
-         <node n="106"/>
-         <node n="107"/>
-         <node n="191"/>
-         <node n="190"/>
-         <node n="189"/>
-         <node n="251"/>
-         <node n="250"/>
-         <node n="249"/>
-         <node n="248"/>
-         <node n="247"/>
-         <node n="252"/>
-         <node n="253"/>
-         <node n="254"/>
-         <node n="255"/>
-         <node n="256"/>
-         <node n="257"/>
-         <node n="258"/>
-         <node n="259"/>
-         <node n="260"/>
-         <wall w="23"/>
-         <wall w="49"/>
-         <wall w="60"/>
-         <wall w="61"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="836.8887335012514" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="18" source="false" pin_fixed="false" area="836.8887335012514" fixed="false" div_counter="0">
-         <node n="102"/>
-         <node n="103"/>
-         <node n="104"/>
-         <node n="260"/>
-         <node n="259"/>
-         <node n="258"/>
-         <node n="257"/>
-         <node n="272"/>
-         <node n="271"/>
-         <node n="270"/>
-         <node n="269"/>
-         <node n="268"/>
-         <node n="267"/>
-         <node n="266"/>
-         <node n="265"/>
-         <node n="264"/>
-         <node n="263"/>
-         <node n="262"/>
-         <node n="261"/>
-         <node n="179"/>
-         <node n="178"/>
-         <node n="100"/>
-         <node n="101"/>
-         <wall w="22"/>
-         <wall w="44"/>
-         <wall w="62"/>
-         <wall w="61"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="793.615438851664" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="19" source="false" pin_fixed="false" area="793.615438851664" fixed="false" div_counter="0">
-         <node n="183"/>
-         <node n="182"/>
-         <node n="181"/>
-         <node n="180"/>
-         <node n="179"/>
-         <node n="178"/>
-         <node n="179"/>
-         <node n="261"/>
-         <node n="262"/>
-         <node n="263"/>
-         <node n="264"/>
-         <node n="265"/>
-         <node n="273"/>
-         <node n="274"/>
-         <node n="275"/>
-         <node n="276"/>
-         <node n="277"/>
-         <node n="278"/>
-         <node n="279"/>
-         <node n="280"/>
-         <node n="281"/>
-         <node n="282"/>
-         <node n="283"/>
-         <node n="284"/>
-         <node n="285"/>
-         <wall w="45"/>
-         <wall w="62"/>
-         <wall w="63"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="837.1302743337275" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="20" source="false" pin_fixed="false" area="837.1302743337275" fixed="false" div_counter="0">
-         <node n="59"/>
-         <node n="60"/>
-         <node n="61"/>
-         <node n="62"/>
-         <node n="123"/>
-         <node n="122"/>
-         <node n="286"/>
-         <node n="287"/>
-         <node n="288"/>
-         <node n="289"/>
-         <node n="290"/>
-         <node n="291"/>
-         <node n="292"/>
-         <node n="293"/>
-         <node n="294"/>
-         <node n="295"/>
-         <node n="296"/>
-         <node n="297"/>
-         <node n="298"/>
-         <node n="299"/>
-         <node n="300"/>
-         <node n="301"/>
-         <node n="302"/>
-         <node n="58"/>
-         <wall w="12"/>
-         <wall w="28"/>
-         <wall w="64"/>
-         <wall w="65"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="812.1306720849735" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="21" source="false" pin_fixed="false" area="812.1306720849735" fixed="false" div_counter="0">
-         <node n="121"/>
-         <node n="120"/>
-         <node n="119"/>
-         <node n="118"/>
-         <node n="117"/>
-         <node n="303"/>
-         <node n="304"/>
-         <node n="305"/>
-         <node n="306"/>
-         <node n="307"/>
-         <node n="308"/>
-         <node n="309"/>
-         <node n="310"/>
-         <node n="311"/>
-         <node n="312"/>
-         <node n="313"/>
-         <node n="314"/>
-         <node n="315"/>
-         <node n="290"/>
-         <node n="289"/>
-         <node n="288"/>
-         <node n="287"/>
-         <node n="286"/>
-         <node n="122"/>
-         <wall w="27"/>
-         <wall w="64"/>
-         <wall w="66"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="838.3761156249969" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="22" source="false" pin_fixed="false" area="838.3761156249969" fixed="false" div_counter="0">
-         <node n="157"/>
-         <node n="158"/>
-         <node n="159"/>
-         <node n="139"/>
-         <node n="138"/>
-         <node n="137"/>
-         <node n="316"/>
-         <node n="317"/>
-         <node n="318"/>
-         <node n="319"/>
-         <node n="320"/>
-         <node n="321"/>
-         <node n="322"/>
-         <node n="323"/>
-         <node n="324"/>
-         <node n="325"/>
-         <node n="326"/>
-         <node n="327"/>
-         <node n="328"/>
-         <node n="329"/>
-         <node n="330"/>
-         <node n="156"/>
-         <wall w="33"/>
-         <wall w="38"/>
-         <wall w="67"/>
-         <wall w="68"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="809.4103242499987" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="23" source="false" pin_fixed="false" area="809.4103242499987" fixed="false" div_counter="0">
-         <node n="134"/>
-         <node n="340"/>
-         <node n="339"/>
-         <node n="338"/>
-         <node n="337"/>
-         <node n="336"/>
-         <node n="335"/>
-         <node n="334"/>
-         <node n="333"/>
-         <node n="332"/>
-         <node n="331"/>
-         <node n="321"/>
-         <node n="320"/>
-         <node n="319"/>
-         <node n="318"/>
-         <node n="317"/>
-         <node n="316"/>
-         <node n="137"/>
-         <node n="136"/>
-         <node n="135"/>
-         <wall w="32"/>
-         <wall w="67"/>
-         <wall w="69"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="837.7645377819658" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="24" source="false" pin_fixed="false" area="837.7645377819658" fixed="false" div_counter="0">
-         <node n="167"/>
-         <node n="168"/>
-         <node n="169"/>
-         <node n="170"/>
-         <node n="183"/>
-         <node n="285"/>
-         <node n="284"/>
-         <node n="283"/>
-         <node n="282"/>
-         <node n="281"/>
-         <node n="341"/>
-         <node n="342"/>
-         <node n="343"/>
-         <node n="344"/>
-         <node n="345"/>
-         <node n="346"/>
-         <node n="347"/>
-         <node n="348"/>
-         <node n="349"/>
-         <node n="350"/>
-         <node n="351"/>
-         <wall w="41"/>
-         <wall w="46"/>
-         <wall w="63"/>
-         <wall w="70"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="888.0716695750023" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="25" source="false" pin_fixed="false" area="888.0716695750023" fixed="false" div_counter="0">
-         <node n="165"/>
-         <node n="166"/>
-         <node n="167"/>
-         <node n="351"/>
-         <node n="350"/>
-         <node n="349"/>
-         <node n="348"/>
-         <node n="347"/>
-         <node n="357"/>
-         <node n="356"/>
-         <node n="355"/>
-         <node n="354"/>
-         <node n="353"/>
-         <node n="352"/>
-         <node n="337"/>
-         <node n="338"/>
-         <node n="339"/>
-         <node n="340"/>
-         <node n="134"/>
-         <node n="133"/>
-         <node n="132"/>
-         <node n="164"/>
-         <wall w="31"/>
-         <wall w="40"/>
-         <wall w="69"/>
-         <wall w="70"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="853.807326124999" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="26" source="false" pin_fixed="false" area="853.807326124999" fixed="false" div_counter="0">
-         <node n="154"/>
-         <node n="155"/>
-         <node n="156"/>
-         <node n="330"/>
-         <node n="329"/>
-         <node n="328"/>
-         <node n="327"/>
-         <node n="363"/>
-         <node n="362"/>
-         <node n="361"/>
-         <node n="360"/>
-         <node n="359"/>
-         <node n="358"/>
-         <node n="219"/>
-         <node n="218"/>
-         <node n="217"/>
-         <node n="216"/>
-         <node n="215"/>
-         <node n="200"/>
-         <node n="201"/>
-         <node n="152"/>
-         <node n="153"/>
-         <wall w="37"/>
-         <wall w="52"/>
-         <wall w="57"/>
-         <wall w="68"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="871.2549866249952" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="27" source="false" pin_fixed="false" area="871.2549866249952" fixed="false" div_counter="0">
-         <node n="83"/>
-         <node n="82"/>
-         <node n="81"/>
-         <node n="214"/>
-         <node n="213"/>
-         <node n="236"/>
-         <node n="235"/>
-         <node n="234"/>
-         <node n="233"/>
-         <node n="232"/>
-         <node n="364"/>
-         <node n="365"/>
-         <node n="366"/>
-         <node n="367"/>
-         <node n="368"/>
-         <node n="369"/>
-         <node n="370"/>
-         <node n="371"/>
-         <node n="372"/>
-         <node n="373"/>
-         <node n="379"/>
-         <node n="84"/>
-         <wall w="17"/>
-         <wall w="56"/>
-         <wall w="58"/>
-         <wall w="71"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="841.2532820997197" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="28" source="false" pin_fixed="false" area="841.2532820997197" fixed="false" div_counter="0">
-         <node n="85"/>
-         <node n="84"/>
-         <node n="379"/>
-         <node n="373"/>
-         <node n="372"/>
-         <node n="371"/>
-         <node n="378"/>
-         <node n="377"/>
-         <node n="376"/>
-         <node n="375"/>
-         <node n="374"/>
-         <node n="308"/>
-         <node n="307"/>
-         <node n="306"/>
-         <node n="305"/>
-         <node n="304"/>
-         <node n="303"/>
-         <node n="117"/>
-         <node n="116"/>
-         <node n="87"/>
-         <node n="86"/>
-         <wall w="18"/>
-         <wall w="26"/>
-         <wall w="66"/>
-         <wall w="71"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="861.9510838749919" lambda_celllength="0" at_boundary="false" dead="false" target_length="0" stiffness="1" index="29" source="false" pin_fixed="false" area="861.9510838749919" fixed="false" div_counter="0">
-         <node n="56"/>
-         <node n="57"/>
-         <node n="58"/>
-         <node n="302"/>
-         <node n="301"/>
-         <node n="300"/>
-         <node n="299"/>
-         <node n="298"/>
-         <node n="386"/>
-         <node n="385"/>
-         <node n="384"/>
-         <node n="383"/>
-         <node n="382"/>
-         <node n="381"/>
-         <node n="380"/>
-         <node n="241"/>
-         <node n="240"/>
-         <node n="239"/>
-         <node n="238"/>
-         <node n="237"/>
-         <node n="185"/>
-         <node n="184"/>
-         <node n="54"/>
-         <node n="55"/>
-         <wall w="11"/>
-         <wall w="47"/>
-         <wall w="59"/>
-         <wall w="65"/>
-      </cell>
-      <cell boundary="0" cell_type="0" target_area="5565.81812591105" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="30" source="false" pin_fixed="false" area="5565.81812591105" fixed="false" div_counter="0">
-         <node n="113"/>
-         <node n="112"/>
-         <node n="67"/>
-         <node n="68"/>
-         <node n="69"/>
-         <node n="70"/>
-         <node n="71"/>
-         <node n="72"/>
-         <node n="195"/>
-         <node n="194"/>
-         <node n="193"/>
-         <node n="192"/>
-         <node n="92"/>
-         <node n="93"/>
-         <node n="94"/>
-         <node n="95"/>
-         <node n="96"/>
-         <node n="177"/>
-         <node n="176"/>
-         <node n="175"/>
-         <node n="174"/>
-         <node n="160"/>
-         <node n="161"/>
-         <node n="162"/>
-         <node n="163"/>
-         <node n="127"/>
-         <node n="126"/>
-         <node n="125"/>
-         <node n="124"/>
-         <node n="143"/>
-         <node n="144"/>
-         <node n="145"/>
-         <node n="146"/>
-         <node n="147"/>
-         <node n="202"/>
-         <node n="203"/>
-         <node n="204"/>
-         <node n="205"/>
-         <node n="37"/>
-         <node n="38"/>
-         <node n="39"/>
-         <node n="40"/>
-         <node n="41"/>
-         <node n="42"/>
-         <node n="208"/>
-         <node n="207"/>
-         <node n="206"/>
-         <node n="76"/>
-         <node n="75"/>
-         <node n="74"/>
-         <node n="73"/>
-         <node n="115"/>
-         <node n="114"/>
-         <wall w="7"/>
-         <wall w="14"/>
-         <wall w="15"/>
-         <wall w="20"/>
-         <wall w="25"/>
-         <wall w="29"/>
-         <wall w="35"/>
-         <wall w="39"/>
-         <wall w="43"/>
-         <wall w="50"/>
-         <wall w="53"/>
-         <wall w="54"/>
-      </cell>
-      <boundary_polygon boundary="0" cell_type="0" target_area="29955.65420301171" lambda_celllength="0" at_boundary="true" dead="false" target_length="0" stiffness="1" index="-1" source="false" pin_fixed="false" area="29955.65420301171" fixed="false" div_counter="0">
-         <node n="16"/>
-         <node n="14"/>
-         <node n="13"/>
-         <node n="12"/>
-         <node n="11"/>
-         <node n="10"/>
-         <node n="9"/>
-         <node n="226"/>
-         <node n="227"/>
-         <node n="228"/>
-         <node n="229"/>
-         <node n="230"/>
-         <node n="231"/>
-         <node n="232"/>
-         <node n="364"/>
-         <node n="365"/>
-         <node n="366"/>
-         <node n="367"/>
-         <node n="368"/>
-         <node n="369"/>
-         <node n="370"/>
-         <node n="371"/>
-         <node n="378"/>
-         <node n="377"/>
-         <node n="376"/>
-         <node n="375"/>
-         <node n="374"/>
-         <node n="308"/>
-         <node n="309"/>
-         <node n="310"/>
-         <node n="311"/>
-         <node n="312"/>
-         <node n="313"/>
-         <node n="314"/>
-         <node n="315"/>
-         <node n="290"/>
-         <node n="291"/>
-         <node n="292"/>
-         <node n="293"/>
-         <node n="294"/>
-         <node n="295"/>
-         <node n="296"/>
-         <node n="297"/>
-         <node n="298"/>
-         <node n="386"/>
-         <node n="385"/>
-         <node n="384"/>
-         <node n="383"/>
-         <node n="382"/>
-         <node n="381"/>
-         <node n="380"/>
-         <node n="241"/>
-         <node n="242"/>
-         <node n="243"/>
-         <node n="244"/>
-         <node n="245"/>
-         <node n="246"/>
-         <node n="247"/>
-         <node n="252"/>
-         <node n="253"/>
-         <node n="254"/>
-         <node n="255"/>
-         <node n="256"/>
-         <node n="257"/>
-         <node n="272"/>
-         <node n="271"/>
-         <node n="270"/>
-         <node n="269"/>
-         <node n="268"/>
-         <node n="267"/>
-         <node n="266"/>
-         <node n="265"/>
-         <node n="273"/>
-         <node n="274"/>
-         <node n="275"/>
-         <node n="276"/>
-         <node n="277"/>
-         <node n="278"/>
-         <node n="279"/>
-         <node n="280"/>
-         <node n="281"/>
-         <node n="341"/>
-         <node n="342"/>
-         <node n="343"/>
-         <node n="344"/>
-         <node n="345"/>
-         <node n="346"/>
-         <node n="347"/>
-         <node n="357"/>
-         <node n="356"/>
-         <node n="355"/>
-         <node n="354"/>
-         <node n="353"/>
-         <node n="352"/>
-         <node n="337"/>
-         <node n="336"/>
-         <node n="335"/>
-         <node n="334"/>
-         <node n="333"/>
-         <node n="332"/>
-         <node n="331"/>
-         <node n="321"/>
-         <node n="322"/>
-         <node n="323"/>
-         <node n="324"/>
-         <node n="325"/>
-         <node n="326"/>
-         <node n="327"/>
-         <node n="363"/>
-         <node n="362"/>
-         <node n="361"/>
-         <node n="360"/>
-         <node n="359"/>
-         <node n="358"/>
-         <node n="219"/>
-         <node n="220"/>
-         <node n="221"/>
-         <node n="222"/>
-         <node n="223"/>
-         <node n="224"/>
-         <node n="225"/>
-         <node n="30"/>
-         <node n="31"/>
-         <node n="32"/>
-         <node n="33"/>
-         <node n="34"/>
-         <node n="35"/>
-         <node n="36"/>
-      </boundary_polygon>
-   </cells>
-   <walls n="417">
-      <wall length="20.733110376857802" c1="0" c2="2" index="0" n1="19" n2="3" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="4.516653988297086" c1="0" c2="13" index="1" n1="3" n2="4" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="26.408861679354164" c1="0" c2="15" index="2" n1="4" n2="9" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.01859961813397" c1="0" c2="1" index="3" n1="15" n2="19" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="19.728603001465636" c1="1" c2="2" index="4" n1="19" n2="23" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="9.096978320024535" c1="1" c2="12" index="5" n1="23" n2="25" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.379000526493293" c1="1" c2="14" index="6" n1="25" n2="30" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.647922219764133" c1="2" c2="30" index="7" n1="37" n2="42" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.117129331422348" c1="2" c2="13" index="8" n1="42" n2="3" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.571201867682596" c1="2" c2="12" index="9" n1="23" n2="37" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.281788160738632" c1="3" c2="11" index="10" n1="72" n2="54" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="17.97757026275577" c1="3" c2="29" index="11" n1="54" n2="58" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="18.191398173880792" c1="3" c2="20" index="12" n1="58" n2="62" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.612635913761082" c1="3" c2="6" index="13" n1="62" n2="67" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.771115465481856" c1="3" c2="30" index="14" n1="67" n2="72" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="18.582457343588604" c1="4" c2="30" index="15" n1="73" n2="76" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.494293525313154" c1="4" c2="13" index="16" n1="76" n2="81" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="16.569985544163" c1="4" c2="27" index="17" n1="81" n2="84" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="18.344553431569885" c1="4" c2="28" index="18" n1="84" n2="87" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.521411993228003" c1="4" c2="6" index="19" n1="87" n2="73" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.34418914710536" c1="5" c2="30" index="20" n1="92" n2="96" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="20.597473879707866" c1="5" c2="10" index="21" n1="96" n2="100" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.966662265934204" c1="5" c2="18" index="22" n1="100" n2="104" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="14.060876946094535" c1="5" c2="17" index="23" n1="104" n2="107" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.033136649869267" c1="5" c2="11" index="24" n1="107" n2="92" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.692492842503263" c1="6" c2="30" index="25" n1="67" n2="73" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="8.558002867201349" c1="6" c2="28" index="26" n1="87" n2="117" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.03237848445233" c1="6" c2="21" index="27" n1="117" n2="122" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="12.1074989024173" c1="6" c2="20" index="28" n1="122" n2="62" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="16.86601678917694" c1="7" c2="30" index="29" n1="124" n2="127" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.844590503804195" c1="7" c2="9" index="30" n1="127" n2="132" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="9.405073116205314" c1="7" c2="25" index="31" n1="132" n2="134" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="17.65223044026193" c1="7" c2="23" index="32" n1="134" n2="137" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="9.68425697466901" c1="7" c2="22" index="33" n1="137" n2="139" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.061119913809247" c1="7" c2="8" index="34" n1="139" n2="124" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.875968825731775" c1="8" c2="30" index="35" n1="124" n2="147" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.794440498307814" c1="8" c2="12" index="36" n1="147" n2="152" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="19.063127739179926" c1="8" c2="26" index="37" n1="152" n2="156" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.843383209085204" c1="8" c2="22" index="38" n1="156" n2="139" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.866659320902393" c1="9" c2="30" index="39" n1="160" n2="127" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.31487610207676" c1="9" c2="25" index="40" n1="132" n2="167" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="16.47335794549509" c1="9" c2="24" index="41" n1="167" n2="170" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.86868447941721" c1="9" c2="10" index="42" n1="170" n2="160" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.15922546258165" c1="10" c2="30" index="43" n1="160" n2="96" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="9.938510870408102" c1="10" c2="18" index="44" n1="100" n2="179" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="27.885456383629638" c1="10" c2="19" index="45" n1="183" n2="178" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="8.459801233287147" c1="10" c2="24" index="46" n1="183" n2="170" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="8.82033806862994" c1="11" c2="29" index="47" n1="54" n2="185" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.45784405593944" c1="11" c2="16" index="48" n1="185" n2="189" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="13.479540404729843" c1="11" c2="17" index="49" n1="189" n2="107" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.411125670769064" c1="11" c2="30" index="50" n1="92" n2="72" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.509567822107932" c1="12" c2="14" index="51" n1="25" n2="200" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="9.135123775510055" c1="12" c2="26" index="52" n1="200" n2="152" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.66708991142204" c1="12" c2="30" index="53" n1="147" n2="37" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="25.465019573895276" c1="13" c2="30" index="54" n1="76" n2="42" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="25.618623448626167" c1="13" c2="15" index="55" n1="4" n2="213" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="11.227497765219303" c1="13" c2="27" index="56" n1="213" n2="81" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="25.88017076955309" c1="14" c2="26" index="57" n1="200" n2="219" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="25.69622858852197" c1="15" c2="27" index="58" n1="232" n2="213" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.997005106237452" c1="16" c2="29" index="59" n1="185" n2="241" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="25.318064595112567" c1="16" c2="17" index="60" n1="247" n2="189" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.32213238832164" c1="17" c2="18" index="61" n1="257" n2="104" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="29.143855381214024" c1="18" c2="19" index="62" n1="265" n2="178" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.730872054816903" c1="19" c2="24" index="63" n1="281" n2="183" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.463853050650695" c1="20" c2="21" index="64" n1="122" n2="290" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="22.73091935909152" c1="20" c2="29" index="65" n1="298" n2="58" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="26.62383329989109" c1="21" c2="28" index="66" n1="117" n2="308" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="26.63172417488766" c1="22" c2="23" index="67" n1="137" n2="321" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="23.617265722810156" c1="22" c2="26" index="68" n1="327" n2="156" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="26.27631890699267" c1="23" c2="25" index="69" n1="337" n2="134" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="24.12238971030969" c1="24" c2="25" index="70" n1="347" n2="167" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-      <wall length="21.693237810506325" c1="27" c2="28" index="71" n1="371" n2="84" wall_type="normal" viz_flux="0">
-         <transporters1/>
-         <transporters2/>
-      </wall>
-   </walls>
-   <nodesets n="0"/>
-   
-   
-  
-   
-   <settings>
-      
-      
-      <setting val="true" name="show_cell_centers"/>
-      
-      
-      <setting val="false" name="show_nodes"/>
-      
-      
-      <setting val="false" name="show_node_numbers"/>
-      
-      
-      <setting val="true" name="show_cell_numbers"/>
-      
-      
-      <setting val="false" name="show_borders_cells"/>
-      
-      
-      <setting val="false" name="show_cell_axes"/>
-      
-      
-      <setting val="false" name="show_cell_strain"/>
-      
-      
-      <setting val="false" name="show_fluxes"/>
-      
-      
-      <setting val="false" name="show_walls"/>
-      
-      
-      <setting val="false" name="save_movie_frames"/>
-      
-      
-      <setting val="false" name="show_only_leaf_boundary"/>
-      
-      
-      <setting val="true" name="cell_growth"/>
-      
-      
-      <setting val="false" name="hide_cells"/>
-      
-      
-  
-   
-   </settings>
-   
-   
-
-
-</leaf>
